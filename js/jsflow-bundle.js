(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
(function (Buffer){
var toString = Object.prototype.toString

var isModern = (
  typeof Buffer.alloc === 'function' &&
  typeof Buffer.allocUnsafe === 'function' &&
  typeof Buffer.from === 'function'
)

function isArrayBuffer (input) {
  return toString.call(input).slice(8, -1) === 'ArrayBuffer'
}

function fromArrayBuffer (obj, byteOffset, length) {
  byteOffset >>>= 0

  var maxLength = obj.byteLength - byteOffset

  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds")
  }

  if (length === undefined) {
    length = maxLength
  } else {
    length >>>= 0

    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds")
    }
  }

  return isModern
    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  return isModern
    ? Buffer.from(string, encoding)
    : new Buffer(string, encoding)
}

function bufferFrom (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return isModern
    ? Buffer.from(value)
    : new Buffer(value)
}

module.exports = bufferFrom

}).call(this,require("buffer").Buffer)

},{"buffer":4}],4:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

}).call(this,require("buffer").Buffer)

},{"base64-js":1,"buffer":4,"ieee754":25}],5:[function(require,module,exports){
(function (global){
/*
  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*global exports:true, require:true, global:true*/
(function () {
    'use strict';

    var Syntax,
        Precedence,
        BinaryPrecedence,
        SourceNode,
        estraverse,
        esutils,
        base,
        indent,
        json,
        renumber,
        hexadecimal,
        quotes,
        escapeless,
        newline,
        space,
        parentheses,
        semicolons,
        safeConcatenation,
        directive,
        extra,
        parse,
        sourceMap,
        sourceCode,
        preserveBlankLines,
        FORMAT_MINIFY,
        FORMAT_DEFAULTS;

    estraverse = require('estraverse');
    esutils = require('esutils');

    Syntax = estraverse.Syntax;

    // Generation is done by generateExpression.
    function isExpression(node) {
        return CodeGenerator.Expression.hasOwnProperty(node.type);
    }

    // Generation is done by generateStatement.
    function isStatement(node) {
        return CodeGenerator.Statement.hasOwnProperty(node.type);
    }

    Precedence = {
        Sequence: 0,
        Yield: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        LogicalOR: 3,
        LogicalAND: 4,
        BitwiseOR: 5,
        BitwiseXOR: 6,
        BitwiseAND: 7,
        Equality: 8,
        Relational: 9,
        BitwiseSHIFT: 10,
        Additive: 11,
        Multiplicative: 12,
        Exponentiation: 13,
        Await: 14,
        Unary: 14,
        Postfix: 15,
        Call: 16,
        New: 17,
        TaggedTemplate: 18,
        Member: 19,
        Primary: 20
    };

    BinaryPrecedence = {
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative,
        '**': Precedence.Exponentiation
    };

    //Flags
    var F_ALLOW_IN = 1,
        F_ALLOW_CALL = 1 << 1,
        F_ALLOW_UNPARATH_NEW = 1 << 2,
        F_FUNC_BODY = 1 << 3,
        F_DIRECTIVE_CTX = 1 << 4,
        F_SEMICOLON_OPT = 1 << 5;

    //Expression flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_ALLOW_CALL
    // F_ALLOW_UNPARATH_NEW
    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,
        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TFF = F_ALLOW_IN,
        E_FFT = F_ALLOW_UNPARATH_NEW,
        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;

    //Statement flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_FUNC_BODY
    // F_DIRECTIVE_CTX
    // F_SEMICOLON_OPT
    var S_TFFF = F_ALLOW_IN,
        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,
        S_FFFF = 0x00,
        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,
        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;

    function getDefaultOptions() {
        // default options
        return {
            indent: null,
            base: null,
            parse: null,
            comment: false,
            format: {
                indent: {
                    style: '    ',
                    base: 0,
                    adjustMultilineComment: false
                },
                newline: '\n',
                space: ' ',
                json: false,
                renumber: false,
                hexadecimal: false,
                quotes: 'single',
                escapeless: false,
                compact: false,
                parentheses: true,
                semicolons: true,
                safeConcatenation: false,
                preserveBlankLines: false
            },
            moz: {
                comprehensionExpressionStartsWithAssignment: false,
                starlessGenerator: false
            },
            sourceMap: null,
            sourceMapRoot: null,
            sourceMapWithCode: false,
            directive: false,
            raw: true,
            verbatim: null,
            sourceCode: null
        };
    }

    function stringRepeat(str, num) {
        var result = '';

        for (num |= 0; num > 0; num >>>= 1, str += str) {
            if (num & 1) {
                result += str;
            }
        }

        return result;
    }

    function hasLineTerminator(str) {
        return (/[\r\n]/g).test(str);
    }

    function endsWithLineTerminator(str) {
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
    }

    function merge(target, override) {
        var key;
        for (key in override) {
            if (override.hasOwnProperty(key)) {
                target[key] = override[key];
            }
        }
        return target;
    }

    function updateDeeply(target, override) {
        var key, val;

        function isHashObject(target) {
            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
        }

        for (key in override) {
            if (override.hasOwnProperty(key)) {
                val = override[key];
                if (isHashObject(val)) {
                    if (isHashObject(target[key])) {
                        updateDeeply(target[key], val);
                    } else {
                        target[key] = updateDeeply({}, val);
                    }
                } else {
                    target[key] = val;
                }
            }
        }
        return target;
    }

    function generateNumber(value) {
        var result, point, temp, exponent, pos;

        if (value !== value) {
            throw new Error('Numeric literal whose value is NaN');
        }
        if (value < 0 || (value === 0 && 1 / value < 0)) {
            throw new Error('Numeric literal whose value is negative');
        }

        if (value === 1 / 0) {
            return json ? 'null' : renumber ? '1e400' : '1e+400';
        }

        result = '' + value;
        if (!renumber || result.length < 3) {
            return result;
        }

        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {
            point = 0;
            result = result.slice(1);
        }
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) {
            exponent = +temp.slice(pos + 1);
            temp = temp.slice(0, pos);
        }
        if (point >= 0) {
            exponent -= temp.length - point - 1;
            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
        }
        pos = 0;
        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {
            --pos;
        }
        if (pos !== 0) {
            exponent -= pos;
            temp = temp.slice(0, pos);
        }
        if (exponent !== 0) {
            temp += 'e' + exponent;
        }
        if ((temp.length < result.length ||
                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
                +temp === value) {
            result = temp;
        }

        return result;
    }

    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine

    function escapeRegExpCharacter(ch, previousIsBackslash) {
        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
        if ((ch & ~1) === 0x2028) {
            return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
        } else if (ch === 10 || ch === 13) {  // \n, \r
            return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
        }
        return String.fromCharCode(ch);
    }

    function generateRegExp(reg) {
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

        result = reg.toString();

        if (reg.source) {
            // extract flag from toString result
            match = result.match(/\/([^/]*)$/);
            if (!match) {
                return result;
            }

            flags = match[1];
            result = '';

            characterInBrack = false;
            previousIsBackslash = false;
            for (i = 0, iz = reg.source.length; i < iz; ++i) {
                ch = reg.source.charCodeAt(i);

                if (!previousIsBackslash) {
                    if (characterInBrack) {
                        if (ch === 93) {  // ]
                            characterInBrack = false;
                        }
                    } else {
                        if (ch === 47) {  // /
                            result += '\\';
                        } else if (ch === 91) {  // [
                            characterInBrack = true;
                        }
                    }
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    previousIsBackslash = ch === 92;  // \
                } else {
                    // if new RegExp("\\\n') is provided, create /\n/
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    // prevent like /\\[/]/
                    previousIsBackslash = false;
                }
            }

            return '/' + result + '/' + flags;
        }

        return result;
    }

    function escapeAllowedCharacter(code, next) {
        var hex;

        if (code === 0x08  /* \b */) {
            return '\\b';
        }

        if (code === 0x0C  /* \f */) {
            return '\\f';
        }

        if (code === 0x09  /* \t */) {
            return '\\t';
        }

        hex = code.toString(16).toUpperCase();
        if (json || code > 0xFF) {
            return '\\u' + '0000'.slice(hex.length) + hex;
        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
            return '\\0';
        } else if (code === 0x000B  /* \v */) { // '\v'
            return '\\x0B';
        } else {
            return '\\x' + '00'.slice(hex.length) + hex;
        }
    }

    function escapeDisallowedCharacter(code) {
        if (code === 0x5C  /* \ */) {
            return '\\\\';
        }

        if (code === 0x0A  /* \n */) {
            return '\\n';
        }

        if (code === 0x0D  /* \r */) {
            return '\\r';
        }

        if (code === 0x2028) {
            return '\\u2028';
        }

        if (code === 0x2029) {
            return '\\u2029';
        }

        throw new Error('Incorrectly classified character');
    }

    function escapeDirective(str) {
        var i, iz, code, quote;

        quote = quotes === 'double' ? '"' : '\'';
        for (i = 0, iz = str.length; i < iz; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                quote = '"';
                break;
            } else if (code === 0x22  /* " */) {
                quote = '\'';
                break;
            } else if (code === 0x5C  /* \ */) {
                ++i;
            }
        }

        return quote + str + quote;
    }

    function escapeString(str) {
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                ++singleQuotes;
            } else if (code === 0x22  /* " */) {
                ++doubleQuotes;
            } else if (code === 0x2F  /* / */ && json) {
                result += '\\';
            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \ */) {
                result += escapeDisallowedCharacter(code);
                continue;
            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) {
                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                continue;
            }
            result += String.fromCharCode(code);
        }

        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
        quote = single ? '\'' : '"';

        if (!(single ? singleQuotes : doubleQuotes)) {
            return quote + result + quote;
        }

        str = result;
        result = quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* " */ && !single)) {
                result += '\\';
            }
            result += String.fromCharCode(code);
        }

        return result + quote;
    }

    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */
    function flattenToString(arr) {
        var i, iz, elem, result = '';
        for (i = 0, iz = arr.length; i < iz; ++i) {
            elem = arr[i];
            result += Array.isArray(elem) ? flattenToString(elem) : elem;
        }
        return result;
    }

    /**
     * convert generated to a SourceNode when source maps are enabled.
     */
    function toSourceNodeWhenNeeded(generated, node) {
        if (!sourceMap) {
            // with no source maps, generated is either an
            // array or a string.  if an array, flatten it.
            // if a string, just return it
            if (Array.isArray(generated)) {
                return flattenToString(generated);
            } else {
                return generated;
            }
        }
        if (node == null) {
            if (generated instanceof SourceNode) {
                return generated;
            } else {
                node = {};
            }
        }
        if (node.loc == null) {
            return new SourceNode(null, null, sourceMap, generated, node.name || null);
        }
        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
    }

    function noEmptySpace() {
        return (space) ? space : ' ';
    }

    function join(left, right) {
        var leftSource,
            rightSource,
            leftCharCode,
            rightCharCode;

        leftSource = toSourceNodeWhenNeeded(left).toString();
        if (leftSource.length === 0) {
            return [right];
        }

        rightSource = toSourceNodeWhenNeeded(right).toString();
        if (rightSource.length === 0) {
            return [left];
        }

        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
        rightCharCode = rightSource.charCodeAt(0);

        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||
            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||
            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`
            return [left, noEmptySpace(), right];
        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||
                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
            return [left, right];
        }
        return [left, space, right];
    }

    function addIndent(stmt) {
        return [base, stmt];
    }

    function withIndent(fn) {
        var previousBase;
        previousBase = base;
        base += indent;
        fn(base);
        base = previousBase;
    }

    function calculateSpaces(str) {
        var i;
        for (i = str.length - 1; i >= 0; --i) {
            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
                break;
            }
        }
        return (str.length - 1) - i;
    }

    function adjustMultilineComment(value, specialBase) {
        var array, i, len, line, j, spaces, previousBase, sn;

        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;

        // first line doesn't have indentation
        for (i = 1, len = array.length; i < len; ++i) {
            line = array[i];
            j = 0;
            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
                ++j;
            }
            if (spaces > j) {
                spaces = j;
            }
        }

        if (typeof specialBase !== 'undefined') {
            // pattern like
            // {
            //   var t = 20;  /*
            //                 * this is comment
            //                 */
            // }
            previousBase = base;
            if (array[1][spaces] === '*') {
                specialBase += ' ';
            }
            base = specialBase;
        } else {
            if (spaces & 1) {
                // /*
                //  *
                //  */
                // If spaces are odd number, above pattern is considered.
                // We waste 1 space.
                --spaces;
            }
            previousBase = base;
        }

        for (i = 1, len = array.length; i < len; ++i) {
            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
            array[i] = sourceMap ? sn.join('') : sn;
        }

        base = previousBase;

        return array.join('\n');
    }

    function generateComment(comment, specialBase) {
        if (comment.type === 'Line') {
            if (endsWithLineTerminator(comment.value)) {
                return '//' + comment.value;
            } else {
                // Always use LineTerminator
                var result = '//' + comment.value;
                if (!preserveBlankLines) {
                    result += '\n';
                }
                return result;
            }
        }
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
        }
        return '/*' + comment.value + '*/';
    }

    function addComments(stmt, result) {
        var i, len, comment, save, tailingToStatement, specialBase, fragment,
            extRange, range, prevRange, prefix, infix, suffix, count;

        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
            save = result;

            if (preserveBlankLines) {
                comment = stmt.leadingComments[0];
                result = [];

                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;
                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }

                prevRange = range;

                for (i = 1, len = stmt.leadingComments.length; i < len; i++) {
                    comment = stmt.leadingComments[i];
                    range = comment.range;

                    infix = sourceCode.substring(prevRange[1], range[0]);
                    count = (infix.match(/\n/g) || []).length;
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));

                    prevRange = range;
                }

                suffix = sourceCode.substring(range[1], extRange[1]);
                count = (suffix.match(/\n/g) || []).length;
                result.push(stringRepeat('\n', count));
            } else {
                comment = stmt.leadingComments[0];
                result = [];
                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
                    result.push('\n');
                }
                result.push(generateComment(comment));
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push('\n');
                }

                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
                    comment = stmt.leadingComments[i];
                    fragment = [generateComment(comment)];
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        fragment.push('\n');
                    }
                    result.push(addIndent(fragment));
                }
            }

            result.push(addIndent(save));
        }

        if (stmt.trailingComments) {

            if (preserveBlankLines) {
                comment = stmt.trailingComments[0];
                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;

                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }
            } else {
                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
                    comment = stmt.trailingComments[i];
                    if (tailingToStatement) {
                        // We assume target like following script
                        //
                        // var t = 20;  /**
                        //               * This is comment of t
                        //               */
                        if (i === 0) {
                            // first case
                            result = [result, indent];
                        } else {
                            result = [result, specialBase];
                        }
                        result.push(generateComment(comment, specialBase));
                    } else {
                        result = [result, addIndent(generateComment(comment))];
                    }
                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result = [result, '\n'];
                    }
                }
            }
        }

        return result;
    }

    function generateBlankLines(start, end, result) {
        var j, newlineCount = 0;

        for (j = start; j < end; j++) {
            if (sourceCode[j] === '\n') {
                newlineCount++;
            }
        }

        for (j = 1; j < newlineCount; j++) {
            result.push(newline);
        }
    }

    function parenthesize(text, current, should) {
        if (current < should) {
            return ['(', text, ')'];
        }
        return text;
    }

    function generateVerbatimString(string) {
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for (i = 1, iz = result.length; i < iz; i++) {
            result[i] = newline + base + result[i];
        }
        return result;
    }

    function generateVerbatim(expr, precedence) {
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];

        if (typeof verbatim === 'string') {
            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
        } else {
            // verbatim is object
            result = generateVerbatimString(verbatim.content);
            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;
            result = parenthesize(result, prec, precedence);
        }

        return toSourceNodeWhenNeeded(result, expr);
    }

    function CodeGenerator() {
    }

    // Helpers.

    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {
        var result, noLeadingComment, that = this;

        noLeadingComment = !extra.comment || !stmt.leadingComments;

        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
            return [space, this.generateStatement(stmt, flags)];
        }

        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
            return ';';
        }

        withIndent(function () {
            result = [
                newline,
                addIndent(that.generateStatement(stmt, flags))
            ];
        });

        return result;
    };

    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
            return [result, space];
        }
        if (ends) {
            return [result, base];
        }
        return [result, newline, base];
    };

    function generateIdentifier(node) {
        return toSourceNodeWhenNeeded(node.name, node);
    }

    function generateAsyncPrefix(node, spaceRequired) {
        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
    }

    function generateStarSuffix(node) {
        var isGenerator = node.generator && !extra.moz.starlessGenerator;
        return isGenerator ? '*' + space : '';
    }

    function generateMethodPrefix(prop) {
        var func = prop.value, prefix = '';
        if (func.async) {
            prefix += generateAsyncPrefix(func, !prop.computed);
        }
        if (func.generator) {
            // avoid space before method name
            prefix += generateStarSuffix(func) ? '*' : '';
        }
        return prefix;
    }

    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
        if (node.type === Syntax.Identifier) {
            return generateIdentifier(node);
        }
        return this.generateExpression(node, precedence, flags);
    };

    CodeGenerator.prototype.generateFunctionParams = function (node) {
        var i, iz, result, hasDefault;

        hasDefault = false;

        if (node.type === Syntax.ArrowFunctionExpression &&
                !node.rest && (!node.defaults || node.defaults.length === 0) &&
                node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
            // arg => { } case
            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];
        } else {
            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
            result.push('(');
            if (node.defaults) {
                hasDefault = true;
            }
            for (i = 0, iz = node.params.length; i < iz; ++i) {
                if (hasDefault && node.defaults[i]) {
                    // Handle default values.
                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
                } else {
                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
                }
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }

            if (node.rest) {
                if (node.params.length) {
                    result.push(',' + space);
                }
                result.push('...');
                result.push(generateIdentifier(node.rest));
            }

            result.push(')');
        }

        return result;
    };

    CodeGenerator.prototype.generateFunctionBody = function (node) {
        var result, expr;

        result = this.generateFunctionParams(node);

        if (node.type === Syntax.ArrowFunctionExpression) {
            result.push(space);
            result.push('=>');
        }

        if (node.expression) {
            result.push(space);
            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
            if (expr.toString().charAt(0) === '{') {
                expr = ['(', expr, ')'];
            }
            result.push(expr);
        } else {
            result.push(this.maybeBlock(node.body, S_TTFF));
        }

        return result;
    };

    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
        var result = ['for' + (stmt.await ? noEmptySpace() + 'await' : '') + space + '('], that = this;
        withIndent(function () {
            if (stmt.left.type === Syntax.VariableDeclaration) {
                withIndent(function () {
                    result.push(stmt.left.kind + noEmptySpace());
                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
                });
            } else {
                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
            }

            result = join(result, operator);
            result = [join(
                result,
                that.generateExpression(stmt.right, Precedence.Assignment, E_TTT)
            ), ')'];
        });
        result.push(this.maybeBlock(stmt.body, flags));
        return result;
    };

    CodeGenerator.prototype.generatePropertyKey = function (expr, computed) {
        var result = [];

        if (computed) {
            result.push('[');
        }

        result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));

        if (computed) {
            result.push(']');
        }

        return result;
    };

    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
        if (Precedence.Assignment < precedence) {
            flags |= F_ALLOW_IN;
        }

        return parenthesize(
            [
                this.generateExpression(left, Precedence.Call, flags),
                space + operator + space,
                this.generateExpression(right, Precedence.Assignment, flags)
            ],
            Precedence.Assignment,
            precedence
        );
    };

    CodeGenerator.prototype.semicolon = function (flags) {
        if (!semicolons && flags & F_SEMICOLON_OPT) {
            return '';
        }
        return ';';
    };

    // Statements.

    CodeGenerator.Statement = {

        BlockStatement: function (stmt, flags) {
            var range, content, result = ['{', newline], that = this;

            withIndent(function () {
                // handle functions without any code
                if (stmt.body.length === 0 && preserveBlankLines) {
                    range = stmt.range;
                    if (range[1] - range[0] > 2) {
                        content = sourceCode.substring(range[0] + 1, range[1] - 1);
                        if (content[0] === '\n') {
                            result = ['{'];
                        }
                        result.push(content);
                    }
                }

                var i, iz, fragment, bodyFlags;
                bodyFlags = S_TFFF;
                if (flags & F_FUNC_BODY) {
                    bodyFlags |= F_DIRECTIVE_CTX;
                }

                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                    if (preserveBlankLines) {
                        // handle spaces before the first line
                        if (i === 0) {
                            if (stmt.body[0].leadingComments) {
                                range = stmt.body[0].leadingComments[0].extendedRange;
                                content = sourceCode.substring(range[0], range[1]);
                                if (content[0] === '\n') {
                                    result = ['{'];
                                }
                            }
                            if (!stmt.body[0].leadingComments) {
                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                            }
                        }

                        // handle spaces between lines
                        if (i > 0) {
                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {
                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                            }
                        }
                    }

                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }

                    if (stmt.body[i].leadingComments && preserveBlankLines) {
                        fragment = that.generateStatement(stmt.body[i], bodyFlags);
                    } else {
                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
                    }

                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        if (preserveBlankLines && i < iz - 1) {
                            // don't add a new line if there are leading coments
                            // in the next statement
                            if (!stmt.body[i + 1].leadingComments) {
                                result.push(newline);
                            }
                        } else {
                            result.push(newline);
                        }
                    }

                    if (preserveBlankLines) {
                        // handle spaces after the last line
                        if (i === iz - 1) {
                            if (!stmt.body[i].trailingComments) {
                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                            }
                        }
                    }
                }
            });

            result.push(addIndent('}'));
            return result;
        },

        BreakStatement: function (stmt, flags) {
            if (stmt.label) {
                return 'break ' + stmt.label.name + this.semicolon(flags);
            }
            return 'break' + this.semicolon(flags);
        },

        ContinueStatement: function (stmt, flags) {
            if (stmt.label) {
                return 'continue ' + stmt.label.name + this.semicolon(flags);
            }
            return 'continue' + this.semicolon(flags);
        },

        ClassBody: function (stmt, flags) {
            var result = [ '{', newline], that = this;

            withIndent(function (indent) {
                var i, iz;

                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                    result.push(indent);
                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(newline);
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },

        ClassDeclaration: function (stmt, flags) {
            var result, fragment;
            result  = ['class'];
            if (stmt.id) {
                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));
            }
            if (stmt.superClass) {
                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Unary, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(stmt.body, S_TFFT));
            return result;
        },

        DirectiveStatement: function (stmt, flags) {
            if (extra.raw && stmt.raw) {
                return stmt.raw + this.semicolon(flags);
            }
            return escapeDirective(stmt.directive) + this.semicolon(flags);
        },

        DoWhileStatement: function (stmt, flags) {
            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
            result = this.maybeBlockSuffix(stmt.body, result);
            return join(result, [
                'while' + space + '(',
                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                ')' + this.semicolon(flags)
            ]);
        },

        CatchClause: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                var guard;

                if (stmt.param) {
                    result = [
                        'catch' + space + '(',
                        that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
                        ')'
                    ];

                    if (stmt.guard) {
                        guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
                        result.splice(2, 0, ' if ', guard);
                    }
                } else {
                    result = ['catch'];
                }
            });
            result.push(this.maybeBlock(stmt.body, S_TFFF));
            return result;
        },

        DebuggerStatement: function (stmt, flags) {
            return 'debugger' + this.semicolon(flags);
        },

        EmptyStatement: function (stmt, flags) {
            return ';';
        },

        ExportDefaultDeclaration: function (stmt, flags) {
            var result = [ 'export' ], bodyFlags;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export default HoistableDeclaration[Default]
            // export default AssignmentExpression[In] ;
            result = join(result, 'default');
            if (isStatement(stmt.declaration)) {
                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
            } else {
                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
            }
            return result;
        },

        ExportNamedDeclaration: function (stmt, flags) {
            var result = [ 'export' ], bodyFlags, that = this;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export VariableStatement
            // export Declaration[Default]
            if (stmt.declaration) {
                return join(result, this.generateStatement(stmt.declaration, bodyFlags));
            }

            // export ExportClause[NoReference] FromClause ;
            // export ExportClause ;
            if (stmt.specifiers) {
                if (stmt.specifiers.length === 0) {
                    result = join(result, '{' + space + '}');
                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
                } else {
                    result = join(result, '{');
                    withIndent(function (indent) {
                        var i, iz;
                        result.push(newline);
                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                            result.push(indent);
                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                            if (i + 1 < iz) {
                                result.push(',' + newline);
                            }
                        }
                    });
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result.push(newline);
                    }
                    result.push(base + '}');
                }

                if (stmt.source) {
                    result = join(result, [
                        'from' + space,
                        // ModuleSpecifier
                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                        this.semicolon(flags)
                    ]);
                } else {
                    result.push(this.semicolon(flags));
                }
            }
            return result;
        },

        ExportAllDeclaration: function (stmt, flags) {
            // export * FromClause ;
            return [
                'export' + space,
                '*' + space,
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ];
        },

        ExpressionStatement: function (stmt, flags) {
            var result, fragment;

            function isClassPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 5) !== 'class') {
                    return false;
                }
                code = fragment.charCodeAt(5);
                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
            }

            function isFunctionPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
            }

            function isAsyncPrefixed(fragment) {
                var code, i, iz;
                if (fragment.slice(0, 5) !== 'async') {
                    return false;
                }
                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
                    return false;
                }
                for (i = 6, iz = fragment.length; i < iz; ++i) {
                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
                        break;
                    }
                }
                if (i === iz) {
                    return false;
                }
                if (fragment.slice(i, i + 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(i + 8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
            }

            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
            // 12.4 '{', 'function', 'class' is not allowed in this position.
            // wrap expression with parentheses
            fragment = toSourceNodeWhenNeeded(result).toString();
            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression
                    isClassPrefixed(fragment) ||
                    isFunctionPrefixed(fragment) ||
                    isAsyncPrefixed(fragment) ||
                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {
                result = ['(', result, ')' + this.semicolon(flags)];
            } else {
                result.push(this.semicolon(flags));
            }
            return result;
        },

        ImportDeclaration: function (stmt, flags) {
            // ES6: 15.2.1 valid import declarations:
            //     - import ImportClause FromClause ;
            //     - import ModuleSpecifier ;
            var result, cursor, that = this;

            // If no ImportClause is present,
            // this should be `import ModuleSpecifier` so skip `from`
            // ModuleSpecifier is StringLiteral.
            if (stmt.specifiers.length === 0) {
                // import ModuleSpecifier ;
                return [
                    'import',
                    space,
                    // ModuleSpecifier
                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                    this.semicolon(flags)
                ];
            }

            // import ImportClause FromClause ;
            result = [
                'import'
            ];
            cursor = 0;

            // ImportedBinding
            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
                result = join(result, [
                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                ]);
                ++cursor;
            }

            if (stmt.specifiers[cursor]) {
                if (cursor !== 0) {
                    result.push(',');
                }

                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
                    // NameSpaceImport
                    result = join(result, [
                            space,
                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                    ]);
                } else {
                    // NamedImports
                    result.push(space + '{');

                    if ((stmt.specifiers.length - cursor) === 1) {
                        // import { ... } from "...";
                        result.push(space);
                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                        result.push(space + '}' + space);
                    } else {
                        // import {
                        //    ...,
                        //    ...,
                        // } from "...";
                        withIndent(function (indent) {
                            var i, iz;
                            result.push(newline);
                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
                                result.push(indent);
                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                if (i + 1 < iz) {
                                    result.push(',' + newline);
                                }
                            }
                        });
                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                            result.push(newline);
                        }
                        result.push(base + '}' + space);
                    }
                }
            }

            result = join(result, [
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ]);
            return result;
        },

        VariableDeclarator: function (stmt, flags) {
            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;
            if (stmt.init) {
                return [
                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
                    space,
                    '=',
                    space,
                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
                ];
            }
            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
        },

        VariableDeclaration: function (stmt, flags) {
            // VariableDeclarator is typed as Statement,
            // but joined with comma (not LineTerminator).
            // So if comment is attached to target node, we should specialize.
            var result, i, iz, node, bodyFlags, that = this;

            result = [ stmt.kind ];

            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;

            function block() {
                node = stmt.declarations[0];
                if (extra.comment && node.leadingComments) {
                    result.push('\n');
                    result.push(addIndent(that.generateStatement(node, bodyFlags)));
                } else {
                    result.push(noEmptySpace());
                    result.push(that.generateStatement(node, bodyFlags));
                }

                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
                    node = stmt.declarations[i];
                    if (extra.comment && node.leadingComments) {
                        result.push(',' + newline);
                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
                    } else {
                        result.push(',' + space);
                        result.push(that.generateStatement(node, bodyFlags));
                    }
                }
            }

            if (stmt.declarations.length > 1) {
                withIndent(block);
            } else {
                block();
            }

            result.push(this.semicolon(flags));

            return result;
        },

        ThrowStatement: function (stmt, flags) {
            return [join(
                'throw',
                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
            ), this.semicolon(flags)];
        },

        TryStatement: function (stmt, flags) {
            var result, i, iz, guardedHandlers;

            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];
            result = this.maybeBlockSuffix(stmt.block, result);

            if (stmt.handlers) {
                // old interface
                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
                    }
                }
            } else {
                guardedHandlers = stmt.guardedHandlers || [];

                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
                    }
                }

                // new interface
                if (stmt.handler) {
                    if (Array.isArray(stmt.handler)) {
                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                            if (stmt.finalizer || i + 1 !== iz) {
                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                            }
                        }
                    } else {
                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                        if (stmt.finalizer) {
                            result = this.maybeBlockSuffix(stmt.handler.body, result);
                        }
                    }
                }
            }
            if (stmt.finalizer) {
                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);
            }
            return result;
        },

        SwitchStatement: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () {
                result = [
                    'switch' + space + '(',
                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
                    ')' + space + '{' + newline
                ];
            });
            if (stmt.cases) {
                bodyFlags = S_TFFF;
                for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            }
            result.push(addIndent('}'));
            return result;
        },

        SwitchCase: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () {
                if (stmt.test) {
                    result = [
                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                        ':'
                    ];
                } else {
                    result = ['default:'];
                }

                i = 0;
                iz = stmt.consequent.length;
                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
                    result.push(fragment);
                    i = 1;
                }

                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push(newline);
                }

                bodyFlags = S_TFFF;
                for (; i < iz; ++i) {
                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
                    result.push(fragment);
                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            });
            return result;
        },

        IfStatement: function (stmt, flags) {
            var result, bodyFlags, semicolonOptional, that = this;
            withIndent(function () {
                result = [
                    'if' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            semicolonOptional = flags & F_SEMICOLON_OPT;
            bodyFlags = S_TFFF;
            if (semicolonOptional) {
                bodyFlags |= F_SEMICOLON_OPT;
            }
            if (stmt.alternate) {
                result.push(this.maybeBlock(stmt.consequent, S_TFFF));
                result = this.maybeBlockSuffix(stmt.consequent, result);
                if (stmt.alternate.type === Syntax.IfStatement) {
                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);
                } else {
                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
                }
            } else {
                result.push(this.maybeBlock(stmt.consequent, bodyFlags));
            }
            return result;
        },

        ForStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = ['for' + space + '('];
                if (stmt.init) {
                    if (stmt.init.type === Syntax.VariableDeclaration) {
                        result.push(that.generateStatement(stmt.init, S_FFFF));
                    } else {
                        // F_ALLOW_IN becomes false.
                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                        result.push(';');
                    }
                } else {
                    result.push(';');
                }

                if (stmt.test) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
                    result.push(';');
                } else {
                    result.push(';');
                }

                if (stmt.update) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
                    result.push(')');
                } else {
                    result.push(')');
                }
            });

            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },

        ForInStatement: function (stmt, flags) {
            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },

        ForOfStatement: function (stmt, flags) {
            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },

        LabeledStatement: function (stmt, flags) {
            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];
        },

        Program: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags;
            iz = stmt.body.length;
            result = [safeConcatenation && iz > 0 ? '\n' : ''];
            bodyFlags = S_TFTF;
            for (i = 0; i < iz; ++i) {
                if (!safeConcatenation && i === iz - 1) {
                    bodyFlags |= F_SEMICOLON_OPT;
                }

                if (preserveBlankLines) {
                    // handle spaces before the first line
                    if (i === 0) {
                        if (!stmt.body[0].leadingComments) {
                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
                        }
                    }

                    // handle spaces between lines
                    if (i > 0) {
                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                        }
                    }
                }

                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
                result.push(fragment);
                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    if (preserveBlankLines) {
                        if (!stmt.body[i + 1].leadingComments) {
                            result.push(newline);
                        }
                    } else {
                        result.push(newline);
                    }
                }

                if (preserveBlankLines) {
                    // handle spaces after the last line
                    if (i === iz - 1) {
                        if (!stmt.body[i].trailingComments) {
                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                        }
                    }
                }
            }
            return result;
        },

        FunctionDeclaration: function (stmt, flags) {
            return [
                generateAsyncPrefix(stmt, true),
                'function',
                generateStarSuffix(stmt) || noEmptySpace(),
                stmt.id ? generateIdentifier(stmt.id) : '',
                this.generateFunctionBody(stmt)
            ];
        },

        ReturnStatement: function (stmt, flags) {
            if (stmt.argument) {
                return [join(
                    'return',
                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
                ), this.semicolon(flags)];
            }
            return ['return' + this.semicolon(flags)];
        },

        WhileStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = [
                    'while' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },

        WithStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = [
                    'with' + space + '(',
                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        }

    };

    merge(CodeGenerator.prototype, CodeGenerator.Statement);

    // Expressions.

    CodeGenerator.Expression = {

        SequenceExpression: function (expr, precedence, flags) {
            var result, i, iz;
            if (Precedence.Sequence < precedence) {
                flags |= F_ALLOW_IN;
            }
            result = [];
            for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            return parenthesize(result, Precedence.Sequence, precedence);
        },

        AssignmentExpression: function (expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
        },

        ArrowFunctionExpression: function (expr, precedence, flags) {
            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
        },

        ConditionalExpression: function (expr, precedence, flags) {
            if (Precedence.Conditional < precedence) {
                flags |= F_ALLOW_IN;
            }
            return parenthesize(
                [
                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),
                    space + '?' + space,
                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),
                    space + ':' + space,
                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)
                ],
                Precedence.Conditional,
                precedence
            );
        },

        LogicalExpression: function (expr, precedence, flags) {
            return this.BinaryExpression(expr, precedence, flags);
        },

        BinaryExpression: function (expr, precedence, flags) {
            var result, leftPrecedence, rightPrecedence, currentPrecedence, fragment, leftSource;
            currentPrecedence = BinaryPrecedence[expr.operator];
            leftPrecedence = expr.operator === '**' ? Precedence.Postfix : currentPrecedence;
            rightPrecedence = expr.operator === '**' ? currentPrecedence : currentPrecedence + 1;

            if (currentPrecedence < precedence) {
                flags |= F_ALLOW_IN;
            }

            fragment = this.generateExpression(expr.left, leftPrecedence, flags);

            leftSource = fragment.toString();

            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {
                result = [fragment, noEmptySpace(), expr.operator];
            } else {
                result = join(fragment, expr.operator);
            }

            fragment = this.generateExpression(expr.right, rightPrecedence, flags);

            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                result.push(noEmptySpace());
                result.push(fragment);
            } else {
                result = join(result, fragment);
            }

            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
                return ['(', result, ')'];
            }
            return parenthesize(result, currentPrecedence, precedence);
        },

        CallExpression: function (expr, precedence, flags) {
            var result, i, iz;
            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
            result.push('(');
            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            result.push(')');

            if (!(flags & F_ALLOW_CALL)) {
                return ['(', result, ')'];
            }
            return parenthesize(result, Precedence.Call, precedence);
        },

        NewExpression: function (expr, precedence, flags) {
            var result, length, i, iz, itemFlags;
            length = expr['arguments'].length;

            // F_ALLOW_CALL becomes false.
            // F_ALLOW_UNPARATH_NEW may become false.
            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;

            result = join(
                'new',
                this.generateExpression(expr.callee, Precedence.New, itemFlags)
            );

            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
                result.push('(');
                for (i = 0, iz = length; i < iz; ++i) {
                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + space);
                    }
                }
                result.push(')');
            }

            return parenthesize(result, Precedence.New, precedence);
        },

        MemberExpression: function (expr, precedence, flags) {
            var result, fragment;

            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];

            if (expr.computed) {
                result.push('[');
                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
                result.push(']');
            } else {
                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
                    fragment = toSourceNodeWhenNeeded(result).toString();
                    // When the following conditions are all true,
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // we should add a floating point.
                    if (
                            fragment.indexOf('.') < 0 &&
                            !/[eExX]/.test(fragment) &&
                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'
                            ) {
                        result.push(' ');
                    }
                }
                result.push('.');
                result.push(generateIdentifier(expr.property));
            }

            return parenthesize(result, Precedence.Member, precedence);
        },

        MetaProperty: function (expr, precedence, flags) {
            var result;
            result = [];
            result.push(typeof expr.meta === "string" ? expr.meta : generateIdentifier(expr.meta));
            result.push('.');
            result.push(typeof expr.property === "string" ? expr.property : generateIdentifier(expr.property));
            return parenthesize(result, Precedence.Member, precedence);
        },

        UnaryExpression: function (expr, precedence, flags) {
            var result, fragment, rightCharCode, leftSource, leftCharCode;
            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);

            if (space === '') {
                result = join(expr.operator, fragment);
            } else {
                result = [expr.operator];
                if (expr.operator.length > 2) {
                    // delete, void, typeof
                    // get `typeof []`, not `typeof[]`
                    result = join(result, fragment);
                } else {
                    // Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    leftSource = toSourceNodeWhenNeeded(result).toString();
                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                    rightCharCode = fragment.toString().charCodeAt(0);

                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||
                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) {
                        result.push(noEmptySpace());
                        result.push(fragment);
                    } else {
                        result.push(fragment);
                    }
                }
            }
            return parenthesize(result, Precedence.Unary, precedence);
        },

        YieldExpression: function (expr, precedence, flags) {
            var result;
            if (expr.delegate) {
                result = 'yield*';
            } else {
                result = 'yield';
            }
            if (expr.argument) {
                result = join(
                    result,
                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)
                );
            }
            return parenthesize(result, Precedence.Yield, precedence);
        },

        AwaitExpression: function (expr, precedence, flags) {
            var result = join(
                expr.all ? 'await*' : 'await',
                this.generateExpression(expr.argument, Precedence.Await, E_TTT)
            );
            return parenthesize(result, Precedence.Await, precedence);
        },

        UpdateExpression: function (expr, precedence, flags) {
            if (expr.prefix) {
                return parenthesize(
                    [
                        expr.operator,
                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
                    ],
                    Precedence.Unary,
                    precedence
                );
            }
            return parenthesize(
                [
                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
                    expr.operator
                ],
                Precedence.Postfix,
                precedence
            );
        },

        FunctionExpression: function (expr, precedence, flags) {
            var result = [
                generateAsyncPrefix(expr, true),
                'function'
            ];
            if (expr.id) {
                result.push(generateStarSuffix(expr) || noEmptySpace());
                result.push(generateIdentifier(expr.id));
            } else {
                result.push(generateStarSuffix(expr) || space);
            }
            result.push(this.generateFunctionBody(expr));
            return result;
        },

        ArrayPattern: function (expr, precedence, flags) {
            return this.ArrayExpression(expr, precedence, flags, true);
        },

        ArrayExpression: function (expr, precedence, flags, isPattern) {
            var result, multiline, that = this;
            if (!expr.elements.length) {
                return '[]';
            }
            multiline = isPattern ? false : expr.elements.length > 1;
            result = ['[', multiline ? newline : ''];
            withIndent(function (indent) {
                var i, iz;
                for (i = 0, iz = expr.elements.length; i < iz; ++i) {
                    if (!expr.elements[i]) {
                        if (multiline) {
                            result.push(indent);
                        }
                        if (i + 1 === iz) {
                            result.push(',');
                        }
                    } else {
                        result.push(multiline ? indent : '');
                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
                    }
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push(']');
            return result;
        },

        RestElement: function(expr, precedence, flags) {
            return '...' + this.generatePattern(expr.argument);
        },

        ClassExpression: function (expr, precedence, flags) {
            var result, fragment;
            result = ['class'];
            if (expr.id) {
                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
            }
            if (expr.superClass) {
                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Unary, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(expr.body, S_TFFT));
            return result;
        },

        MethodDefinition: function (expr, precedence, flags) {
            var result, fragment;
            if (expr['static']) {
                result = ['static' + space];
            } else {
                result = [];
            }
            if (expr.kind === 'get' || expr.kind === 'set') {
                fragment = [
                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
                    this.generateFunctionBody(expr.value)
                ];
            } else {
                fragment = [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }
            return join(result, fragment);
        },

        Property: function (expr, precedence, flags) {
            if (expr.kind === 'get' || expr.kind === 'set') {
                return [
                    expr.kind, noEmptySpace(),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }

            if (expr.shorthand) {
                if (expr.value.type === "AssignmentPattern") {
                    return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);
                }
                return this.generatePropertyKey(expr.key, expr.computed);
            }

            if (expr.method) {
                return [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }

            return [
                this.generatePropertyKey(expr.key, expr.computed),
                ':' + space,
                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
            ];
        },

        ObjectExpression: function (expr, precedence, flags) {
            var multiline, result, fragment, that = this;

            if (!expr.properties.length) {
                return '{}';
            }
            multiline = expr.properties.length > 1;

            withIndent(function () {
                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
            });

            if (!multiline) {
                // issues 4
                // Do not transform from
                //   dejavu.Class.declare({
                //       method2: function () {}
                //   });
                // to
                //   dejavu.Class.declare({method2: function () {
                //       }});
                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    return [ '{', space, fragment, space, '}' ];
                }
            }

            withIndent(function (indent) {
                var i, iz;
                result = [ '{', newline, indent, fragment ];

                if (multiline) {
                    result.push(',' + newline);
                    for (i = 1, iz = expr.properties.length; i < iz; ++i) {
                        result.push(indent);
                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                        if (i + 1 < iz) {
                            result.push(',' + newline);
                        }
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },

        AssignmentPattern: function(expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);
        },

        ObjectPattern: function (expr, precedence, flags) {
            var result, i, iz, multiline, property, that = this;
            if (!expr.properties.length) {
                return '{}';
            }

            multiline = false;
            if (expr.properties.length === 1) {
                property = expr.properties[0];
                if (property.value.type !== Syntax.Identifier) {
                    multiline = true;
                }
            } else {
                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                    property = expr.properties[i];
                    if (!property.shorthand) {
                        multiline = true;
                        break;
                    }
                }
            }
            result = ['{', multiline ? newline : '' ];

            withIndent(function (indent) {
                var i, iz;
                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                    result.push(multiline ? indent : '');
                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });

            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push('}');
            return result;
        },

        ThisExpression: function (expr, precedence, flags) {
            return 'this';
        },

        Super: function (expr, precedence, flags) {
            return 'super';
        },

        Identifier: function (expr, precedence, flags) {
            return generateIdentifier(expr);
        },

        ImportDefaultSpecifier: function (expr, precedence, flags) {
            return generateIdentifier(expr.id || expr.local);
        },

        ImportNamespaceSpecifier: function (expr, precedence, flags) {
            var result = ['*'];
            var id = expr.id || expr.local;
            if (id) {
                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
            }
            return result;
        },

        ImportSpecifier: function (expr, precedence, flags) {
            var imported = expr.imported;
            var result = [ imported.name ];
            var local = expr.local;
            if (local && local.name !== imported.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));
            }
            return result;
        },

        ExportSpecifier: function (expr, precedence, flags) {
            var local = expr.local;
            var result = [ local.name ];
            var exported = expr.exported;
            if (exported && exported.name !== local.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));
            }
            return result;
        },

        Literal: function (expr, precedence, flags) {
            var raw;
            if (expr.hasOwnProperty('raw') && parse && extra.raw) {
                try {
                    raw = parse(expr.raw).body[0].expression;
                    if (raw.type === Syntax.Literal) {
                        if (raw.value === expr.value) {
                            return expr.raw;
                        }
                    }
                } catch (e) {
                    // not use raw property
                }
            }

            if (expr.regex) {
              return '/' + expr.regex.pattern + '/' + expr.regex.flags;
            }

            if (expr.value === null) {
                return 'null';
            }

            if (typeof expr.value === 'string') {
                return escapeString(expr.value);
            }

            if (typeof expr.value === 'number') {
                return generateNumber(expr.value);
            }

            if (typeof expr.value === 'boolean') {
                return expr.value ? 'true' : 'false';
            }

            return generateRegExp(expr.value);
        },

        GeneratorExpression: function (expr, precedence, flags) {
            return this.ComprehensionExpression(expr, precedence, flags);
        },

        ComprehensionExpression: function (expr, precedence, flags) {
            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6

            var result, i, iz, fragment, that = this;
            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];

            if (extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                result.push(fragment);
            }

            if (expr.blocks) {
                withIndent(function () {
                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                            result = join(result, fragment);
                        } else {
                            result.push(fragment);
                        }
                    }
                });
            }

            if (expr.filter) {
                result = join(result, 'if' + space);
                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
                result = join(result, [ '(', fragment, ')' ]);
            }

            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);

                result = join(result, fragment);
            }

            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');
            return result;
        },

        ComprehensionBlock: function (expr, precedence, flags) {
            var fragment;
            if (expr.left.type === Syntax.VariableDeclaration) {
                fragment = [
                    expr.left.kind, noEmptySpace(),
                    this.generateStatement(expr.left.declarations[0], S_FFFF)
                ];
            } else {
                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
            }

            fragment = join(fragment, expr.of ? 'of' : 'in');
            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));

            return [ 'for' + space + '(', fragment, ')' ];
        },

        SpreadElement: function (expr, precedence, flags) {
            return [
                '...',
                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
            ];
        },

        TaggedTemplateExpression: function (expr, precedence, flags) {
            var itemFlags = E_TTF;
            if (!(flags & F_ALLOW_CALL)) {
                itemFlags = E_TFF;
            }
            var result = [
                this.generateExpression(expr.tag, Precedence.Call, itemFlags),
                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
            ];
            return parenthesize(result, Precedence.TaggedTemplate, precedence);
        },

        TemplateElement: function (expr, precedence, flags) {
            // Don't use "cooked". Since tagged template can use raw template
            // representation. So if we do so, it breaks the script semantics.
            return expr.value.raw;
        },

        TemplateLiteral: function (expr, precedence, flags) {
            var result, i, iz;
            result = [ '`' ];
            for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
                if (i + 1 < iz) {
                    result.push('${' + space);
                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
                    result.push(space + '}');
                }
            }
            result.push('`');
            return result;
        },

        ModuleSpecifier: function (expr, precedence, flags) {
            return this.Literal(expr, precedence, flags);
        },

        ImportExpression: function(expr, precedence, flag) {
            return parenthesize([
                'import(',
                this.generateExpression(expr.source, Precedence.Assignment, E_TTT),
                ')'
            ], Precedence.Call, precedence);
        },

    };

    merge(CodeGenerator.prototype, CodeGenerator.Expression);

    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
        var result, type;

        type = expr.type || Syntax.Property;

        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
            return generateVerbatim(expr, precedence);
        }

        result = this[type](expr, precedence, flags);


        if (extra.comment) {
            result = addComments(expr, result);
        }
        return toSourceNodeWhenNeeded(result, expr);
    };

    CodeGenerator.prototype.generateStatement = function (stmt, flags) {
        var result,
            fragment;

        result = this[stmt.type](stmt, flags);

        // Attach comments

        if (extra.comment) {
            result = addComments(stmt, result);
        }

        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\n') {
            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
        }

        return toSourceNodeWhenNeeded(result, stmt);
    };

    function generateInternal(node) {
        var codegen;

        codegen = new CodeGenerator();
        if (isStatement(node)) {
            return codegen.generateStatement(node, S_TFFF);
        }

        if (isExpression(node)) {
            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
        }

        throw new Error('Unknown node type: ' + node.type);
    }

    function generate(node, options) {
        var defaultOptions = getDefaultOptions(), result, pair;

        if (options != null) {
            // Obsolete options
            //
            //   `options.indent`
            //   `options.base`
            //
            // Instead of them, we can use `option.format.indent`.
            if (typeof options.indent === 'string') {
                defaultOptions.format.indent.style = options.indent;
            }
            if (typeof options.base === 'number') {
                defaultOptions.format.indent.base = options.base;
            }
            options = updateDeeply(defaultOptions, options);
            indent = options.format.indent.style;
            if (typeof options.base === 'string') {
                base = options.base;
            } else {
                base = stringRepeat(indent, options.format.indent.base);
            }
        } else {
            options = defaultOptions;
            indent = options.format.indent.style;
            base = stringRepeat(indent, options.format.indent.base);
        }
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) {
            newline = space = indent = base = '';
        }
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        sourceCode = options.sourceCode;
        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
        extra = options;

        if (sourceMap) {
            if (!exports.browser) {
                // We assume environment is node.js
                // And prevent from including source-map by browserify
                SourceNode = require('source-map').SourceNode;
            } else {
                SourceNode = global.sourceMap.SourceNode;
            }
        }

        result = generateInternal(node);

        if (!sourceMap) {
            pair = {code: result.toString(), map: null};
            return options.sourceMapWithCode ? pair : pair.code;
        }


        pair = result.toStringWithSourceMap({
            file: options.file,
            sourceRoot: options.sourceMapRoot
        });

        if (options.sourceContent) {
            pair.map.setSourceContent(options.sourceMap,
                                      options.sourceContent);
        }

        if (options.sourceMapWithCode) {
            return pair;
        }

        return pair.map.toString();
    }

    FORMAT_MINIFY = {
        indent: {
            style: '',
            base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
    };

    FORMAT_DEFAULTS = getDefaultOptions().format;

    exports.version = require('./package.json').version;
    exports.generate = generate;
    exports.attachComments = estraverse.attachComments;
    exports.Precedence = updateDeeply({}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
}());
/* vim: set sw=4 ts=4 et tw=80 : */

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./package.json":17,"estraverse":19,"esutils":24,"source-map":16}],6:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;

},{"./util":15}],7:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = require('./base64');

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

},{"./base64":8}],8:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

},{}],9:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};

},{}],10:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;

},{"./util":15}],11:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

},{}],12:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

},{"./array-set":6,"./base64-vlq":7,"./binary-search":9,"./quick-sort":11,"./util":15}],13:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = require('./base64-vlq');
var util = require('./util');
var ArraySet = require('./array-set').ArraySet;
var MappingList = require('./mapping-list').MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;

},{"./array-set":6,"./base64-vlq":7,"./mapping-list":10,"./util":15}],14:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;

},{"./source-map-generator":13,"./util":15}],15:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;

},{}],16:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./lib/source-node').SourceNode;

},{"./lib/source-map-consumer":12,"./lib/source-map-generator":13,"./lib/source-node":14}],17:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "escodegen@1.14.1",
      "/mnt/c/Users/dhn03/source/projects/jsflow/jsflow-master"
    ]
  ],
  "_from": "escodegen@1.14.1",
  "_id": "escodegen@1.14.1",
  "_inBundle": false,
  "_integrity": "sha512-Bmt7NcRySdIfNPfU2ZoXDrrXsG9ZjvDxcAlMfDUgRBjLOWTuIACXPBFJH7Z+cLb40JeQco5toikyc9t9P8E9SQ==",
  "_location": "/escodegen",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "escodegen@1.14.1",
    "name": "escodegen",
    "escapedName": "escodegen",
    "rawSpec": "1.14.1",
    "saveSpec": null,
    "fetchSpec": "1.14.1"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.14.1.tgz",
  "_spec": "1.14.1",
  "_where": "/mnt/c/Users/dhn03/source/projects/jsflow/jsflow-master",
  "bin": {
    "esgenerate": "bin/esgenerate.js",
    "escodegen": "bin/escodegen.js"
  },
  "bugs": {
    "url": "https://github.com/estools/escodegen/issues"
  },
  "dependencies": {
    "esprima": "^4.0.1",
    "estraverse": "^4.2.0",
    "esutils": "^2.0.2",
    "optionator": "^0.8.1",
    "source-map": "~0.6.1"
  },
  "description": "ECMAScript code generator",
  "devDependencies": {
    "acorn": "^7.1.0",
    "bluebird": "^3.4.7",
    "bower-registry-client": "^1.0.0",
    "chai": "^3.5.0",
    "commonjs-everywhere": "^0.9.7",
    "gulp": "^3.8.10",
    "gulp-eslint": "^3.0.1",
    "gulp-mocha": "^3.0.1",
    "semver": "^5.1.0"
  },
  "engines": {
    "node": ">=4.0"
  },
  "files": [
    "LICENSE.BSD",
    "README.md",
    "bin",
    "escodegen.js",
    "package.json"
  ],
  "homepage": "http://github.com/estools/escodegen",
  "license": "BSD-2-Clause",
  "main": "escodegen.js",
  "maintainers": [
    {
      "name": "Yusuke Suzuki",
      "email": "utatane.tea@gmail.com",
      "url": "http://github.com/Constellation"
    }
  ],
  "name": "escodegen",
  "optionalDependencies": {
    "source-map": "~0.6.1"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/estools/escodegen.git"
  },
  "scripts": {
    "build": "cjsify -a path: tools/entry-point.js > escodegen.browser.js",
    "build-min": "cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",
    "lint": "gulp lint",
    "release": "node tools/release.js",
    "test": "gulp travis",
    "unit-test": "gulp test"
  },
  "version": "1.14.1"
}

},{}],18:[function(require,module,exports){
/*
  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.

    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PlaceHolders,
        Messages,
        Regex,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        hasLineTerminator,
        lastIndex,
        lastLineNumber,
        lastLineStart,
        startIndex,
        startLineNumber,
        startLineStart,
        scanning,
        length,
        lookahead,
        state,
        extra,
        isBindingElement,
        isAssignmentTarget,
        firstCoverInitializedNameError;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9,
        Template: 10
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';
    TokenName[Token.Template] = 'Template';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    PlaceHolders = {
        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedString: 'Unexpected string',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedTemplate: 'Unexpected quasi %0',
        UnexpectedEOS: 'Unexpected end of input',
        NewlineAfterThrow: 'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp: 'Invalid regular expression: missing /',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally: 'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode',
        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
        DefaultRestParameter: 'Unexpected token =',
        ObjectPatternAsRestParameter: 'Unexpected token {',
        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
        DuplicateConstructor: 'A class may only have one constructor',
        StaticPrototype: 'Classes may not have static property named prototype',
        MissingFromClause: 'Unexpected token',
        NoAsAfterImportNamespace: 'Unexpected token',
        InvalidModuleSpecifier: 'Unexpected token',
        IllegalImportDeclaration: 'Unexpected token',
        IllegalExportDeclaration: 'Unexpected token',
        DuplicateBinding: 'Duplicate binding %0'
    };

    // See also tools/generate-unicode-regex.js.
    Regex = {
        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 0x30 && ch <= 0x39);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }

    function octalToDecimal(ch) {
        // \0 is not octal escape sequence
        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);

        if (index < length && isOctalDigit(source[index])) {
            octal = true;
            code = code * 8 + '01234567'.indexOf(source[index++]);

            // 3 digits are only allowed when string starts
            // with 0, 1, 2, 3
            if ('0123'.indexOf(ch) >= 0 &&
                    index < length &&
                    isOctalDigit(source[index])) {
                code = code * 8 + '01234567'.indexOf(source[index++]);
            }
        }

        return {
            code: code,
            octal: octal
        };
    }

    // ECMA-262 11.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // ECMA-262 11.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // ECMA-262 11.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        return (cp < 0x10000) ? String.fromCharCode(cp) :
            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
    }

    function isIdentifierStart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));
    }

    // ECMA-262 11.6.2.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'enum':
        case 'export':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // ECMA-262 11.6.2.1 Keywords

    function isKeyword(id) {
        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // ECMA-262 11.4 Comments

    function addComment(type, value, start, end, loc) {
        var comment;

        assert(typeof start === 'number', 'Comment must have valid position');

        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
        if (extra.tokenize) {
            comment.type = comment.type + 'Comment';
            if (extra.delegate) {
                comment = extra.delegate(comment);
            }
            extra.tokens.push(comment);
        }
    }

    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;

        start = index - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart - offset
            }
        };

        while (index < length) {
            ch = source.charCodeAt(index);
            ++index;
            if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                if (extra.comments) {
                    comment = source.slice(start + offset, index - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    addComment('Line', comment, start, index - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                return;
            }
        }

        if (extra.comments) {
            comment = source.slice(start + offset, index);
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            addComment('Line', comment, start, index, loc);
        }
    }

    function skipMultiLineComment() {
        var start, loc, ch, comment;

        if (extra.comments) {
            start = index - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index - lineStart - 2
                }
            };
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (isLineTerminator(ch)) {
                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                    ++index;
                }
                hasLineTerminator = true;
                ++lineNumber;
                ++index;
                lineStart = index;
            } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index + 1) === 0x2F) {
                    ++index;
                    ++index;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Block', comment, start, index, loc);
                    }
                    return;
                }
                ++index;
            } else {
                ++index;
            }
        }

        // Ran off the end of the file - the whole thing is a comment
        if (extra.comments) {
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            comment = source.slice(start + 2, index);
            addComment('Block', comment, start, index, loc);
        }
        tolerateUnexpectedToken();
    }

    function skipComment() {
        var ch, start;
        hasLineTerminator = false;

        start = (index === 0);
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                ++index;
                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                start = true;
            } else if (ch === 0x2F) { // U+002F is '/'
                ch = source.charCodeAt(index + 1);
                if (ch === 0x2F) {
                    ++index;
                    ++index;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 0x2A) {  // U+002A is '*'
                    ++index;
                    ++index;
                    skipMultiLineComment();
                } else {
                    break;
                }
            } else if (start && ch === 0x2D) { // U+002D is '-'
                // U+003E is '>'
                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                    // '-->' is a single-line comment
                    index += 3;
                    skipSingleLineComment(3);
                } else {
                    break;
                }
            } else if (ch === 0x3C) { // U+003C is '<'
                if (source.slice(index + 1, index + 4) === '!--') {
                    ++index; // `<`
                    ++index; // `!`
                    ++index; // `-`
                    ++index; // `-`
                    skipSingleLineComment(4);
                } else {
                    break;
                }
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
        var ch, code;

        ch = source[index];
        code = 0;

        // At least, one hex digit is required.
        if (ch === '}') {
            throwUnexpectedToken();
        }

        while (index < length) {
            ch = source[index++];
            if (!isHexDigit(ch)) {
                break;
            }
            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        }

        if (code > 0x10FFFF || ch !== '}') {
            throwUnexpectedToken();
        }

        return fromCodePoint(code);
    }

    function codePointAt(i) {
        var cp, first, second;

        cp = source.charCodeAt(i);
        if (cp >= 0xD800 && cp <= 0xDBFF) {
            second = source.charCodeAt(i + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                first = cp;
                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
        }

        return cp;
    }

    function getComplexIdentifier() {
        var cp, ch, id;

        cp = codePointAt(index);
        id = fromCodePoint(cp);
        index += id.length;

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (cp === 0x5C) {
            if (source.charCodeAt(index) !== 0x75) {
                throwUnexpectedToken();
            }
            ++index;
            if (source[index] === '{') {
                ++index;
                ch = scanUnicodeCodePointEscape();
            } else {
                ch = scanHexEscape('u');
                cp = ch.charCodeAt(0);
                if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
                    throwUnexpectedToken();
                }
            }
            id = ch;
        }

        while (index < length) {
            cp = codePointAt(index);
            if (!isIdentifierPart(cp)) {
                break;
            }
            ch = fromCodePoint(cp);
            id += ch;
            index += ch.length;

            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (cp === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 0x75) {
                    throwUnexpectedToken();
                }
                ++index;
                if (source[index] === '{') {
                    ++index;
                    ch = scanUnicodeCodePointEscape();
                } else {
                    ch = scanHexEscape('u');
                    cp = ch.charCodeAt(0);
                    if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
                        throwUnexpectedToken();
                    }
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index = start;
                return getComplexIdentifier();
            } else if (ch >= 0xD800 && ch < 0xDFFF) {
                // Need to handle surrogate pairs.
                index = start;
                return getComplexIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (U+005C) starts an escaped character.
        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }


    // ECMA-262 11.7 Punctuators

    function scanPunctuator() {
        var token, str;

        token = {
            type: Token.Punctuator,
            value: '',
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: index,
            end: index
        };

        // Check for most common single-character punctuators.
        str = source[index];
        switch (str) {

        case '(':
            if (extra.tokenize) {
                extra.openParenToken = extra.tokenValues.length;
            }
            ++index;
            break;

        case '{':
            if (extra.tokenize) {
                extra.openCurlyToken = extra.tokenValues.length;
            }
            state.curlyStack.push('{');
            ++index;
            break;

        case '.':
            ++index;
            if (source[index] === '.' && source[index + 1] === '.') {
                // Spread operator: ...
                index += 2;
                str = '...';
            }
            break;

        case '}':
            ++index;
            state.curlyStack.pop();
            break;
        case ')':
        case ';':
        case ',':
        case '[':
        case ']':
        case ':':
        case '?':
        case '~':
            ++index;
            break;

        default:
            // 4-character punctuator.
            str = source.substr(index, 4);
            if (str === '>>>=') {
                index += 4;
            } else {

                // 3-character punctuators.
                str = str.substr(0, 3);
                if (str === '===' || str === '!==' || str === '>>>' ||
                    str === '<<=' || str === '>>=') {
                    index += 3;
                } else {

                    // 2-character punctuators.
                    str = str.substr(0, 2);
                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
                        str === '++' || str === '--' || str === '<<' || str === '>>' ||
                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
                        str === '<=' || str === '>=' || str === '=>') {
                        index += 2;
                    } else {

                        // 1-character punctuators.
                        str = source[index];
                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                            ++index;
                        }
                    }
                }
            }
        }

        if (index === token.start) {
            throwUnexpectedToken();
        }

        token.end = index;
        token.value = str;
        return token;
    }

    // ECMA-262 11.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanBinaryLiteral(start) {
        var ch, number;

        number = '';

        while (index < length) {
            ch = source[index];
            if (ch !== '0' && ch !== '1') {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            // only 0b or 0B
            throwUnexpectedToken();
        }

        if (index < length) {
            ch = source.charCodeAt(index);
            /* istanbul ignore else */
            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                throwUnexpectedToken();
            }
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 2),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanOctalLiteral(prefix, start) {
        var number, octal;

        if (isOctalDigit(prefix)) {
            octal = true;
            number = '0' + source[index++];
        } else {
            octal = false;
            ++index;
            number = '';
        }

        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (!octal && number.length === 0) {
            // only 0o or 0O
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function isImplicitOctalLiteral() {
        var i, ch;

        // Implicit octal, unless there is a non-octal digit.
        // (Annex B.1.1 on Numeric Literals)
        for (i = index + 1; i < length; ++i) {
            ch = source[i];
            if (ch === '8' || ch === '9') {
                return false;
            }
            if (!isOctalDigit(ch)) {
                return true;
            }
        }

        return true;
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (ch === 'b' || ch === 'B') {
                    ++index;
                    return scanBinaryLiteral(start);
                }
                if (ch === 'o' || ch === 'O') {
                    return scanOctalLiteral(ch, start);
                }

                if (isOctalDigit(ch)) {
                    if (isImplicitOctalLiteral()) {
                        return scanOctalLiteral(ch, start);
                    }
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwUnexpectedToken();
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, unescaped, octToDec, octal = false;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            str += scanUnicodeCodePointEscape();
                        } else {
                            unescaped = scanHexEscape(ch);
                            if (!unescaped) {
                                throw throwUnexpectedToken();
                            }
                            str += unescaped;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;
                    case '8':
                    case '9':
                        str += ch;
                        tolerateUnexpectedToken();
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            octToDec = octalToDecimal(ch);

                            octal = octToDec.octal || octal;
                            str += String.fromCharCode(octToDec.code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            index = start;
            throwUnexpectedToken();
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            lineNumber: startLineNumber,
            lineStart: startLineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.6 Template Literal Lexical Components

    function scanTemplate() {
        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;

        terminated = false;
        tail = false;
        start = index;
        head = (source[index] === '`');
        rawOffset = 2;

        ++index;

        while (index < length) {
            ch = source[index++];
            if (ch === '`') {
                rawOffset = 1;
                tail = true;
                terminated = true;
                break;
            } else if (ch === '$') {
                if (source[index] === '{') {
                    state.curlyStack.push('${');
                    ++index;
                    terminated = true;
                    break;
                }
                cooked += ch;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        cooked += '\n';
                        break;
                    case 'r':
                        cooked += '\r';
                        break;
                    case 't':
                        cooked += '\t';
                        break;
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            cooked += scanUnicodeCodePointEscape();
                        } else {
                            restore = index;
                            unescaped = scanHexEscape(ch);
                            if (unescaped) {
                                cooked += unescaped;
                            } else {
                                index = restore;
                                cooked += ch;
                            }
                        }
                        break;
                    case 'b':
                        cooked += '\b';
                        break;
                    case 'f':
                        cooked += '\f';
                        break;
                    case 'v':
                        cooked += '\v';
                        break;

                    default:
                        if (ch === '0') {
                            if (isDecimalDigit(source.charCodeAt(index))) {
                                // Illegal: \01 \02 and so on
                                throwError(Messages.TemplateOctalLiteral);
                            }
                            cooked += '\0';
                        } else if (isOctalDigit(ch)) {
                            // Illegal: \1 \2
                            throwError(Messages.TemplateOctalLiteral);
                        } else {
                            cooked += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++lineNumber;
                if (ch === '\r' && source[index] === '\n') {
                    ++index;
                }
                lineStart = index;
                cooked += '\n';
            } else {
                cooked += ch;
            }
        }

        if (!terminated) {
            throwUnexpectedToken();
        }

        if (!head) {
            state.curlyStack.pop();
        }

        return {
            type: Token.Template,
            value: {
                cooked: cooked,
                raw: source.slice(start + 1, index - rawOffset)
            },
            head: head,
            tail: tail,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.5 Regular Expression Literals

    function testRegExp(pattern, flags) {
        // The BMP character to use as a replacement for astral symbols when
        // translating an ES6 "u"-flagged pattern to an ES5-compatible
        // approximation.
        // Note: replacing with '\uFFFF' enables false positives in unlikely
        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
        // pattern that would not be detected by this substitution.
        var astralSubstitute = '\uFFFF',
            tmp = pattern;

        if (flags.indexOf('u') >= 0) {
            tmp = tmp
                // Replace every Unicode escape sequence with the equivalent
                // BMP character or a constant ASCII code point in the case of
                // astral symbols. (See the above note on `astralSubstitute`
                // for more information.)
                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                    var codePoint = parseInt($1 || $2, 16);
                    if (codePoint > 0x10FFFF) {
                        throwUnexpectedToken(null, Messages.InvalidRegExp);
                    }
                    if (codePoint <= 0xFFFF) {
                        return String.fromCharCode(codePoint);
                    }
                    return astralSubstitute;
                })
                // Replace each paired surrogate with a single ASCII symbol to
                // avoid throwing on regular expressions that are only valid in
                // combination with the "u" flag.
                .replace(
                    /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                    astralSubstitute
                );
        }

        // First, detect invalid regular expressions.
        try {
            RegExp(tmp);
        } catch (e) {
            throwUnexpectedToken(null, Messages.InvalidRegExp);
        }

        // Return a regular expression object for this pattern-flag pair, or
        // `null` in case the current environment doesn't support the flags it
        // uses.
        try {
            return new RegExp(pattern, flags);
        } catch (exception) {
            /* istanbul ignore next */
            return null;
        }
    }

    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;

        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        classMarker = false;
        terminated = false;
        while (index < length) {
            ch = source[index++];
            str += ch;
            if (ch === '\\') {
                ch = source[index++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) {
                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                }
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
            } else if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                }
            }
        }

        if (!terminated) {
            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }

    function scanRegExpFlags() {
        var ch, str, flags, restore;

        str = '';
        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    tolerateUnexpectedToken();
                } else {
                    str += '\\';
                    tolerateUnexpectedToken();
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        return {
            value: flags,
            literal: str
        };
    }

    function scanRegExp() {
        var start, body, flags, value;
        scanning = true;

        lookahead = null;
        skipComment();
        start = index;

        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);
        scanning = false;
        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                regex: {
                    pattern: body.value,
                    flags: flags.value
                },
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        return {
            literal: body.literal + flags.literal,
            value: value,
            regex: {
                pattern: body.value,
                flags: flags.value
            },
            start: start,
            end: index
        };
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = scanRegExp();

        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        /* istanbul ignore next */
        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                regex: regex.regex,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    // Using the following algorithm:
    // https://github.com/mozilla/sweet.js/wiki/design

    function advanceSlash() {
        var regex, previous, check;

        function testKeyword(value) {
            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');
        }

        previous = extra.tokenValues[extra.tokenValues.length - 1];
        regex = (previous !== null);

        switch (previous) {
        case 'this':
        case ']':
            regex = false;
            break;

        case ')':
            check = extra.tokenValues[extra.openParenToken - 1];
            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
            break;

        case '}':
            // Dividing a function by anything makes little sense,
            // but we have to check for that.
            regex = false;
            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
                // Anonymous function, e.g. function(){} /42
                check = extra.tokenValues[extra.openCurlyToken - 4];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;
            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
                // Named function, e.g. function f(){} /42/
                check = extra.tokenValues[extra.openCurlyToken - 5];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;
            }
        }

        return regex ? collectRegex() : scanPunctuator();
    }

    function advance() {
        var cp, token;

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: index,
                end: index
            };
        }

        cp = source.charCodeAt(index);

        if (isIdentifierStart(cp)) {
            token = scanIdentifier();
            if (strict && isStrictModeReservedWord(token.value)) {
                token.type = Token.Keyword;
            }
            return token;
        }

        // Very common: ( and ) and ;
        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
            return scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (cp === 0x27 || cp === 0x22) {
            return scanStringLiteral();
        }

        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (cp === 0x2E) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(cp)) {
            return scanNumericLiteral();
        }

        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && cp === 0x2F) {
            return advanceSlash();
        }

        // Template literals start with ` (U+0060) for template head
        // or } (U+007D) for template middle or template tail.
        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {
            return scanTemplate();
        }

        // Possible identifier start in a surrogate pair.
        if (cp >= 0xD800 && cp < 0xDFFF) {
            cp = codePointAt(index);
            if (isIdentifierStart(cp)) {
                return scanIdentifier();
            }
        }

        return scanPunctuator();
    }

    function collectToken() {
        var loc, token, value, entry;

        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            entry = {
                type: TokenName[token.type],
                value: value,
                range: [token.start, token.end],
                loc: loc
            };
            if (token.regex) {
                entry.regex = {
                    pattern: token.regex.pattern,
                    flags: token.regex.flags
                };
            }
            if (extra.tokenValues) {
                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);
            }
            if (extra.tokenize) {
                if (!extra.range) {
                    delete entry.range;
                }
                if (!extra.loc) {
                    delete entry.loc;
                }
                if (extra.delegate) {
                    entry = extra.delegate(entry);
                }
            }
            extra.tokens.push(entry);
        }

        return token;
    }

    function lex() {
        var token;
        scanning = true;

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        skipComment();

        token = lookahead;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
        return token;
    }

    function peek() {
        scanning = true;

        skipComment();

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
    }

    function Position() {
        this.line = startLineNumber;
        this.column = startIndex - startLineStart;
    }

    function SourceLocation() {
        this.start = new Position();
        this.end = null;
    }

    function WrappingSourceLocation(startToken) {
        this.start = {
            line: startToken.lineNumber,
            column: startToken.start - startToken.lineStart
        };
        this.end = null;
    }

    function Node() {
        if (extra.range) {
            this.range = [startIndex, 0];
        }
        if (extra.loc) {
            this.loc = new SourceLocation();
        }
    }

    function WrappingNode(startToken) {
        if (extra.range) {
            this.range = [startToken.start, 0];
        }
        if (extra.loc) {
            this.loc = new WrappingSourceLocation(startToken);
        }
    }

    WrappingNode.prototype = Node.prototype = {

        processComment: function () {
            var lastChild,
                innerComments,
                leadingComments,
                trailingComments,
                bottomRight = extra.bottomRightStack,
                i,
                comment,
                last = bottomRight[bottomRight.length - 1];

            if (this.type === Syntax.Program) {
                if (this.body.length > 0) {
                    return;
                }
            }
            /**
             * patch innnerComments for properties empty block
             * `function a() {/** comments **\/}`
             */

            if (this.type === Syntax.BlockStatement && this.body.length === 0) {
                innerComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (this.range[1] >= comment.range[1]) {
                        innerComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                if (innerComments.length) {
                    this.innerComments = innerComments;
                    //bottomRight.push(this);
                    return;
                }
            }

            if (extra.trailingComments.length > 0) {
                trailingComments = [];
                for (i = extra.trailingComments.length - 1; i >= 0; --i) {
                    comment = extra.trailingComments[i];
                    if (comment.range[0] >= this.range[1]) {
                        trailingComments.unshift(comment);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                extra.trailingComments = [];
            } else {
                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
                    trailingComments = last.trailingComments;
                    delete last.trailingComments;
                }
            }

            // Eating the stack.
            while (last && last.range[0] >= this.range[0]) {
                lastChild = bottomRight.pop();
                last = bottomRight[bottomRight.length - 1];
            }

            if (lastChild) {
                if (lastChild.leadingComments) {
                    leadingComments = [];
                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
                        comment = lastChild.leadingComments[i];
                        if (comment.range[1] <= this.range[0]) {
                            leadingComments.unshift(comment);
                            lastChild.leadingComments.splice(i, 1);
                        }
                    }

                    if (!lastChild.leadingComments.length) {
                        lastChild.leadingComments = undefined;
                    }
                }
            } else if (extra.leadingComments.length > 0) {
                leadingComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (comment.range[1] <= this.range[0]) {
                        leadingComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                    }
                }
            }


            if (leadingComments && leadingComments.length > 0) {
                this.leadingComments = leadingComments;
            }
            if (trailingComments && trailingComments.length > 0) {
                this.trailingComments = trailingComments;
            }

            bottomRight.push(this);
        },

        finish: function () {
            if (extra.range) {
                this.range[1] = lastIndex;
            }
            if (extra.loc) {
                this.loc.end = {
                    line: lastLineNumber,
                    column: lastIndex - lastLineStart
                };
                if (extra.source) {
                    this.loc.source = extra.source;
                }
            }

            if (extra.attachComment) {
                this.processComment();
            }
        },

        finishArrayExpression: function (elements) {
            this.type = Syntax.ArrayExpression;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrayPattern: function (elements) {
            this.type = Syntax.ArrayPattern;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrowFunctionExpression: function (params, defaults, body, expression) {
            this.type = Syntax.ArrowFunctionExpression;
            this.id = null;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = false;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishAssignmentExpression: function (operator, left, right) {
            this.type = Syntax.AssignmentExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishAssignmentPattern: function (left, right) {
            this.type = Syntax.AssignmentPattern;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBinaryExpression: function (operator, left, right) {
            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBlockStatement: function (body) {
            this.type = Syntax.BlockStatement;
            this.body = body;
            this.finish();
            return this;
        },

        finishBreakStatement: function (label) {
            this.type = Syntax.BreakStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishCallExpression: function (callee, args) {
            this.type = Syntax.CallExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishCatchClause: function (param, body) {
            this.type = Syntax.CatchClause;
            this.param = param;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassBody: function (body) {
            this.type = Syntax.ClassBody;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassDeclaration: function (id, superClass, body) {
            this.type = Syntax.ClassDeclaration;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassExpression: function (id, superClass, body) {
            this.type = Syntax.ClassExpression;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishConditionalExpression: function (test, consequent, alternate) {
            this.type = Syntax.ConditionalExpression;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishContinueStatement: function (label) {
            this.type = Syntax.ContinueStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishDebuggerStatement: function () {
            this.type = Syntax.DebuggerStatement;
            this.finish();
            return this;
        },

        finishDoWhileStatement: function (body, test) {
            this.type = Syntax.DoWhileStatement;
            this.body = body;
            this.test = test;
            this.finish();
            return this;
        },

        finishEmptyStatement: function () {
            this.type = Syntax.EmptyStatement;
            this.finish();
            return this;
        },

        finishExpressionStatement: function (expression) {
            this.type = Syntax.ExpressionStatement;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishForStatement: function (init, test, update, body) {
            this.type = Syntax.ForStatement;
            this.init = init;
            this.test = test;
            this.update = update;
            this.body = body;
            this.finish();
            return this;
        },

        finishForOfStatement: function (left, right, body) {
            this.type = Syntax.ForOfStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.finish();
            return this;
        },

        finishForInStatement: function (left, right, body) {
            this.type = Syntax.ForInStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.each = false;
            this.finish();
            return this;
        },

        finishFunctionDeclaration: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionDeclaration;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishFunctionExpression: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionExpression;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishIdentifier: function (name) {
            this.type = Syntax.Identifier;
            this.name = name;
            this.finish();
            return this;
        },

        finishIfStatement: function (test, consequent, alternate) {
            this.type = Syntax.IfStatement;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishLabeledStatement: function (label, body) {
            this.type = Syntax.LabeledStatement;
            this.label = label;
            this.body = body;
            this.finish();
            return this;
        },

        finishLiteral: function (token) {
            this.type = Syntax.Literal;
            this.value = token.value;
            this.raw = source.slice(token.start, token.end);
            if (token.regex) {
                this.regex = token.regex;
            }
            this.finish();
            return this;
        },

        finishMemberExpression: function (accessor, object, property) {
            this.type = Syntax.MemberExpression;
            this.computed = accessor === '[';
            this.object = object;
            this.property = property;
            this.finish();
            return this;
        },

        finishMetaProperty: function (meta, property) {
            this.type = Syntax.MetaProperty;
            this.meta = meta;
            this.property = property;
            this.finish();
            return this;
        },

        finishNewExpression: function (callee, args) {
            this.type = Syntax.NewExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishObjectExpression: function (properties) {
            this.type = Syntax.ObjectExpression;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishObjectPattern: function (properties) {
            this.type = Syntax.ObjectPattern;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishPostfixExpression: function (operator, argument) {
            this.type = Syntax.UpdateExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = false;
            this.finish();
            return this;
        },

        finishProgram: function (body, sourceType) {
            this.type = Syntax.Program;
            this.body = body;
            this.sourceType = sourceType;
            this.finish();
            return this;
        },

        finishProperty: function (kind, key, computed, value, method, shorthand) {
            this.type = Syntax.Property;
            this.key = key;
            this.computed = computed;
            this.value = value;
            this.kind = kind;
            this.method = method;
            this.shorthand = shorthand;
            this.finish();
            return this;
        },

        finishRestElement: function (argument) {
            this.type = Syntax.RestElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishReturnStatement: function (argument) {
            this.type = Syntax.ReturnStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSequenceExpression: function (expressions) {
            this.type = Syntax.SequenceExpression;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishSpreadElement: function (argument) {
            this.type = Syntax.SpreadElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSwitchCase: function (test, consequent) {
            this.type = Syntax.SwitchCase;
            this.test = test;
            this.consequent = consequent;
            this.finish();
            return this;
        },

        finishSuper: function () {
            this.type = Syntax.Super;
            this.finish();
            return this;
        },

        finishSwitchStatement: function (discriminant, cases) {
            this.type = Syntax.SwitchStatement;
            this.discriminant = discriminant;
            this.cases = cases;
            this.finish();
            return this;
        },

        finishTaggedTemplateExpression: function (tag, quasi) {
            this.type = Syntax.TaggedTemplateExpression;
            this.tag = tag;
            this.quasi = quasi;
            this.finish();
            return this;
        },

        finishTemplateElement: function (value, tail) {
            this.type = Syntax.TemplateElement;
            this.value = value;
            this.tail = tail;
            this.finish();
            return this;
        },

        finishTemplateLiteral: function (quasis, expressions) {
            this.type = Syntax.TemplateLiteral;
            this.quasis = quasis;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishThisExpression: function () {
            this.type = Syntax.ThisExpression;
            this.finish();
            return this;
        },

        finishThrowStatement: function (argument) {
            this.type = Syntax.ThrowStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishTryStatement: function (block, handler, finalizer) {
            this.type = Syntax.TryStatement;
            this.block = block;
            this.guardedHandlers = [];
            this.handlers = handler ? [handler] : [];
            this.handler = handler;
            this.finalizer = finalizer;
            this.finish();
            return this;
        },

        finishUnaryExpression: function (operator, argument) {
            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = true;
            this.finish();
            return this;
        },

        finishVariableDeclaration: function (declarations) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = 'var';
            this.finish();
            return this;
        },

        finishLexicalDeclaration: function (declarations, kind) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = kind;
            this.finish();
            return this;
        },

        finishVariableDeclarator: function (id, init) {
            this.type = Syntax.VariableDeclarator;
            this.id = id;
            this.init = init;
            this.finish();
            return this;
        },

        finishWhileStatement: function (test, body) {
            this.type = Syntax.WhileStatement;
            this.test = test;
            this.body = body;
            this.finish();
            return this;
        },

        finishWithStatement: function (object, body) {
            this.type = Syntax.WithStatement;
            this.object = object;
            this.body = body;
            this.finish();
            return this;
        },

        finishExportSpecifier: function (local, exported) {
            this.type = Syntax.ExportSpecifier;
            this.exported = exported || local;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportDefaultSpecifier: function (local) {
            this.type = Syntax.ImportDefaultSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportNamespaceSpecifier: function (local) {
            this.type = Syntax.ImportNamespaceSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishExportNamedDeclaration: function (declaration, specifiers, src) {
            this.type = Syntax.ExportNamedDeclaration;
            this.declaration = declaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishExportDefaultDeclaration: function (declaration) {
            this.type = Syntax.ExportDefaultDeclaration;
            this.declaration = declaration;
            this.finish();
            return this;
        },

        finishExportAllDeclaration: function (src) {
            this.type = Syntax.ExportAllDeclaration;
            this.source = src;
            this.finish();
            return this;
        },

        finishImportSpecifier: function (local, imported) {
            this.type = Syntax.ImportSpecifier;
            this.local = local || imported;
            this.imported = imported;
            this.finish();
            return this;
        },

        finishImportDeclaration: function (specifiers, src) {
            this.type = Syntax.ImportDeclaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishYieldExpression: function (argument, delegate) {
            this.type = Syntax.YieldExpression;
            this.argument = argument;
            this.delegate = delegate;
            this.finish();
            return this;
        }
    };


    function recordError(error) {
        var e, existing;

        for (e = 0; e < extra.errors.length; e++) {
            existing = extra.errors[e];
            // Prevent duplicated error.
            /* istanbul ignore next */
            if (existing.index === error.index && existing.message === error.message) {
                return;
            }
        }

        extra.errors.push(error);
    }

    function constructError(msg, column) {
        var error = new Error(msg);
        try {
            throw error;
        } catch (base) {
            /* istanbul ignore else */
            if (Object.create && Object.defineProperty) {
                error = Object.create(base);
                Object.defineProperty(error, 'column', { value: column });
            }
        } finally {
            return error;
        }
    }

    function createError(line, pos, description) {
        var msg, column, error;

        msg = 'Line ' + line + ': ' + description;
        column = pos - (scanning ? lineStart : lastLineStart) + 1;
        error = constructError(msg, column);
        error.lineNumber = line;
        error.description = description;
        error.index = pos;
        return error;
    }

    // Throw an exception

    function throwError(messageFormat) {
        var args, msg;

        args = Array.prototype.slice.call(arguments, 1);
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        throw createError(lastLineNumber, lastIndex, msg);
    }

    function tolerateError(messageFormat) {
        var args, msg, error;

        args = Array.prototype.slice.call(arguments, 1);
        /* istanbul ignore next */
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        error = createError(lineNumber, lastIndex, msg);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Throw an exception because of the token.

    function unexpectedTokenError(token, message) {
        var value, msg = message || Messages.UnexpectedToken;

        if (token) {
            if (!message) {
                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :
                    Messages.UnexpectedToken;

                if (token.type === Token.Keyword) {
                    if (isFutureReservedWord(token.value)) {
                        msg = Messages.UnexpectedReserved;
                    } else if (strict && isStrictModeReservedWord(token.value)) {
                        msg = Messages.StrictReservedWord;
                    }
                }
            }

            value = (token.type === Token.Template) ? token.value.raw : token.value;
        } else {
            value = 'ILLEGAL';
        }

        msg = msg.replace('%0', value);

        return (token && typeof token.lineNumber === 'number') ?
            createError(token.lineNumber, token.start, msg) :
            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
    }

    function throwUnexpectedToken(token, message) {
        throw unexpectedTokenError(token, message);
    }

    function tolerateUnexpectedToken(token, message) {
        var error = unexpectedTokenError(token, message);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpectedToken(token);
        }
    }

    /**
     * @name expectCommaSeparator
     * @description Quietly expect a comma when in tolerant mode, otherwise delegates
     * to <code>expect(value)</code>
     * @since 2.0
     */
    function expectCommaSeparator() {
        var token;

        if (extra.errors) {
            token = lookahead;
            if (token.type === Token.Punctuator && token.value === ',') {
                lex();
            } else if (token.type === Token.Punctuator && token.value === ';') {
                lex();
                tolerateUnexpectedToken(token);
            } else {
                tolerateUnexpectedToken(token, Messages.UnexpectedToken);
            }
        } else {
            expect(',');
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpectedToken(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token matches the specified contextual keyword
    // (where an identifier is sometimes a keyword depending on the context)

    function matchContextualKeyword(keyword) {
        return lookahead.type === Token.Identifier && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
            lex();
            return;
        }

        if (hasLineTerminator) {
            return;
        }

        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
        lastIndex = startIndex;
        lastLineNumber = startLineNumber;
        lastLineStart = startLineStart;

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpectedToken(lookahead);
        }
    }

    // Cover grammar support.
    //
    // When an assignment expression position starts with an left parenthesis, the determination of the type
    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
    //
    // There are three productions that can be parsed in a parentheses pair that needs to be determined
    // after the outermost pair is closed. They are:
    //
    //   1. AssignmentExpression
    //   2. BindingElements
    //   3. AssignmentTargets
    //
    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
    // binding element or assignment target.
    //
    // The three productions have the relationship:
    //
    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
    //
    // with a single exception that CoverInitializedName when used directly in an Expression, generates
    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
    //
    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
    // the CoverInitializedName check is conducted.
    //
    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
    // pattern. The CoverInitializedName check is deferred.
    function isolateCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        if (firstCoverInitializedNameError !== null) {
            throwUnexpectedToken(firstCoverInitializedNameError);
        }
        isBindingElement = oldIsBindingElement;
        isAssignmentTarget = oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
        return result;
    }

    function inheritCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        isBindingElement = isBindingElement && oldIsBindingElement;
        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
        return result;
    }

    // ECMA-262 13.3.3 Destructuring Binding Patterns

    function parseArrayPattern(params, kind) {
        var node = new Node(), elements = [], rest, restNode;
        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                if (match('...')) {
                    restNode = new Node();
                    lex();
                    params.push(lookahead);
                    rest = parseVariableIdentifier(kind);
                    elements.push(restNode.finishRestElement(rest));
                    break;
                } else {
                    elements.push(parsePatternWithDefault(params, kind));
                }
                if (!match(']')) {
                    expect(',');
                }
            }

        }

        expect(']');

        return node.finishArrayPattern(elements);
    }

    function parsePropertyPattern(params, kind) {
        var node = new Node(), key, keyToken, computed = match('['), init;
        if (lookahead.type === Token.Identifier) {
            keyToken = lookahead;
            key = parseVariableIdentifier();
            if (match('=')) {
                params.push(keyToken);
                lex();
                init = parseAssignmentExpression();

                return node.finishProperty(
                    'init', key, false,
                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);
            } else if (!match(':')) {
                params.push(keyToken);
                return node.finishProperty('init', key, false, key, false, true);
            }
        } else {
            key = parseObjectPropertyKey();
        }
        expect(':');
        init = parsePatternWithDefault(params, kind);
        return node.finishProperty('init', key, computed, init, false, false);
    }

    function parseObjectPattern(params, kind) {
        var node = new Node(), properties = [];

        expect('{');

        while (!match('}')) {
            properties.push(parsePropertyPattern(params, kind));
            if (!match('}')) {
                expect(',');
            }
        }

        lex();

        return node.finishObjectPattern(properties);
    }

    function parsePattern(params, kind) {
        if (match('[')) {
            return parseArrayPattern(params, kind);
        } else if (match('{')) {
            return parseObjectPattern(params, kind);
        } else if (matchKeyword('let')) {
            if (kind === 'const' || kind === 'let') {
                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
            }
        }

        params.push(lookahead);
        return parseVariableIdentifier(kind);
    }

    function parsePatternWithDefault(params, kind) {
        var startToken = lookahead, pattern, previousAllowYield, right;
        pattern = parsePattern(params, kind);
        if (match('=')) {
            lex();
            previousAllowYield = state.allowYield;
            state.allowYield = true;
            right = isolateCoverGrammar(parseAssignmentExpression);
            state.allowYield = previousAllowYield;
            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
        }
        return pattern;
    }

    // ECMA-262 12.2.5 Array Initializer

    function parseArrayInitializer() {
        var elements = [], node = new Node(), restSpread;

        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else if (match('...')) {
                restSpread = new Node();
                lex();
                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    isAssignmentTarget = isBindingElement = false;
                    expect(',');
                }
                elements.push(restSpread);
            } else {
                elements.push(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        lex();

        return node.finishArrayExpression(elements);
    }

    // ECMA-262 12.2.6 Object Initializer

    function parsePropertyFunction(node, paramInfo, isGenerator) {
        var previousStrict, body;

        isAssignmentTarget = isBindingElement = false;

        previousStrict = strict;
        body = isolateCoverGrammar(parseFunctionSourceElements);

        if (strict && paramInfo.firstRestricted) {
            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
        }
        if (strict && paramInfo.stricted) {
            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
        }

        strict = previousStrict;
        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
    }

    function parsePropertyMethodFunction() {
        var params, method, node = new Node(),
            previousAllowYield = state.allowYield;

        state.allowYield = false;
        params = parseParams();
        state.allowYield = previousAllowYield;

        state.allowYield = false;
        method = parsePropertyFunction(node, params, false);
        state.allowYield = previousAllowYield;

        return method;
    }

    function parseObjectPropertyKey() {
        var token, node = new Node(), expr;

        token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        switch (token.type) {
        case Token.StringLiteral:
        case Token.NumericLiteral:
            if (strict && token.octal) {
                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
            }
            return node.finishLiteral(token);
        case Token.Identifier:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.Keyword:
            return node.finishIdentifier(token.value);
        case Token.Punctuator:
            if (token.value === '[') {
                expr = isolateCoverGrammar(parseAssignmentExpression);
                expect(']');
                return expr;
            }
            break;
        }
        throwUnexpectedToken(token);
    }

    function lookaheadPropertyName() {
        switch (lookahead.type) {
        case Token.Identifier:
        case Token.StringLiteral:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.NumericLiteral:
        case Token.Keyword:
            return true;
        case Token.Punctuator:
            return lookahead.value === '[';
        }
        return false;
    }

    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,
    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.
    // This can only be determined after we consumed up to the left parentheses.
    //
    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller
    // is responsible to visit other options.
    function tryParseMethodDefinition(token, key, computed, node) {
        var value, options, methodNode, params,
            previousAllowYield = state.allowYield;

        if (token.type === Token.Identifier) {
            // check for `get` and `set`;

            if (token.value === 'get' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, {
                    params: [],
                    defaults: [],
                    stricted: null,
                    firstRestricted: null,
                    message: null
                }, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('get', key, computed, value, false, false);
            } else if (token.value === 'set' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');

                options = {
                    params: [],
                    defaultCount: 0,
                    defaults: [],
                    firstRestricted: null,
                    paramSet: {}
                };
                if (match(')')) {
                    tolerateUnexpectedToken(lookahead);
                } else {
                    state.allowYield = false;
                    parseParam(options);
                    state.allowYield = previousAllowYield;
                    if (options.defaultCount === 0) {
                        options.defaults = [];
                    }
                }
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, options, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('set', key, computed, value, false, false);
            }
        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
            computed = match('[');
            key = parseObjectPropertyKey();
            methodNode = new Node();

            state.allowYield = true;
            params = parseParams();
            state.allowYield = previousAllowYield;

            state.allowYield = false;
            value = parsePropertyFunction(methodNode, params, true);
            state.allowYield = previousAllowYield;

            return node.finishProperty('init', key, computed, value, true, false);
        }

        if (key && match('(')) {
            value = parsePropertyMethodFunction();
            return node.finishProperty('init', key, computed, value, true, false);
        }

        // Not a MethodDefinition.
        return null;
    }

    function parseObjectProperty(hasProto) {
        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;

        computed = match('[');
        if (match('*')) {
            lex();
        } else {
            key = parseObjectPropertyKey();
        }
        maybeMethod = tryParseMethodDefinition(token, key, computed, node);
        if (maybeMethod) {
            return maybeMethod;
        }

        if (!key) {
            throwUnexpectedToken(lookahead);
        }

        // Check for duplicated __proto__
        if (!computed) {
            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||
                (key.type === Syntax.Literal && key.value === '__proto__');
            if (hasProto.value && proto) {
                tolerateError(Messages.DuplicateProtoProperty);
            }
            hasProto.value |= proto;
        }

        if (match(':')) {
            lex();
            value = inheritCoverGrammar(parseAssignmentExpression);
            return node.finishProperty('init', key, computed, value, false, false);
        }

        if (token.type === Token.Identifier) {
            if (match('=')) {
                firstCoverInitializedNameError = lookahead;
                lex();
                value = isolateCoverGrammar(parseAssignmentExpression);
                return node.finishProperty('init', key, computed,
                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
            }
            return node.finishProperty('init', key, computed, key, false, true);
        }

        throwUnexpectedToken(lookahead);
    }

    function parseObjectInitializer() {
        var properties = [], hasProto = {value: false}, node = new Node();

        expect('{');

        while (!match('}')) {
            properties.push(parseObjectProperty(hasProto));

            if (!match('}')) {
                expectCommaSeparator();
            }
        }

        expect('}');

        return node.finishObjectExpression(properties);
    }

    function reinterpretExpressionAsPattern(expr) {
        var i;
        switch (expr.type) {
        case Syntax.Identifier:
        case Syntax.MemberExpression:
        case Syntax.RestElement:
        case Syntax.AssignmentPattern:
            break;
        case Syntax.SpreadElement:
            expr.type = Syntax.RestElement;
            reinterpretExpressionAsPattern(expr.argument);
            break;
        case Syntax.ArrayExpression:
            expr.type = Syntax.ArrayPattern;
            for (i = 0; i < expr.elements.length; i++) {
                if (expr.elements[i] !== null) {
                    reinterpretExpressionAsPattern(expr.elements[i]);
                }
            }
            break;
        case Syntax.ObjectExpression:
            expr.type = Syntax.ObjectPattern;
            for (i = 0; i < expr.properties.length; i++) {
                reinterpretExpressionAsPattern(expr.properties[i].value);
            }
            break;
        case Syntax.AssignmentExpression:
            expr.type = Syntax.AssignmentPattern;
            reinterpretExpressionAsPattern(expr.left);
            break;
        default:
            // Allow other node type for tolerant parsing.
            break;
        }
    }

    // ECMA-262 12.2.9 Template Literals

    function parseTemplateElement(option) {
        var node, token;

        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {
            throwUnexpectedToken();
        }

        node = new Node();
        token = lex();

        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);
    }

    function parseTemplateLiteral() {
        var quasi, quasis, expressions, node = new Node();

        quasi = parseTemplateElement({ head: true });
        quasis = [quasi];
        expressions = [];

        while (!quasi.tail) {
            expressions.push(parseExpression());
            quasi = parseTemplateElement({ head: false });
            quasis.push(quasi);
        }

        return node.finishTemplateLiteral(quasis, expressions);
    }

    // ECMA-262 12.2.10 The Grouping Operator

    function parseGroupExpression() {
        var expr, expressions, startToken, i, params = [];

        expect('(');

        if (match(')')) {
            lex();
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [],
                rawParams: []
            };
        }

        startToken = lookahead;
        if (match('...')) {
            expr = parseRestElement(params);
            expect(')');
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [expr]
            };
        }

        isBindingElement = true;
        expr = inheritCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            isAssignmentTarget = false;
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();

                if (match('...')) {
                    if (!isBindingElement) {
                        throwUnexpectedToken(lookahead);
                    }
                    expressions.push(parseRestElement(params));
                    expect(')');
                    if (!match('=>')) {
                        expect('=>');
                    }
                    isBindingElement = false;
                    for (i = 0; i < expressions.length; i++) {
                        reinterpretExpressionAsPattern(expressions[i]);
                    }
                    return {
                        type: PlaceHolders.ArrowParameterPlaceHolder,
                        params: expressions
                    };
                }

                expressions.push(inheritCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }


        expect(')');

        if (match('=>')) {
            if (expr.type === Syntax.Identifier && expr.name === 'yield') {
                return {
                    type: PlaceHolders.ArrowParameterPlaceHolder,
                    params: [expr]
                };
            }

            if (!isBindingElement) {
                throwUnexpectedToken(lookahead);
            }

            if (expr.type === Syntax.SequenceExpression) {
                for (i = 0; i < expr.expressions.length; i++) {
                    reinterpretExpressionAsPattern(expr.expressions[i]);
                }
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            expr = {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
            };
        }
        isBindingElement = false;
        return expr;
    }


    // ECMA-262 12.2 Primary Expressions

    function parsePrimaryExpression() {
        var type, token, expr, node;

        if (match('(')) {
            isBindingElement = false;
            return inheritCoverGrammar(parseGroupExpression);
        }

        if (match('[')) {
            return inheritCoverGrammar(parseArrayInitializer);
        }

        if (match('{')) {
            return inheritCoverGrammar(parseObjectInitializer);
        }

        type = lookahead.type;
        node = new Node();

        if (type === Token.Identifier) {
            if (state.sourceType === 'module' && lookahead.value === 'await') {
                tolerateUnexpectedToken(lookahead);
            }
            expr = node.finishIdentifier(lex().value);
        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            isAssignmentTarget = isBindingElement = false;
            if (strict && lookahead.octal) {
                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
            }
            expr = node.finishLiteral(lex());
        } else if (type === Token.Keyword) {
            if (!strict && state.allowYield && matchKeyword('yield')) {
                return parseNonComputedProperty();
            }
            if (!strict && matchKeyword('let')) {
                return node.finishIdentifier(lex().value);
            }
            isAssignmentTarget = isBindingElement = false;
            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
            if (matchKeyword('this')) {
                lex();
                return node.finishThisExpression();
            }
            if (matchKeyword('class')) {
                return parseClassExpression();
            }
            throwUnexpectedToken(lex());
        } else if (type === Token.BooleanLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = (token.value === 'true');
            expr = node.finishLiteral(token);
        } else if (type === Token.NullLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = null;
            expr = node.finishLiteral(token);
        } else if (match('/') || match('/=')) {
            isAssignmentTarget = isBindingElement = false;
            index = startIndex;

            if (typeof extra.tokens !== 'undefined') {
                token = collectRegex();
            } else {
                token = scanRegExp();
            }
            lex();
            expr = node.finishLiteral(token);
        } else if (type === Token.Template) {
            expr = parseTemplateLiteral();
        } else {
            throwUnexpectedToken(lex());
        }

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [], expr;

        expect('(');

        if (!match(')')) {
            while (startIndex < length) {
                if (match('...')) {
                    expr = new Node();
                    lex();
                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
                } else {
                    expr = isolateCoverGrammar(parseAssignmentExpression);
                }
                args.push(expr);
                if (match(')')) {
                    break;
                }
                expectCommaSeparator();
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token, node = new Node();

        token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = isolateCoverGrammar(parseExpression);

        expect(']');

        return expr;
    }

    // ECMA-262 12.3.3 The new Operator

    function parseNewExpression() {
        var callee, args, node = new Node();

        expectKeyword('new');

        if (match('.')) {
            lex();
            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
                if (state.inFunctionBody) {
                    lex();
                    return node.finishMetaProperty('new', 'target');
                }
            }
            throwUnexpectedToken(lookahead);
        }

        callee = isolateCoverGrammar(parseLeftHandSideExpression);
        args = match('(') ? parseArguments() : [];

        isAssignmentTarget = isBindingElement = false;

        return node.finishNewExpression(callee, args);
    }

    // ECMA-262 12.3.4 Function Calls

    function parseLeftHandSideExpressionAllowCall() {
        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;

        startToken = lookahead;
        state.allowIn = true;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('(') && !match('.') && !match('[')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (match('(')) {
                isBindingElement = false;
                isAssignmentTarget = false;
                args = parseArguments();
                expr = new WrappingNode(startToken).finishCallExpression(expr, args);
            } else if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        state.allowIn = previousAllowIn;

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseLeftHandSideExpression() {
        var quasi, expr, property, startToken;
        assert(state.allowIn, 'callee of new expression always allow in keyword.');

        startToken = lookahead;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('[') && !match('.')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        return expr;
    }

    // ECMA-262 12.4 Postfix Expressions

    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;

        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);

        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
            if (match('++') || match('--')) {
                // ECMA-262 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                    tolerateError(Messages.StrictLHSPostfix);
                }

                if (!isAssignmentTarget) {
                    tolerateError(Messages.InvalidLHSInAssignment);
                }

                isAssignmentTarget = isBindingElement = false;

                token = lex();
                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
            }
        }

        return expr;
    }

    // ECMA-262 12.5 Unary Operators

    function parseUnaryExpression() {
        var token, expr, startToken;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            expr = parsePostfixExpression();
        } else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            // ECMA-262 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                tolerateError(Messages.StrictLHSPrefix);
            }

            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                tolerateError(Messages.StrictDelete);
            }
            isAssignmentTarget = isBindingElement = false;
        } else {
            expr = parsePostfixExpression();
        }

        return expr;
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // ECMA-262 12.6 Multiplicative Operators
    // ECMA-262 12.7 Additive Operators
    // ECMA-262 12.8 Bitwise Shift Operators
    // ECMA-262 12.9 Relational Operators
    // ECMA-262 12.10 Equality Operators
    // ECMA-262 12.11 Binary Bitwise Operators
    // ECMA-262 12.12 Binary Logical Operators

    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;

        marker = lookahead;
        left = inheritCoverGrammar(parseUnaryExpression);

        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) {
            return left;
        }
        isAssignmentTarget = isBindingElement = false;
        token.prec = prec;
        lex();

        markers = [marker, lookahead];
        right = isolateCoverGrammar(parseUnaryExpression);

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                markers.pop();
                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
                stack.push(expr);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = isolateCoverGrammar(parseUnaryExpression);
            stack.push(expr);
        }

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
        }

        return expr;
    }


    // ECMA-262 12.13 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;

        startToken = lookahead;

        expr = inheritCoverGrammar(parseBinaryExpression);
        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = isolateCoverGrammar(parseAssignmentExpression);
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = isolateCoverGrammar(parseAssignmentExpression);

            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
            isAssignmentTarget = isBindingElement = false;
        }

        return expr;
    }

    // ECMA-262 14.2 Arrow Function Definitions

    function parseConciseBody() {
        if (match('{')) {
            return parseFunctionSourceElements();
        }
        return isolateCoverGrammar(parseAssignmentExpression);
    }

    function checkPatternParam(options, param) {
        var i;
        switch (param.type) {
        case Syntax.Identifier:
            validateParam(options, param, param.name);
            break;
        case Syntax.RestElement:
            checkPatternParam(options, param.argument);
            break;
        case Syntax.AssignmentPattern:
            checkPatternParam(options, param.left);
            break;
        case Syntax.ArrayPattern:
            for (i = 0; i < param.elements.length; i++) {
                if (param.elements[i] !== null) {
                    checkPatternParam(options, param.elements[i]);
                }
            }
            break;
        case Syntax.YieldExpression:
            break;
        default:
            assert(param.type === Syntax.ObjectPattern, 'Invalid type');
            for (i = 0; i < param.properties.length; i++) {
                checkPatternParam(options, param.properties[i].value);
            }
            break;
        }
    }
    function reinterpretAsCoverFormalsList(expr) {
        var i, len, param, params, defaults, defaultCount, options, token;

        defaults = [];
        defaultCount = 0;
        params = [expr];

        switch (expr.type) {
        case Syntax.Identifier:
            break;
        case PlaceHolders.ArrowParameterPlaceHolder:
            params = expr.params;
            break;
        default:
            return null;
        }

        options = {
            paramSet: {}
        };

        for (i = 0, len = params.length; i < len; i += 1) {
            param = params[i];
            switch (param.type) {
            case Syntax.AssignmentPattern:
                params[i] = param.left;
                if (param.right.type === Syntax.YieldExpression) {
                    if (param.right.argument) {
                        throwUnexpectedToken(lookahead);
                    }
                    param.right.type = Syntax.Identifier;
                    param.right.name = 'yield';
                    delete param.right.argument;
                    delete param.right.delegate;
                }
                defaults.push(param.right);
                ++defaultCount;
                checkPatternParam(options, param.left);
                break;
            default:
                checkPatternParam(options, param);
                params[i] = param;
                defaults.push(null);
                break;
            }
        }

        if (strict || !state.allowYield) {
            for (i = 0, len = params.length; i < len; i += 1) {
                param = params[i];
                if (param.type === Syntax.YieldExpression) {
                    throwUnexpectedToken(lookahead);
                }
            }
        }

        if (options.message === Messages.StrictParamDupe) {
            token = strict ? options.stricted : options.firstRestricted;
            throwUnexpectedToken(token, options.message);
        }

        if (defaultCount === 0) {
            defaults = [];
        }

        return {
            params: params,
            defaults: defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseArrowFunctionExpression(options, node) {
        var previousStrict, previousAllowYield, body;

        if (hasLineTerminator) {
            tolerateUnexpectedToken(lookahead);
        }
        expect('=>');

        previousStrict = strict;
        previousAllowYield = state.allowYield;
        state.allowYield = true;

        body = parseConciseBody();

        if (strict && options.firstRestricted) {
            throwUnexpectedToken(options.firstRestricted, options.message);
        }
        if (strict && options.stricted) {
            tolerateUnexpectedToken(options.stricted, options.message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
    }

    // ECMA-262 14.4 Yield expression

    function parseYieldExpression() {
        var argument, expr, delegate, previousAllowYield;

        argument = null;
        expr = new Node();
        delegate = false;

        expectKeyword('yield');

        if (!hasLineTerminator) {
            previousAllowYield = state.allowYield;
            state.allowYield = false;
            delegate = match('*');
            if (delegate) {
                lex();
                argument = parseAssignmentExpression();
            } else {
                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
                    argument = parseAssignmentExpression();
                }
            }
            state.allowYield = previousAllowYield;
        }

        return expr.finishYieldExpression(argument, delegate);
    }

    // ECMA-262 12.14 Assignment Operators

    function parseAssignmentExpression() {
        var token, expr, right, list, startToken;

        startToken = lookahead;
        token = lookahead;

        if (!state.allowYield && matchKeyword('yield')) {
            return parseYieldExpression();
        }

        expr = parseConditionalExpression();

        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
            isAssignmentTarget = isBindingElement = false;
            list = reinterpretAsCoverFormalsList(expr);

            if (list) {
                firstCoverInitializedNameError = null;
                return parseArrowFunctionExpression(list, new WrappingNode(startToken));
            }

            return expr;
        }

        if (matchAssign()) {
            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }

            // ECMA-262 12.1.1
            if (strict && expr.type === Syntax.Identifier) {
                if (isRestrictedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
                }
                if (isStrictModeReservedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                }
            }

            if (!match('=')) {
                isAssignmentTarget = isBindingElement = false;
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            token = lex();
            right = isolateCoverGrammar(parseAssignmentExpression);
            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
            firstCoverInitializedNameError = null;
        }

        return expr;
    }

    // ECMA-262 12.15 Comma Operator

    function parseExpression() {
        var expr, startToken = lookahead, expressions;

        expr = isolateCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expressions.push(isolateCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }

        return expr;
    }

    // ECMA-262 13.2 Block

    function parseStatementListItem() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'export':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
                }
                return parseExportDeclaration();
            case 'import':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
                }
                return parseImportDeclaration();
            case 'const':
                return parseLexicalDeclaration({inFor: false});
            case 'function':
                return parseFunctionDeclaration(new Node());
            case 'class':
                return parseClassDeclaration();
            }
        }

        if (matchKeyword('let') && isLexicalDeclaration()) {
            return parseLexicalDeclaration({inFor: false});
        }

        return parseStatement();
    }

    function parseStatementList() {
        var list = [];
        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            list.push(parseStatementListItem());
        }

        return list;
    }

    function parseBlock() {
        var block, node = new Node();

        expect('{');

        block = parseStatementList();

        expect('}');

        return node.finishBlockStatement(block);
    }

    // ECMA-262 13.3.2 Variable Statement

    function parseVariableIdentifier(kind) {
        var token, node = new Node();

        token = lex();

        if (token.type === Token.Keyword && token.value === 'yield') {
            if (strict) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } if (!state.allowYield) {
                throwUnexpectedToken(token);
            }
        } else if (token.type !== Token.Identifier) {
            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } else {
                if (strict || token.value !== 'let' || kind !== 'var') {
                    throwUnexpectedToken(token);
                }
            }
        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
            tolerateUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseVariableDeclaration(options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, 'var');

        // ECMA-262 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (match('=')) {
            lex();
            init = isolateCoverGrammar(parseAssignmentExpression);
        } else if (id.type !== Syntax.Identifier && !options.inFor) {
            expect('=');
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseVariableDeclarationList(options) {
        var opt, list;

        opt = { inFor: options.inFor };
        list = [parseVariableDeclaration(opt)];

        while (match(',')) {
            lex();
            list.push(parseVariableDeclaration(opt));
        }

        return list;
    }

    function parseVariableStatement(node) {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList({ inFor: false });

        consumeSemicolon();

        return node.finishVariableDeclaration(declarations);
    }

    // ECMA-262 13.3.1 Let and Const Declarations

    function parseLexicalBinding(kind, options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, kind);

        // ECMA-262 12.2.1
        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (kind === 'const') {
            if (!matchKeyword('in') && !matchContextualKeyword('of')) {
                expect('=');
                init = isolateCoverGrammar(parseAssignmentExpression);
            }
        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {
            expect('=');
            init = isolateCoverGrammar(parseAssignmentExpression);
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseBindingList(kind, options) {
        var list = [parseLexicalBinding(kind, options)];

        while (match(',')) {
            lex();
            list.push(parseLexicalBinding(kind, options));
        }

        return list;
    }


    function tokenizerState() {
        return {
            index: index,
            lineNumber: lineNumber,
            lineStart: lineStart,
            hasLineTerminator: hasLineTerminator,
            lastIndex: lastIndex,
            lastLineNumber: lastLineNumber,
            lastLineStart: lastLineStart,
            startIndex: startIndex,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lookahead: lookahead,
            tokenCount: extra.tokens ? extra.tokens.length : 0
        };
    }

    function resetTokenizerState(ts) {
        index = ts.index;
        lineNumber = ts.lineNumber;
        lineStart = ts.lineStart;
        hasLineTerminator = ts.hasLineTerminator;
        lastIndex = ts.lastIndex;
        lastLineNumber = ts.lastLineNumber;
        lastLineStart = ts.lastLineStart;
        startIndex = ts.startIndex;
        startLineNumber = ts.startLineNumber;
        startLineStart = ts.startLineStart;
        lookahead = ts.lookahead;
        if (extra.tokens) {
            extra.tokens.splice(ts.tokenCount, extra.tokens.length);
        }
    }

    function isLexicalDeclaration() {
        var lexical, ts;

        ts = tokenizerState();

        lex();
        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||
            matchKeyword('let') || matchKeyword('yield');

        resetTokenizerState(ts);

        return lexical;
    }

    function parseLexicalDeclaration(options) {
        var kind, declarations, node = new Node();

        kind = lex().value;
        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');

        declarations = parseBindingList(kind, options);

        consumeSemicolon();

        return node.finishLexicalDeclaration(declarations, kind);
    }

    function parseRestElement(params) {
        var param, node = new Node();

        lex();

        if (match('{')) {
            throwError(Messages.ObjectPatternAsRestParameter);
        }

        params.push(lookahead);

        param = parseVariableIdentifier();

        if (match('=')) {
            throwError(Messages.DefaultRestParameter);
        }

        if (!match(')')) {
            throwError(Messages.ParameterAfterRestParameter);
        }

        return node.finishRestElement(param);
    }

    // ECMA-262 13.4 Empty Statement

    function parseEmptyStatement(node) {
        expect(';');
        return node.finishEmptyStatement();
    }

    // ECMA-262 12.4 Expression Statement

    function parseExpressionStatement(node) {
        var expr = parseExpression();
        consumeSemicolon();
        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 13.6 If statement

    function parseIfStatement(node) {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return node.finishIfStatement(test, consequent, alternate);
    }

    // ECMA-262 13.7 Iteration Statements

    function parseDoWhileStatement(node) {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return node.finishDoWhileStatement(body, test);
    }

    function parseWhileStatement(node) {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return node.finishWhileStatement(test, body);
    }

    function parseForStatement(node) {
        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,
            body, oldInIteration, previousAllowIn = state.allowIn;

        init = test = update = null;
        forIn = true;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var')) {
                init = new Node();
                lex();

                state.allowIn = false;
                declarations = parseVariableDeclarationList({ inFor: true });
                state.allowIn = previousAllowIn;

                if (declarations.length === 1 && matchKeyword('in')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    init = init.finishVariableDeclaration(declarations);
                    expect(';');
                }
            } else if (matchKeyword('const') || matchKeyword('let')) {
                init = new Node();
                kind = lex().value;

                if (!strict && lookahead.value === 'in') {
                    init = init.finishIdentifier(kind);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else {
                    state.allowIn = false;
                    declarations = parseBindingList(kind, {inFor: true});
                    state.allowIn = previousAllowIn;

                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseExpression();
                        init = null;
                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseAssignmentExpression();
                        init = null;
                        forIn = false;
                    } else {
                        consumeSemicolon();
                        init = init.finishLexicalDeclaration(declarations, kind);
                    }
                }
            } else {
                initStartToken = lookahead;
                state.allowIn = false;
                init = inheritCoverGrammar(parseAssignmentExpression);
                state.allowIn = previousAllowIn;

                if (matchKeyword('in')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForIn);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (matchContextualKeyword('of')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForLoop);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    if (match(',')) {
                        initSeq = [init];
                        while (match(',')) {
                            lex();
                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
                        }
                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
                    }
                    expect(';');
                }
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = isolateCoverGrammar(parseStatement);

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                node.finishForStatement(init, test, update, body) :
                forIn ? node.finishForInStatement(left, right, body) :
                    node.finishForOfStatement(left, right, body);
    }

    // ECMA-262 13.8 The continue statement

    function parseContinueStatement(node) {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(startIndex) === 0x3B) {
            lex();

            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (hasLineTerminator) {
            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError(Messages.IllegalContinue);
        }

        return node.finishContinueStatement(label);
    }

    // ECMA-262 13.9 The break statement

    function parseBreakStatement(node) {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(lastIndex) === 0x3B) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }

            return node.finishBreakStatement(null);
        }

        if (hasLineTerminator) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }
        } else if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError(Messages.IllegalBreak);
        }

        return node.finishBreakStatement(label);
    }

    // ECMA-262 13.10 The return statement

    function parseReturnStatement(node) {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            tolerateError(Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(lastIndex) === 0x20) {
            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return node.finishReturnStatement(argument);
            }
        }

        if (hasLineTerminator) {
            // HACK
            return node.finishReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return node.finishReturnStatement(argument);
    }

    // ECMA-262 13.11 The with statement

    function parseWithStatement(node) {
        var object, body;

        if (strict) {
            tolerateError(Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return node.finishWithStatement(object, body);
    }

    // ECMA-262 13.12 The switch statement

    function parseSwitchCase() {
        var test, consequent = [], statement, node = new Node();

        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (startIndex < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatementListItem();
            consequent.push(statement);
        }

        return node.finishSwitchCase(test, consequent);
    }

    function parseSwitchStatement(node) {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return node.finishSwitchStatement(discriminant, cases);
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError(Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return node.finishSwitchStatement(discriminant, cases);
    }

    // ECMA-262 13.14 The throw statement

    function parseThrowStatement(node) {
        var argument;

        expectKeyword('throw');

        if (hasLineTerminator) {
            throwError(Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return node.finishThrowStatement(argument);
    }

    // ECMA-262 13.15 The try statement

    function parseCatchClause() {
        var param, params = [], paramMap = {}, key, i, body, node = new Node();

        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpectedToken(lookahead);
        }

        param = parsePattern(params);
        for (i = 0; i < params.length; i++) {
            key = '$' + params[i].value;
            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                tolerateError(Messages.DuplicateBinding, params[i].value);
            }
            paramMap[key] = true;
        }

        // ECMA-262 12.14.1
        if (strict && isRestrictedWord(param.name)) {
            tolerateError(Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return node.finishCatchClause(param, body);
    }

    function parseTryStatement(node) {
        var block, handler = null, finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handler = parseCatchClause();
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (!handler && !finalizer) {
            throwError(Messages.NoCatchOrFinally);
        }

        return node.finishTryStatement(block, handler, finalizer);
    }

    // ECMA-262 13.16 The debugger statement

    function parseDebuggerStatement(node) {
        expectKeyword('debugger');

        consumeSemicolon();

        return node.finishDebuggerStatement();
    }

    // 13 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key,
            node;

        if (type === Token.EOF) {
            throwUnexpectedToken(lookahead);
        }

        if (type === Token.Punctuator && lookahead.value === '{') {
            return parseBlock();
        }
        isAssignmentTarget = isBindingElement = true;
        node = new Node();

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return parseEmptyStatement(node);
            case '(':
                return parseExpressionStatement(node);
            default:
                break;
            }
        } else if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return parseBreakStatement(node);
            case 'continue':
                return parseContinueStatement(node);
            case 'debugger':
                return parseDebuggerStatement(node);
            case 'do':
                return parseDoWhileStatement(node);
            case 'for':
                return parseForStatement(node);
            case 'function':
                return parseFunctionDeclaration(node);
            case 'if':
                return parseIfStatement(node);
            case 'return':
                return parseReturnStatement(node);
            case 'switch':
                return parseSwitchStatement(node);
            case 'throw':
                return parseThrowStatement(node);
            case 'try':
                return parseTryStatement(node);
            case 'var':
                return parseVariableStatement(node);
            case 'while':
                return parseWhileStatement(node);
            case 'with':
                return parseWithStatement(node);
            default:
                break;
            }
        }

        expr = parseExpression();

        // ECMA-262 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return node.finishLabeledStatement(expr, labeledBody);
        }

        consumeSemicolon();

        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 14.1 Function Definition

    function parseFunctionSourceElements() {
        var statement, body = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,
            node = new Node();

        expect('{');

        while (startIndex < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            body.push(parseStatementListItem());
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return node.finishBlockStatement(body);
    }

    function validateParam(options, param, name) {
        var key = '$' + name;
        if (strict) {
            if (isRestrictedWord(name)) {
                options.stricted = param;
                options.message = Messages.StrictParamName;
            }
            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        } else if (!options.firstRestricted) {
            if (isRestrictedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictParamName;
            } else if (isStrictModeReservedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        }
        options.paramSet[key] = true;
    }

    function parseParam(options) {
        var token, param, params = [], i, def;

        token = lookahead;
        if (token.value === '...') {
            param = parseRestElement(params);
            validateParam(options, param.argument, param.argument.name);
            options.params.push(param);
            options.defaults.push(null);
            return false;
        }

        param = parsePatternWithDefault(params);
        for (i = 0; i < params.length; i++) {
            validateParam(options, params[i], params[i].value);
        }

        if (param.type === Syntax.AssignmentPattern) {
            def = param.right;
            param = param.left;
            ++options.defaultCount;
        }

        options.params.push(param);
        options.defaults.push(def);

        return !match(')');
    }

    function parseParams(firstRestricted) {
        var options;

        options = {
            params: [],
            defaultCount: 0,
            defaults: [],
            firstRestricted: firstRestricted
        };

        expect('(');

        if (!match(')')) {
            options.paramSet = {};
            while (startIndex < length) {
                if (!parseParam(options)) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        if (options.defaultCount === 0) {
            options.defaults = [];
        }

        return {
            params: options.params,
            defaults: options.defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseFunctionDeclaration(node, identifierIsOptional) {
        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        if (!identifierIsOptional || !match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        state.allowYield = !isGenerator;
        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }


        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp,
            params = [], defaults = [], body, previousStrict, node = new Node(),
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        state.allowYield = !isGenerator;
        if (!match('(')) {
            token = lookahead;
            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }
        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
    }

    // ECMA-262 14.5 Class Definitions

    function parseClassBody() {
        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;

        classBody = new Node();

        expect('{');
        body = [];
        while (!match('}')) {
            if (match(';')) {
                lex();
            } else {
                method = new Node();
                token = lookahead;
                isStatic = false;
                computed = match('[');
                if (match('*')) {
                    lex();
                } else {
                    key = parseObjectPropertyKey();
                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
                        token = lookahead;
                        isStatic = true;
                        computed = match('[');
                        if (match('*')) {
                            lex();
                        } else {
                            key = parseObjectPropertyKey();
                        }
                    }
                }
                method = tryParseMethodDefinition(token, key, computed, method);
                if (method) {
                    method['static'] = isStatic; // jscs:ignore requireDotNotation
                    if (method.kind === 'init') {
                        method.kind = 'method';
                    }
                    if (!isStatic) {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
                            if (method.kind !== 'method' || !method.method || method.value.generator) {
                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
                            }
                            if (hasConstructor) {
                                throwUnexpectedToken(token, Messages.DuplicateConstructor);
                            } else {
                                hasConstructor = true;
                            }
                            method.kind = 'constructor';
                        }
                    } else {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
                            throwUnexpectedToken(token, Messages.StaticPrototype);
                        }
                    }
                    method.type = Syntax.MethodDefinition;
                    delete method.method;
                    delete method.shorthand;
                    body.push(method);
                } else {
                    throwUnexpectedToken(lookahead);
                }
            }
        }
        lex();
        return classBody.finishClassBody(body);
    }

    function parseClassDeclaration(identifierIsOptional) {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (!identifierIsOptional || lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassDeclaration(id, superClass, classBody);
    }

    function parseClassExpression() {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassExpression(id, superClass, classBody);
    }

    // ECMA-262 15.2 Modules

    function parseModuleSpecifier() {
        var node = new Node();

        if (lookahead.type !== Token.StringLiteral) {
            throwError(Messages.InvalidModuleSpecifier);
        }
        return node.finishLiteral(lex());
    }

    // ECMA-262 15.2.3 Exports

    function parseExportSpecifier() {
        var exported, local, node = new Node(), def;
        if (matchKeyword('default')) {
            // export {default} from 'something';
            def = new Node();
            lex();
            local = def.finishIdentifier('default');
        } else {
            local = parseVariableIdentifier();
        }
        if (matchContextualKeyword('as')) {
            lex();
            exported = parseNonComputedProperty();
        }
        return node.finishExportSpecifier(local, exported);
    }

    function parseExportNamedDeclaration(node) {
        var declaration = null,
            isExportFromIdentifier,
            src = null, specifiers = [];

        // non-default export
        if (lookahead.type === Token.Keyword) {
            // covers:
            // export var f = 1;
            switch (lookahead.value) {
                case 'let':
                case 'const':
                    declaration = parseLexicalDeclaration({inFor: false});
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
                case 'var':
                case 'class':
                case 'function':
                    declaration = parseStatementListItem();
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
            }
        }

        expect('{');
        while (!match('}')) {
            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
            specifiers.push(parseExportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');

        if (matchContextualKeyword('from')) {
            // covering:
            // export {default} from 'foo';
            // export {foo} from 'foo';
            lex();
            src = parseModuleSpecifier();
            consumeSemicolon();
        } else if (isExportFromIdentifier) {
            // covering:
            // export {default}; // missing fromClause
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        } else {
            // cover
            // export {foo};
            consumeSemicolon();
        }
        return node.finishExportNamedDeclaration(declaration, specifiers, src);
    }

    function parseExportDefaultDeclaration(node) {
        var declaration = null,
            expression = null;

        // covers:
        // export default ...
        expectKeyword('default');

        if (matchKeyword('function')) {
            // covers:
            // export default function foo () {}
            // export default function () {}
            declaration = parseFunctionDeclaration(new Node(), true);
            return node.finishExportDefaultDeclaration(declaration);
        }
        if (matchKeyword('class')) {
            declaration = parseClassDeclaration(true);
            return node.finishExportDefaultDeclaration(declaration);
        }

        if (matchContextualKeyword('from')) {
            throwError(Messages.UnexpectedToken, lookahead.value);
        }

        // covers:
        // export default {};
        // export default [];
        // export default (1 + 2);
        if (match('{')) {
            expression = parseObjectInitializer();
        } else if (match('[')) {
            expression = parseArrayInitializer();
        } else {
            expression = parseAssignmentExpression();
        }
        consumeSemicolon();
        return node.finishExportDefaultDeclaration(expression);
    }

    function parseExportAllDeclaration(node) {
        var src;

        // covers:
        // export * from 'foo';
        expect('*');
        if (!matchContextualKeyword('from')) {
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        }
        lex();
        src = parseModuleSpecifier();
        consumeSemicolon();

        return node.finishExportAllDeclaration(src);
    }

    function parseExportDeclaration() {
        var node = new Node();
        if (state.inFunctionBody) {
            throwError(Messages.IllegalExportDeclaration);
        }

        expectKeyword('export');

        if (matchKeyword('default')) {
            return parseExportDefaultDeclaration(node);
        }
        if (match('*')) {
            return parseExportAllDeclaration(node);
        }
        return parseExportNamedDeclaration(node);
    }

    // ECMA-262 15.2.2 Imports

    function parseImportSpecifier() {
        // import {<foo as bar>} ...;
        var local, imported, node = new Node();

        imported = parseNonComputedProperty();
        if (matchContextualKeyword('as')) {
            lex();
            local = parseVariableIdentifier();
        }

        return node.finishImportSpecifier(local, imported);
    }

    function parseNamedImports() {
        var specifiers = [];
        // {foo, bar as bas}
        expect('{');
        while (!match('}')) {
            specifiers.push(parseImportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');
        return specifiers;
    }

    function parseImportDefaultSpecifier() {
        // import <foo> ...;
        var local, node = new Node();

        local = parseNonComputedProperty();

        return node.finishImportDefaultSpecifier(local);
    }

    function parseImportNamespaceSpecifier() {
        // import <* as foo> ...;
        var local, node = new Node();

        expect('*');
        if (!matchContextualKeyword('as')) {
            throwError(Messages.NoAsAfterImportNamespace);
        }
        lex();
        local = parseNonComputedProperty();

        return node.finishImportNamespaceSpecifier(local);
    }

    function parseImportDeclaration() {
        var specifiers = [], src, node = new Node();

        if (state.inFunctionBody) {
            throwError(Messages.IllegalImportDeclaration);
        }

        expectKeyword('import');

        if (lookahead.type === Token.StringLiteral) {
            // import 'foo';
            src = parseModuleSpecifier();
        } else {

            if (match('{')) {
                // import {bar}
                specifiers = specifiers.concat(parseNamedImports());
            } else if (match('*')) {
                // import * as foo
                specifiers.push(parseImportNamespaceSpecifier());
            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
                // import foo
                specifiers.push(parseImportDefaultSpecifier());
                if (match(',')) {
                    lex();
                    if (match('*')) {
                        // import foo, * as foo
                        specifiers.push(parseImportNamespaceSpecifier());
                    } else if (match('{')) {
                        // import foo, {bar}
                        specifiers = specifiers.concat(parseNamedImports());
                    } else {
                        throwUnexpectedToken(lookahead);
                    }
                }
            } else {
                throwUnexpectedToken(lex());
            }

            if (!matchContextualKeyword('from')) {
                throwError(lookahead.value ?
                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
            }
            lex();
            src = parseModuleSpecifier();
        }

        consumeSemicolon();
        return node.finishImportDeclaration(specifiers, src);
    }

    // ECMA-262 15.1 Scripts

    function parseScriptBody() {
        var statement, body = [], token, directive, firstRestricted;

        while (startIndex < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (startIndex < length) {
            statement = parseStatementListItem();
            /* istanbul ignore if */
            if (typeof statement === 'undefined') {
                break;
            }
            body.push(statement);
        }
        return body;
    }

    function parseProgram() {
        var body, node;

        peek();
        node = new Node();

        body = parseScriptBody();
        return node.finishProgram(body, state.sourceType);
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (entry.regex) {
                token.regex = {
                    pattern: entry.regex.pattern,
                    flags: entry.regex.flags
                };
            }
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function tokenize(code, options, delegate) {
        var toString,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: []
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenValues = [];
        extra.tokenize = true;
        extra.delegate = delegate;

        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    lex();
                } catch (lexError) {
                    if (extra.errors) {
                        recordError(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            tokens = extra.tokens;
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: [],
            sourceType: 'script'
        };
        strict = false;

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                extra.source = toString(options.source);
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
            if (options.sourceType === 'module') {
                // very restrictive condition for now
                state.sourceType = options.sourceType;
                strict = true;
            }
        }

        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '2.7.3';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
    /* istanbul ignore next */
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],19:[function(require,module,exports){
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*jslint vars:false, bitwise:true*/
/*jshint indent:4*/
/*global exports:true*/
(function clone(exports) {
    'use strict';

    var Syntax,
        VisitorOption,
        VisitorKeys,
        BREAK,
        SKIP,
        REMOVE;

    function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                val = obj[key];
                if (typeof val === 'object' && val !== null) {
                    ret[key] = deepCopy(val);
                } else {
                    ret[key] = val;
                }
            }
        }
        return ret;
    }

    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License

    function upperBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                len = diff;
            } else {
                i = current + 1;
                len -= diff + 1;
            }
        }
        return i;
    }

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportExpression: 'ImportExpression',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    VisitorKeys = {
        AssignmentExpression: ['left', 'right'],
        AssignmentPattern: ['left', 'right'],
        ArrayExpression: ['elements'],
        ArrayPattern: ['elements'],
        ArrowFunctionExpression: ['params', 'body'],
        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.
        BlockStatement: ['body'],
        BinaryExpression: ['left', 'right'],
        BreakStatement: ['label'],
        CallExpression: ['callee', 'arguments'],
        CatchClause: ['param', 'body'],
        ClassBody: ['body'],
        ClassDeclaration: ['id', 'superClass', 'body'],
        ClassExpression: ['id', 'superClass', 'body'],
        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        ConditionalExpression: ['test', 'consequent', 'alternate'],
        ContinueStatement: ['label'],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: ['body', 'test'],
        EmptyStatement: [],
        ExportAllDeclaration: ['source'],
        ExportDefaultDeclaration: ['declaration'],
        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],
        ExportSpecifier: ['exported', 'local'],
        ExpressionStatement: ['expression'],
        ForStatement: ['init', 'test', 'update', 'body'],
        ForInStatement: ['left', 'right', 'body'],
        ForOfStatement: ['left', 'right', 'body'],
        FunctionDeclaration: ['id', 'params', 'body'],
        FunctionExpression: ['id', 'params', 'body'],
        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        Identifier: [],
        IfStatement: ['test', 'consequent', 'alternate'],
        ImportExpression: ['source'],
        ImportDeclaration: ['specifiers', 'source'],
        ImportDefaultSpecifier: ['local'],
        ImportNamespaceSpecifier: ['local'],
        ImportSpecifier: ['imported', 'local'],
        Literal: [],
        LabeledStatement: ['label', 'body'],
        LogicalExpression: ['left', 'right'],
        MemberExpression: ['object', 'property'],
        MetaProperty: ['meta', 'property'],
        MethodDefinition: ['key', 'value'],
        ModuleSpecifier: [],
        NewExpression: ['callee', 'arguments'],
        ObjectExpression: ['properties'],
        ObjectPattern: ['properties'],
        Program: ['body'],
        Property: ['key', 'value'],
        RestElement: [ 'argument' ],
        ReturnStatement: ['argument'],
        SequenceExpression: ['expressions'],
        SpreadElement: ['argument'],
        Super: [],
        SwitchStatement: ['discriminant', 'cases'],
        SwitchCase: ['test', 'consequent'],
        TaggedTemplateExpression: ['tag', 'quasi'],
        TemplateElement: [],
        TemplateLiteral: ['quasis', 'expressions'],
        ThisExpression: [],
        ThrowStatement: ['argument'],
        TryStatement: ['block', 'handler', 'finalizer'],
        UnaryExpression: ['argument'],
        UpdateExpression: ['argument'],
        VariableDeclaration: ['declarations'],
        VariableDeclarator: ['id', 'init'],
        WhileStatement: ['test', 'body'],
        WithStatement: ['object', 'body'],
        YieldExpression: ['argument']
    };

    // unique id
    BREAK = {};
    SKIP = {};
    REMOVE = {};

    VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
    };

    function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
    }

    Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
    };

    Reference.prototype.remove = function remove() {
        if (Array.isArray(this.parent)) {
            this.parent.splice(this.key, 1);
            return true;
        } else {
            this.replace(null);
            return false;
        }
    };

    function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
    }

    function Controller() { }

    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;

        function addToPath(result, path) {
            if (Array.isArray(path)) {
                for (j = 0, jz = path.length; j < jz; ++j) {
                    result.push(path[j]);
                }
            } else {
                result.push(path);
            }
        }

        // root node
        if (!this.__current.path) {
            return null;
        }

        // first node is sentinel, second node is root element
        result = [];
        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
            element = this.__leavelist[i];
            addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
    };

    // API:
    // return type of current node
    Controller.prototype.type = function () {
        var node = this.current();
        return node.type || this.__current.wrap;
    };

    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
        var i, iz, result;

        // first node is sentinel
        result = [];
        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
            result.push(this.__leavelist[i].node);
        }

        return result;
    };

    // API:
    // return current node
    Controller.prototype.current = function current() {
        return this.__current.node;
    };

    Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;

        result = undefined;

        previous  = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;

        return result;
    };

    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
    };

    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function () {
        this.notify(SKIP);
    };

    // API:
    // break traversals
    Controller.prototype['break'] = function () {
        this.notify(BREAK);
    };

    // API:
    // remove node
    Controller.prototype.remove = function () {
        this.notify(REMOVE);
    };

    Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = null;
        if (visitor.fallback === 'iteration') {
            this.__fallback = Object.keys;
        } else if (typeof visitor.fallback === 'function') {
            this.__fallback = visitor.fallback;
        }

        this.__keys = VisitorKeys;
        if (visitor.keys) {
            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);
        }
    };

    function isNode(node) {
        if (node == null) {
            return false;
        }
        return typeof node === 'object' && typeof node.type === 'string';
    }

    function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
    }

    Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist,
            leavelist,
            element,
            node,
            nodeType,
            ret,
            key,
            current,
            current2,
            candidates,
            candidate,
            sentinel;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                ret = this.__execute(visitor.leave, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                continue;
            }

            if (element.node) {

                ret = this.__execute(visitor.enter, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }

                worklist.push(sentinel);
                leavelist.push(element);

                if (this.__state === SKIP || ret === SKIP) {
                    continue;
                }

                node = element.node;
                nodeType = node.type || element.wrap;
                candidates = this.__keys[nodeType];
                if (!candidates) {
                    if (this.__fallback) {
                        candidates = this.__fallback(node);
                    } else {
                        throw new Error('Unknown node type ' + nodeType + '.');
                    }
                }

                current = candidates.length;
                while ((current -= 1) >= 0) {
                    key = candidates[current];
                    candidate = node[key];
                    if (!candidate) {
                        continue;
                    }

                    if (Array.isArray(candidate)) {
                        current2 = candidate.length;
                        while ((current2 -= 1) >= 0) {
                            if (!candidate[current2]) {
                                continue;
                            }
                            if (isProperty(nodeType, candidates[current])) {
                                element = new Element(candidate[current2], [key, current2], 'Property', null);
                            } else if (isNode(candidate[current2])) {
                                element = new Element(candidate[current2], [key, current2], null, null);
                            } else {
                                continue;
                            }
                            worklist.push(element);
                        }
                    } else if (isNode(candidate)) {
                        worklist.push(new Element(candidate, key, null, null));
                    }
                }
            }
        }
    };

    Controller.prototype.replace = function replace(root, visitor) {
        var worklist,
            leavelist,
            node,
            nodeType,
            target,
            element,
            current,
            current2,
            candidates,
            candidate,
            sentinel,
            outer,
            key;

        function removeElem(element) {
            var i,
                key,
                nextElem,
                parent;

            if (element.ref.remove()) {
                // When the reference is an element of an array.
                key = element.ref.key;
                parent = element.ref.parent;

                // If removed from array, then decrease following items' keys.
                i = worklist.length;
                while (i--) {
                    nextElem = worklist[i];
                    if (nextElem.ref && nextElem.ref.parent === parent) {
                        if  (nextElem.ref.key < key) {
                            break;
                        }
                        --nextElem.ref.key;
                    }
                }
            }
        }

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        outer = {
            root: root
        };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                target = this.__execute(visitor.leave, element);

                // node may be replaced with null,
                // so distinguish between undefined and null in this place
                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                    // replace
                    element.ref.replace(target);
                }

                if (this.__state === REMOVE || target === REMOVE) {
                    removeElem(element);
                }

                if (this.__state === BREAK || target === BREAK) {
                    return outer.root;
                }
                continue;
            }

            target = this.__execute(visitor.enter, element);

            // node may be replaced with null,
            // so distinguish between undefined and null in this place
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                // replace
                element.ref.replace(target);
                element.node = target;
            }

            if (this.__state === REMOVE || target === REMOVE) {
                removeElem(element);
                element.node = null;
            }

            if (this.__state === BREAK || target === BREAK) {
                return outer.root;
            }

            // node may be null
            node = element.node;
            if (!node) {
                continue;
            }

            worklist.push(sentinel);
            leavelist.push(element);

            if (this.__state === SKIP || target === SKIP) {
                continue;
            }

            nodeType = node.type || element.wrap;
            candidates = this.__keys[nodeType];
            if (!candidates) {
                if (this.__fallback) {
                    candidates = this.__fallback(node);
                } else {
                    throw new Error('Unknown node type ' + nodeType + '.');
                }
            }

            current = candidates.length;
            while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                    continue;
                }

                if (Array.isArray(candidate)) {
                    current2 = candidate.length;
                    while ((current2 -= 1) >= 0) {
                        if (!candidate[current2]) {
                            continue;
                        }
                        if (isProperty(nodeType, candidates[current])) {
                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
                        } else if (isNode(candidate[current2])) {
                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
                        } else {
                            continue;
                        }
                        worklist.push(element);
                    }
                } else if (isNode(candidate)) {
                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                }
            }
        }

        return outer.root;
    };

    function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
    }

    function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
    }

    function extendCommentRange(comment, tokens) {
        var target;

        target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
        });

        comment.extendedRange = [comment.range[0], comment.range[1]];

        if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
        }

        target -= 1;
        if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
        }

        return comment;
    }

    function attachComments(tree, providedComments, tokens) {
        // At first, we should calculate extended comment ranges.
        var comments = [], comment, len, i, cursor;

        if (!tree.range) {
            throw new Error('attachComments needs range information');
        }

        // tokens array is empty, we attach comments to tree as 'leadingComments'
        if (!tokens.length) {
            if (providedComments.length) {
                for (i = 0, len = providedComments.length; i < len; i += 1) {
                    comment = deepCopy(providedComments[i]);
                    comment.extendedRange = [0, tree.range[0]];
                    comments.push(comment);
                }
                tree.leadingComments = comments;
            }
            return tree;
        }

        for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }

        // This is based on John Freeman's implementation.
        cursor = 0;
        traverse(tree, {
            enter: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (comment.extendedRange[1] > node.range[0]) {
                        break;
                    }

                    if (comment.extendedRange[1] === node.range[0]) {
                        if (!node.leadingComments) {
                            node.leadingComments = [];
                        }
                        node.leadingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        cursor = 0;
        traverse(tree, {
            leave: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (node.range[1] < comment.extendedRange[0]) {
                        break;
                    }

                    if (node.range[1] === comment.extendedRange[0]) {
                        if (!node.trailingComments) {
                            node.trailingComments = [];
                        }
                        node.trailingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        return tree;
    }

    exports.version = require('./package.json').version;
    exports.Syntax = Syntax;
    exports.traverse = traverse;
    exports.replace = replace;
    exports.attachComments = attachComments;
    exports.VisitorKeys = VisitorKeys;
    exports.VisitorOption = VisitorOption;
    exports.Controller = Controller;
    exports.cloneEnvironment = function () { return clone({}); };

    return exports;
}(exports));
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./package.json":20}],20:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "estraverse@4.3.0",
      "/mnt/c/Users/dhn03/source/projects/jsflow/jsflow-master"
    ]
  ],
  "_from": "estraverse@4.3.0",
  "_id": "estraverse@4.3.0",
  "_inBundle": false,
  "_integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
  "_location": "/estraverse",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "estraverse@4.3.0",
    "name": "estraverse",
    "escapedName": "estraverse",
    "rawSpec": "4.3.0",
    "saveSpec": null,
    "fetchSpec": "4.3.0"
  },
  "_requiredBy": [
    "/",
    "/escodegen",
    "/static-eval/escodegen",
    "/static-module/escodegen"
  ],
  "_resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
  "_spec": "4.3.0",
  "_where": "/mnt/c/Users/dhn03/source/projects/jsflow/jsflow-master",
  "bugs": {
    "url": "https://github.com/estools/estraverse/issues"
  },
  "description": "ECMAScript JS AST traversal functions",
  "devDependencies": {
    "babel-preset-env": "^1.6.1",
    "babel-register": "^6.3.13",
    "chai": "^2.1.1",
    "espree": "^1.11.0",
    "gulp": "^3.8.10",
    "gulp-bump": "^0.2.2",
    "gulp-filter": "^2.0.0",
    "gulp-git": "^1.0.1",
    "gulp-tag-version": "^1.3.0",
    "jshint": "^2.5.6",
    "mocha": "^2.1.0"
  },
  "engines": {
    "node": ">=4.0"
  },
  "homepage": "https://github.com/estools/estraverse",
  "license": "BSD-2-Clause",
  "main": "estraverse.js",
  "maintainers": [
    {
      "name": "Yusuke Suzuki",
      "email": "utatane.tea@gmail.com",
      "url": "http://github.com/Constellation"
    }
  ],
  "name": "estraverse",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/estools/estraverse.git"
  },
  "scripts": {
    "lint": "jshint estraverse.js",
    "test": "npm run-script lint && npm run-script unit-test",
    "unit-test": "mocha --compilers js:babel-register"
  },
  "version": "4.3.0"
}

},{}],21:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    function isExpression(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'ArrayExpression':
            case 'AssignmentExpression':
            case 'BinaryExpression':
            case 'CallExpression':
            case 'ConditionalExpression':
            case 'FunctionExpression':
            case 'Identifier':
            case 'Literal':
            case 'LogicalExpression':
            case 'MemberExpression':
            case 'NewExpression':
            case 'ObjectExpression':
            case 'SequenceExpression':
            case 'ThisExpression':
            case 'UnaryExpression':
            case 'UpdateExpression':
                return true;
        }
        return false;
    }

    function isIterationStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'DoWhileStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'WhileStatement':
                return true;
        }
        return false;
    }

    function isStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'BlockStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
            case 'DebuggerStatement':
            case 'DoWhileStatement':
            case 'EmptyStatement':
            case 'ExpressionStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'IfStatement':
            case 'LabeledStatement':
            case 'ReturnStatement':
            case 'SwitchStatement':
            case 'ThrowStatement':
            case 'TryStatement':
            case 'VariableDeclaration':
            case 'WhileStatement':
            case 'WithStatement':
                return true;
        }
        return false;
    }

    function isSourceElement(node) {
      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }

    function trailingStatement(node) {
        switch (node.type) {
        case 'IfStatement':
            if (node.alternate != null) {
                return node.alternate;
            }
            return node.consequent;

        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
            return node.body;
        }
        return null;
    }

    function isProblematicIfStatement(node) {
        var current;

        if (node.type !== 'IfStatement') {
            return false;
        }
        if (node.alternate == null) {
            return false;
        }
        current = node.consequent;
        do {
            if (current.type === 'IfStatement') {
                if (current.alternate == null)  {
                    return true;
                }
            }
            current = trailingStatement(current);
        } while (current);

        return false;
    }

    module.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,

        trailingStatement: trailingStatement
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],22:[function(require,module,exports){
/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

    // See `tools/generate-identifier-regex.js`.
    ES5Regex = {
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };

    ES6Regex = {
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    function isDecimalDigit(ch) {
        return 0x30 <= ch && ch <= 0x39;  // 0..9
    }

    function isHexDigit(ch) {
        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
            0x61 <= ch && ch <= 0x66 ||     // a..f
            0x41 <= ch && ch <= 0x46;       // A..F
    }

    function isOctalDigit(ch) {
        return ch >= 0x30 && ch <= 0x37;  // 0..7
    }

    // 7.2 White Space

    NON_ASCII_WHITESPACES = [
        0x1680,
        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
        0x202F, 0x205F,
        0x3000,
        0xFEFF
    ];

    function isWhiteSpace(ch) {
        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    }

    // 7.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
        return cu1 + cu2;
    }

    IDENTIFIER_START = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_START[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    IDENTIFIER_PART = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_PART[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch >= 0x30 && ch <= 0x39 ||  // 0..9
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    function isIdentifierStartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    function isIdentifierStartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStartES5: isIdentifierStartES5,
        isIdentifierPartES5: isIdentifierPartES5,
        isIdentifierStartES6: isIdentifierStartES6,
        isIdentifierPartES6: isIdentifierPartES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],23:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var code = require('./code');

    function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }

    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }

    function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    function isIdentifierNameES5(id) {
        var i, iz, ch;

        if (id.length === 0) { return false; }

        ch = id.charCodeAt(0);
        if (!code.isIdentifierStartES5(ch)) {
            return false;
        }

        for (i = 1, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (!code.isIdentifierPartES5(ch)) {
                return false;
            }
        }
        return true;
    }

    function decodeUtf16(lead, trail) {
        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    }

    function isIdentifierNameES6(id) {
        var i, iz, ch, lowCh, check;

        if (id.length === 0) { return false; }

        check = code.isIdentifierStartES6;
        for (i = 0, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (0xD800 <= ch && ch <= 0xDBFF) {
                ++i;
                if (i >= iz) { return false; }
                lowCh = id.charCodeAt(i);
                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                    return false;
                }
                ch = decodeUtf16(ch, lowCh);
            }
            if (!check(ch)) {
                return false;
            }
            check = code.isIdentifierPartES6;
        }
        return true;
    }

    function isIdentifierES5(id, strict) {
        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
    }

    function isIdentifierES6(id, strict) {
        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
    }

    module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierNameES5: isIdentifierNameES5,
        isIdentifierNameES6: isIdentifierNameES6,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./code":22}],24:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


(function () {
    'use strict';

    exports.ast = require('./ast');
    exports.code = require('./code');
    exports.keyword = require('./keyword');
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./ast":21,"./code":22,"./keyword":23}],25:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],26:[function(require,module,exports){
/*jshint node:true */
/* globals define */
/*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

'use strict';

/**
The following batches are equivalent:

var beautify_js = require('js-beautify');
var beautify_js = require('js-beautify').js;
var beautify_js = require('js-beautify').js_beautify;

var beautify_css = require('js-beautify').css;
var beautify_css = require('js-beautify').css_beautify;

var beautify_html = require('js-beautify').html;
var beautify_html = require('js-beautify').html_beautify;

All methods returned accept two arguments, the source string and an options object.
**/

function get_beautify(js_beautify, css_beautify, html_beautify) {
  // the default is js
  var beautify = function(src, config) {
    return js_beautify.js_beautify(src, config);
  };

  // short aliases
  beautify.js = js_beautify.js_beautify;
  beautify.css = css_beautify.css_beautify;
  beautify.html = html_beautify.html_beautify;

  // legacy aliases
  beautify.js_beautify = js_beautify.js_beautify;
  beautify.css_beautify = css_beautify.css_beautify;
  beautify.html_beautify = html_beautify.html_beautify;

  return beautify;
}

if (typeof define === "function" && define.amd) {
  // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
  define([
    "./lib/beautify",
    "./lib/beautify-css",
    "./lib/beautify-html"
  ], function(js_beautify, css_beautify, html_beautify) {
    return get_beautify(js_beautify, css_beautify, html_beautify);
  });
} else {
  (function(mod) {
    var beautifier = require('./src/index');
    beautifier.js_beautify = beautifier.js;
    beautifier.css_beautify = beautifier.css;
    beautifier.html_beautify = beautifier.html;

    mod.exports = get_beautify(beautifier, beautifier, beautifier);

  })(module);
}
},{"./src/index":44}],27:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Directives(start_block_pattern, end_block_pattern) {
  start_block_pattern = typeof start_block_pattern === 'string' ? start_block_pattern : start_block_pattern.source;
  end_block_pattern = typeof end_block_pattern === 'string' ? end_block_pattern : end_block_pattern.source;
  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, 'g');
  this.__directive_pattern = / (\w+)[:](\w+)/g;

  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, 'g');
}

Directives.prototype.get_directives = function(text) {
  if (!text.match(this.__directives_block_pattern)) {
    return null;
  }

  var directives = {};
  this.__directive_pattern.lastIndex = 0;
  var directive_match = this.__directive_pattern.exec(text);

  while (directive_match) {
    directives[directive_match[1]] = directive_match[2];
    directive_match = this.__directive_pattern.exec(text);
  }

  return directives;
};

Directives.prototype.readIgnored = function(input) {
  return input.readUntilAfter(this.__directives_end_ignore_pattern);
};


module.exports.Directives = Directives;

},{}],28:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var regexp_has_sticky = RegExp.prototype.hasOwnProperty('sticky');

function InputScanner(input_string) {
  this.__input = input_string || '';
  this.__input_length = this.__input.length;
  this.__position = 0;
}

InputScanner.prototype.restart = function() {
  this.__position = 0;
};

InputScanner.prototype.back = function() {
  if (this.__position > 0) {
    this.__position -= 1;
  }
};

InputScanner.prototype.hasNext = function() {
  return this.__position < this.__input_length;
};

InputScanner.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__input.charAt(this.__position);
    this.__position += 1;
  }
  return val;
};

InputScanner.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__input_length) {
    val = this.__input.charAt(index);
  }
  return val;
};

// This is a JavaScript only helper function (not in python)
// Javascript doesn't have a match method
// and not all implementation support "sticky" flag.
// If they do not support sticky then both this.match() and this.test() method
// must get the match and check the index of the match.
// If sticky is supported and set, this method will use it.
// Otherwise it will check that global is set, and fall back to the slower method.
InputScanner.prototype.__match = function(pattern, index) {
  pattern.lastIndex = index;
  var pattern_match = pattern.exec(this.__input);

  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
    if (pattern_match.index !== index) {
      pattern_match = null;
    }
  }

  return pattern_match;
};

InputScanner.prototype.test = function(pattern, index) {
  index = index || 0;
  index += this.__position;

  if (index >= 0 && index < this.__input_length) {
    return !!this.__match(pattern, index);
  } else {
    return false;
  }
};

InputScanner.prototype.testChar = function(pattern, index) {
  // test one character regex match
  var val = this.peek(index);
  pattern.lastIndex = 0;
  return val !== null && pattern.test(val);
};

InputScanner.prototype.match = function(pattern) {
  var pattern_match = this.__match(pattern, this.__position);
  if (pattern_match) {
    this.__position += pattern_match[0].length;
  } else {
    pattern_match = null;
  }
  return pattern_match;
};

InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
  var val = '';
  var match;
  if (starting_pattern) {
    match = this.match(starting_pattern);
    if (match) {
      val += match[0];
    }
  }
  if (until_pattern && (match || !starting_pattern)) {
    val += this.readUntil(until_pattern, until_after);
  }
  return val;
};

InputScanner.prototype.readUntil = function(pattern, until_after) {
  var val = '';
  var match_index = this.__position;
  pattern.lastIndex = this.__position;
  var pattern_match = pattern.exec(this.__input);
  if (pattern_match) {
    match_index = pattern_match.index;
    if (until_after) {
      match_index += pattern_match[0].length;
    }
  } else {
    match_index = this.__input_length;
  }

  val = this.__input.substring(this.__position, match_index);
  this.__position = match_index;
  return val;
};

InputScanner.prototype.readUntilAfter = function(pattern) {
  return this.readUntil(pattern, true);
};

InputScanner.prototype.get_regexp = function(pattern, match_from) {
  var result = null;
  var flags = 'g';
  if (match_from && regexp_has_sticky) {
    flags = 'y';
  }
  // strings are converted to regexp
  if (typeof pattern === "string" && pattern !== '') {
    // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
    result = new RegExp(pattern, flags);
  } else if (pattern) {
    result = new RegExp(pattern.source, flags);
  }
  return result;
};

InputScanner.prototype.get_literal_regexp = function(literal_string) {
  return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
};

/* css beautifier legacy helpers */
InputScanner.prototype.peekUntilAfter = function(pattern) {
  var start = this.__position;
  var val = this.readUntilAfter(pattern);
  this.__position = start;
  return val;
};

InputScanner.prototype.lookBack = function(testVal) {
  var start = this.__position - 1;
  return start >= testVal.length && this.__input.substring(start - testVal.length, start)
    .toLowerCase() === testVal;
};

module.exports.InputScanner = InputScanner;

},{}],29:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Options(options, merge_child_field) {
  this.raw_options = _mergeOpts(options, merge_child_field);

  // Support passing the source text back with no change
  this.disabled = this._get_boolean('disabled');

  this.eol = this._get_characters('eol', 'auto');
  this.end_with_newline = this._get_boolean('end_with_newline');
  this.indent_size = this._get_number('indent_size', 4);
  this.indent_char = this._get_characters('indent_char', ' ');
  this.indent_level = this._get_number('indent_level');

  this.preserve_newlines = this._get_boolean('preserve_newlines', true);
  this.max_preserve_newlines = this._get_number('max_preserve_newlines', 32786);
  if (!this.preserve_newlines) {
    this.max_preserve_newlines = 0;
  }

  this.indent_with_tabs = this._get_boolean('indent_with_tabs', this.indent_char === '\t');
  if (this.indent_with_tabs) {
    this.indent_char = '\t';

    // indent_size behavior changed after 1.8.6
    // It used to be that indent_size would be
    // set to 1 for indent_with_tabs. That is no longer needed and
    // actually doesn't make sense - why not use spaces? Further,
    // that might produce unexpected behavior - tabs being used
    // for single-column alignment. So, when indent_with_tabs is true
    // and indent_size is 1, reset indent_size to 4.
    if (this.indent_size === 1) {
      this.indent_size = 4;
    }
  }

  // Backwards compat with 1.3.x
  this.wrap_line_length = this._get_number('wrap_line_length', this._get_number('max_char'));

  this.indent_empty_lines = this._get_boolean('indent_empty_lines');

  // valid templating languages ['django', 'erb', 'handlebars', 'php']
  // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
  // other values ignored
  this.templating = this._get_selection_list('templating', ['auto', 'none', 'django', 'erb', 'handlebars', 'php'], ['auto']);
}

Options.prototype._get_array = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || [];
  if (typeof option_value === 'object') {
    if (option_value !== null && typeof option_value.concat === 'function') {
      result = option_value.concat();
    }
  } else if (typeof option_value === 'string') {
    result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
  }
  return result;
};

Options.prototype._get_boolean = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = option_value === undefined ? !!default_value : !!option_value;
  return result;
};

Options.prototype._get_characters = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || '';
  if (typeof option_value === 'string') {
    result = option_value.replace(/\\r/, '\r').replace(/\\n/, '\n').replace(/\\t/, '\t');
  }
  return result;
};

Options.prototype._get_number = function(name, default_value) {
  var option_value = this.raw_options[name];
  default_value = parseInt(default_value, 10);
  if (isNaN(default_value)) {
    default_value = 0;
  }
  var result = parseInt(option_value, 10);
  if (isNaN(result)) {
    result = default_value;
  }
  return result;
};

Options.prototype._get_selection = function(name, selection_list, default_value) {
  var result = this._get_selection_list(name, selection_list, default_value);
  if (result.length !== 1) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result[0];
};


Options.prototype._get_selection_list = function(name, selection_list, default_value) {
  if (!selection_list || selection_list.length === 0) {
    throw new Error("Selection list cannot be empty.");
  }

  default_value = default_value || [selection_list[0]];
  if (!this._is_valid_selection(default_value, selection_list)) {
    throw new Error("Invalid Default Value!");
  }

  var result = this._get_array(name, default_value);
  if (!this._is_valid_selection(result, selection_list)) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can contain only the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result;
};

Options.prototype._is_valid_selection = function(result, selection_list) {
  return result.length && selection_list.length &&
    !result.some(function(item) { return selection_list.indexOf(item) === -1; });
};


// merges child options up with the parent options object
// Example: obj = {a: 1, b: {a: 2}}
//          mergeOpts(obj, 'b')
//
//          Returns: {a: 2}
function _mergeOpts(allOptions, childFieldName) {
  var finalOpts = {};
  allOptions = _normalizeOpts(allOptions);
  var name;

  for (name in allOptions) {
    if (name !== childFieldName) {
      finalOpts[name] = allOptions[name];
    }
  }

  //merge in the per type settings for the childFieldName
  if (childFieldName && allOptions[childFieldName]) {
    for (name in allOptions[childFieldName]) {
      finalOpts[name] = allOptions[childFieldName][name];
    }
  }
  return finalOpts;
}

function _normalizeOpts(options) {
  var convertedOpts = {};
  var key;

  for (key in options) {
    var newKey = key.replace(/-/g, "_");
    convertedOpts[newKey] = options[key];
  }
  return convertedOpts;
}

module.exports.Options = Options;
module.exports.normalizeOpts = _normalizeOpts;
module.exports.mergeOpts = _mergeOpts;

},{}],30:[function(require,module,exports){
/*jshint node:true */
/*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function OutputLine(parent) {
  this.__parent = parent;
  this.__character_count = 0;
  // use indent_count as a marker for this.__lines that have preserved indentation
  this.__indent_count = -1;
  this.__alignment_count = 0;
  this.__wrap_point_index = 0;
  this.__wrap_point_character_count = 0;
  this.__wrap_point_indent_count = -1;
  this.__wrap_point_alignment_count = 0;

  this.__items = [];
}

OutputLine.prototype.clone_empty = function() {
  var line = new OutputLine(this.__parent);
  line.set_indent(this.__indent_count, this.__alignment_count);
  return line;
};

OutputLine.prototype.item = function(index) {
  if (index < 0) {
    return this.__items[this.__items.length + index];
  } else {
    return this.__items[index];
  }
};

OutputLine.prototype.has_match = function(pattern) {
  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
    if (this.__items[lastCheckedOutput].match(pattern)) {
      return true;
    }
  }
  return false;
};

OutputLine.prototype.set_indent = function(indent, alignment) {
  if (this.is_empty()) {
    this.__indent_count = indent || 0;
    this.__alignment_count = alignment || 0;
    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
  }
};

OutputLine.prototype._set_wrap_point = function() {
  if (this.__parent.wrap_line_length) {
    this.__wrap_point_index = this.__items.length;
    this.__wrap_point_character_count = this.__character_count;
    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
  }
};

OutputLine.prototype._should_wrap = function() {
  return this.__wrap_point_index &&
    this.__character_count > this.__parent.wrap_line_length &&
    this.__wrap_point_character_count > this.__parent.next_line.__character_count;
};

OutputLine.prototype._allow_wrap = function() {
  if (this._should_wrap()) {
    this.__parent.add_new_line();
    var next = this.__parent.current_line;
    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
    next.__items = this.__items.slice(this.__wrap_point_index);
    this.__items = this.__items.slice(0, this.__wrap_point_index);

    next.__character_count += this.__character_count - this.__wrap_point_character_count;
    this.__character_count = this.__wrap_point_character_count;

    if (next.__items[0] === " ") {
      next.__items.splice(0, 1);
      next.__character_count -= 1;
    }
    return true;
  }
  return false;
};

OutputLine.prototype.is_empty = function() {
  return this.__items.length === 0;
};

OutputLine.prototype.last = function() {
  if (!this.is_empty()) {
    return this.__items[this.__items.length - 1];
  } else {
    return null;
  }
};

OutputLine.prototype.push = function(item) {
  this.__items.push(item);
  var last_newline_index = item.lastIndexOf('\n');
  if (last_newline_index !== -1) {
    this.__character_count = item.length - last_newline_index;
  } else {
    this.__character_count += item.length;
  }
};

OutputLine.prototype.pop = function() {
  var item = null;
  if (!this.is_empty()) {
    item = this.__items.pop();
    this.__character_count -= item.length;
  }
  return item;
};


OutputLine.prototype._remove_indent = function() {
  if (this.__indent_count > 0) {
    this.__indent_count -= 1;
    this.__character_count -= this.__parent.indent_size;
  }
};

OutputLine.prototype._remove_wrap_indent = function() {
  if (this.__wrap_point_indent_count > 0) {
    this.__wrap_point_indent_count -= 1;
  }
};
OutputLine.prototype.trim = function() {
  while (this.last() === ' ') {
    this.__items.pop();
    this.__character_count -= 1;
  }
};

OutputLine.prototype.toString = function() {
  var result = '';
  if (this.is_empty()) {
    if (this.__parent.indent_empty_lines) {
      result = this.__parent.get_indent_string(this.__indent_count);
    }
  } else {
    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
    result += this.__items.join('');
  }
  return result;
};

function IndentStringCache(options, baseIndentString) {
  this.__cache = [''];
  this.__indent_size = options.indent_size;
  this.__indent_string = options.indent_char;
  if (!options.indent_with_tabs) {
    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
  }

  // Set to null to continue support for auto detection of base indent
  baseIndentString = baseIndentString || '';
  if (options.indent_level > 0) {
    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
  }

  this.__base_string = baseIndentString;
  this.__base_string_length = baseIndentString.length;
}

IndentStringCache.prototype.get_indent_size = function(indent, column) {
  var result = this.__base_string_length;
  column = column || 0;
  if (indent < 0) {
    result = 0;
  }
  result += indent * this.__indent_size;
  result += column;
  return result;
};

IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
  var result = this.__base_string;
  column = column || 0;
  if (indent_level < 0) {
    indent_level = 0;
    result = '';
  }
  column += indent_level * this.__indent_size;
  this.__ensure_cache(column);
  result += this.__cache[column];
  return result;
};

IndentStringCache.prototype.__ensure_cache = function(column) {
  while (column >= this.__cache.length) {
    this.__add_column();
  }
};

IndentStringCache.prototype.__add_column = function() {
  var column = this.__cache.length;
  var indent = 0;
  var result = '';
  if (this.__indent_size && column >= this.__indent_size) {
    indent = Math.floor(column / this.__indent_size);
    column -= indent * this.__indent_size;
    result = new Array(indent + 1).join(this.__indent_string);
  }
  if (column) {
    result += new Array(column + 1).join(' ');
  }

  this.__cache.push(result);
};

function Output(options, baseIndentString) {
  this.__indent_cache = new IndentStringCache(options, baseIndentString);
  this.raw = false;
  this._end_with_newline = options.end_with_newline;
  this.indent_size = options.indent_size;
  this.wrap_line_length = options.wrap_line_length;
  this.indent_empty_lines = options.indent_empty_lines;
  this.__lines = [];
  this.previous_line = null;
  this.current_line = null;
  this.next_line = new OutputLine(this);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
  // initialize
  this.__add_outputline();
}

Output.prototype.__add_outputline = function() {
  this.previous_line = this.current_line;
  this.current_line = this.next_line.clone_empty();
  this.__lines.push(this.current_line);
};

Output.prototype.get_line_number = function() {
  return this.__lines.length;
};

Output.prototype.get_indent_string = function(indent, column) {
  return this.__indent_cache.get_indent_string(indent, column);
};

Output.prototype.get_indent_size = function(indent, column) {
  return this.__indent_cache.get_indent_size(indent, column);
};

Output.prototype.is_empty = function() {
  return !this.previous_line && this.current_line.is_empty();
};

Output.prototype.add_new_line = function(force_newline) {
  // never newline at the start of file
  // otherwise, newline only if we didn't just add one or we're forced
  if (this.is_empty() ||
    (!force_newline && this.just_added_newline())) {
    return false;
  }

  // if raw output is enabled, don't print additional newlines,
  // but still return True as though you had
  if (!this.raw) {
    this.__add_outputline();
  }
  return true;
};

Output.prototype.get_code = function(eol) {
  this.trim(true);

  // handle some edge cases where the last tokens
  // has text that ends with newline(s)
  var last_item = this.current_line.pop();
  if (last_item) {
    if (last_item[last_item.length - 1] === '\n') {
      last_item = last_item.replace(/\n+$/g, '');
    }
    this.current_line.push(last_item);
  }

  if (this._end_with_newline) {
    this.__add_outputline();
  }

  var sweet_code = this.__lines.join('\n');

  if (eol !== '\n') {
    sweet_code = sweet_code.replace(/[\n]/g, eol);
  }
  return sweet_code;
};

Output.prototype.set_wrap_point = function() {
  this.current_line._set_wrap_point();
};

Output.prototype.set_indent = function(indent, alignment) {
  indent = indent || 0;
  alignment = alignment || 0;

  // Next line stores alignment values
  this.next_line.set_indent(indent, alignment);

  // Never indent your first output indent at the start of the file
  if (this.__lines.length > 1) {
    this.current_line.set_indent(indent, alignment);
    return true;
  }

  this.current_line.set_indent();
  return false;
};

Output.prototype.add_raw_token = function(token) {
  for (var x = 0; x < token.newlines; x++) {
    this.__add_outputline();
  }
  this.current_line.set_indent(-1);
  this.current_line.push(token.whitespace_before);
  this.current_line.push(token.text);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
};

Output.prototype.add_token = function(printable_token) {
  this.__add_space_before_token();
  this.current_line.push(printable_token);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = this.current_line._allow_wrap();
};

Output.prototype.__add_space_before_token = function() {
  if (this.space_before_token && !this.just_added_newline()) {
    if (!this.non_breaking_space) {
      this.set_wrap_point();
    }
    this.current_line.push(' ');
  }
};

Output.prototype.remove_indent = function(index) {
  var output_length = this.__lines.length;
  while (index < output_length) {
    this.__lines[index]._remove_indent();
    index++;
  }
  this.current_line._remove_wrap_indent();
};

Output.prototype.trim = function(eat_newlines) {
  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

  this.current_line.trim();

  while (eat_newlines && this.__lines.length > 1 &&
    this.current_line.is_empty()) {
    this.__lines.pop();
    this.current_line = this.__lines[this.__lines.length - 1];
    this.current_line.trim();
  }

  this.previous_line = this.__lines.length > 1 ?
    this.__lines[this.__lines.length - 2] : null;
};

Output.prototype.just_added_newline = function() {
  return this.current_line.is_empty();
};

Output.prototype.just_added_blankline = function() {
  return this.is_empty() ||
    (this.current_line.is_empty() && this.previous_line.is_empty());
};

Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
  var index = this.__lines.length - 2;
  while (index >= 0) {
    var potentialEmptyLine = this.__lines[index];
    if (potentialEmptyLine.is_empty()) {
      break;
    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&
      potentialEmptyLine.item(-1) !== ends_with) {
      this.__lines.splice(index + 1, 0, new OutputLine(this));
      this.previous_line = this.__lines[this.__lines.length - 2];
      break;
    }
    index--;
  }
};

module.exports.Output = Output;

},{}],31:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Pattern(input_scanner, parent) {
  this._input = input_scanner;
  this._starting_pattern = null;
  this._match_pattern = null;
  this._until_pattern = null;
  this._until_after = false;

  if (parent) {
    this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);
    this._match_pattern = this._input.get_regexp(parent._match_pattern, true);
    this._until_pattern = this._input.get_regexp(parent._until_pattern);
    this._until_after = parent._until_after;
  }
}

Pattern.prototype.read = function() {
  var result = this._input.read(this._starting_pattern);
  if (!this._starting_pattern || result) {
    result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);
  }
  return result;
};

Pattern.prototype.read_match = function() {
  return this._input.match(this._match_pattern);
};

Pattern.prototype.until_after = function(pattern) {
  var result = this._create();
  result._until_after = true;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.until = function(pattern) {
  var result = this._create();
  result._until_after = false;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.starting_with = function(pattern) {
  var result = this._create();
  result._starting_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype.matching = function(pattern) {
  var result = this._create();
  result._match_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype._create = function() {
  return new Pattern(this._input, this);
};

Pattern.prototype._update = function() {};

module.exports.Pattern = Pattern;

},{}],32:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Pattern = require('./pattern').Pattern;


var template_names = {
  django: false,
  erb: false,
  handlebars: false,
  php: false
};

// This lets templates appear anywhere we would do a readUntil
// The cost is higher but it is pay to play.
function TemplatablePattern(input_scanner, parent) {
  Pattern.call(this, input_scanner, parent);
  this.__template_pattern = null;
  this._disabled = Object.assign({}, template_names);
  this._excluded = Object.assign({}, template_names);

  if (parent) {
    this.__template_pattern = this._input.get_regexp(parent.__template_pattern);
    this._excluded = Object.assign(this._excluded, parent._excluded);
    this._disabled = Object.assign(this._disabled, parent._disabled);
  }
  var pattern = new Pattern(input_scanner);
  this.__patterns = {
    handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),
    handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),
    handlebars: pattern.starting_with(/{{/).until_after(/}}/),
    php: pattern.starting_with(/<\?(?:[=]|php)/).until_after(/\?>/),
    erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),
    // django coflicts with handlebars a bit.
    django: pattern.starting_with(/{%/).until_after(/%}/),
    django_value: pattern.starting_with(/{{/).until_after(/}}/),
    django_comment: pattern.starting_with(/{#/).until_after(/#}/)
  };
}
TemplatablePattern.prototype = new Pattern();

TemplatablePattern.prototype._create = function() {
  return new TemplatablePattern(this._input, this);
};

TemplatablePattern.prototype._update = function() {
  this.__set_templated_pattern();
};

TemplatablePattern.prototype.disable = function(language) {
  var result = this._create();
  result._disabled[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read_options = function(options) {
  var result = this._create();
  for (var language in template_names) {
    result._disabled[language] = options.templating.indexOf(language) === -1;
  }
  result._update();
  return result;
};

TemplatablePattern.prototype.exclude = function(language) {
  var result = this._create();
  result._excluded[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read = function() {
  var result = '';
  if (this._match_pattern) {
    result = this._input.read(this._starting_pattern);
  } else {
    result = this._input.read(this._starting_pattern, this.__template_pattern);
  }
  var next = this._read_template();
  while (next) {
    if (this._match_pattern) {
      next += this._input.read(this._match_pattern);
    } else {
      next += this._input.readUntil(this.__template_pattern);
    }
    result += next;
    next = this._read_template();
  }

  if (this._until_after) {
    result += this._input.readUntilAfter(this._until_pattern);
  }
  return result;
};

TemplatablePattern.prototype.__set_templated_pattern = function() {
  var items = [];

  if (!this._disabled.php) {
    items.push(this.__patterns.php._starting_pattern.source);
  }
  if (!this._disabled.handlebars) {
    items.push(this.__patterns.handlebars._starting_pattern.source);
  }
  if (!this._disabled.erb) {
    items.push(this.__patterns.erb._starting_pattern.source);
  }
  if (!this._disabled.django) {
    items.push(this.__patterns.django._starting_pattern.source);
    items.push(this.__patterns.django_value._starting_pattern.source);
    items.push(this.__patterns.django_comment._starting_pattern.source);
  }

  if (this._until_pattern) {
    items.push(this._until_pattern.source);
  }
  this.__template_pattern = this._input.get_regexp('(?:' + items.join('|') + ')');
};

TemplatablePattern.prototype._read_template = function() {
  var resulting_string = '';
  var c = this._input.peek();
  if (c === '<') {
    var peek1 = this._input.peek(1);
    //if we're in a comment, do something special
    // We treat all comments as literals, even more than preformatted tags
    // we just look for the appropriate close tag
    if (!this._disabled.php && !this._excluded.php && peek1 === '?') {
      resulting_string = resulting_string ||
        this.__patterns.php.read();
    }
    if (!this._disabled.erb && !this._excluded.erb && peek1 === '%') {
      resulting_string = resulting_string ||
        this.__patterns.erb.read();
    }
  } else if (c === '{') {
    if (!this._disabled.handlebars && !this._excluded.handlebars) {
      resulting_string = resulting_string ||
        this.__patterns.handlebars_comment.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars_unescaped.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars.read();
    }
    if (!this._disabled.django) {
      // django coflicts with handlebars a bit.
      if (!this._excluded.django && !this._excluded.handlebars) {
        resulting_string = resulting_string ||
          this.__patterns.django_value.read();
      }
      if (!this._excluded.django) {
        resulting_string = resulting_string ||
          this.__patterns.django_comment.read();
        resulting_string = resulting_string ||
          this.__patterns.django.read();
      }
    }
  }
  return resulting_string;
};


module.exports.TemplatablePattern = TemplatablePattern;

},{"./pattern":31}],33:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Token(type, text, newlines, whitespace_before) {
  this.type = type;
  this.text = text;

  // comments_before are
  // comments that have a new line before them
  // and may or may not have a newline after
  // this is a set of comments before
  this.comments_before = null; /* inline comment*/


  // this.comments_after =  new TokenStream(); // no new line before and newline after
  this.newlines = newlines || 0;
  this.whitespace_before = whitespace_before || '';
  this.parent = null;
  this.next = null;
  this.previous = null;
  this.opened = null;
  this.closed = null;
  this.directives = null;
}


module.exports.Token = Token;

},{}],34:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var InputScanner = require('../core/inputscanner').InputScanner;
var Token = require('../core/token').Token;
var TokenStream = require('../core/tokenstream').TokenStream;
var WhitespacePattern = require('./whitespacepattern').WhitespacePattern;

var TOKEN = {
  START: 'TK_START',
  RAW: 'TK_RAW',
  EOF: 'TK_EOF'
};

var Tokenizer = function(input_string, options) {
  this._input = new InputScanner(input_string);
  this._options = options || {};
  this.__tokens = null;

  this._patterns = {};
  this._patterns.whitespace = new WhitespacePattern(this._input);
};

Tokenizer.prototype.tokenize = function() {
  this._input.restart();
  this.__tokens = new TokenStream();

  this._reset();

  var current;
  var previous = new Token(TOKEN.START, '');
  var open_token = null;
  var open_stack = [];
  var comments = new TokenStream();

  while (previous.type !== TOKEN.EOF) {
    current = this._get_next_token(previous, open_token);
    while (this._is_comment(current)) {
      comments.add(current);
      current = this._get_next_token(previous, open_token);
    }

    if (!comments.isEmpty()) {
      current.comments_before = comments;
      comments = new TokenStream();
    }

    current.parent = open_token;

    if (this._is_opening(current)) {
      open_stack.push(open_token);
      open_token = current;
    } else if (open_token && this._is_closing(current, open_token)) {
      current.opened = open_token;
      open_token.closed = current;
      open_token = open_stack.pop();
      current.parent = open_token;
    }

    current.previous = previous;
    previous.next = current;

    this.__tokens.add(current);
    previous = current;
  }

  return this.__tokens;
};


Tokenizer.prototype._is_first_token = function() {
  return this.__tokens.isEmpty();
};

Tokenizer.prototype._reset = function() {};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  this._readWhitespace();
  var resulting_string = this._input.read(/.+/g);
  if (resulting_string) {
    return this._create_token(TOKEN.RAW, resulting_string);
  } else {
    return this._create_token(TOKEN.EOF, '');
  }
};

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_opening = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._create_token = function(type, text) {
  var token = new Token(type, text,
    this._patterns.whitespace.newline_count,
    this._patterns.whitespace.whitespace_before_token);
  return token;
};

Tokenizer.prototype._readWhitespace = function() {
  return this._patterns.whitespace.read();
};



module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;

},{"../core/inputscanner":28,"../core/token":33,"../core/tokenstream":35,"./whitespacepattern":36}],35:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function TokenStream(parent_token) {
  // private
  this.__tokens = [];
  this.__tokens_length = this.__tokens.length;
  this.__position = 0;
  this.__parent_token = parent_token;
}

TokenStream.prototype.restart = function() {
  this.__position = 0;
};

TokenStream.prototype.isEmpty = function() {
  return this.__tokens_length === 0;
};

TokenStream.prototype.hasNext = function() {
  return this.__position < this.__tokens_length;
};

TokenStream.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__tokens[this.__position];
    this.__position += 1;
  }
  return val;
};

TokenStream.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__tokens_length) {
    val = this.__tokens[index];
  }
  return val;
};

TokenStream.prototype.add = function(token) {
  if (this.__parent_token) {
    token.parent = this.__parent_token;
  }
  this.__tokens.push(token);
  this.__tokens_length += 1;
};

module.exports.TokenStream = TokenStream;

},{}],36:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Pattern = require('../core/pattern').Pattern;

function WhitespacePattern(input_scanner, parent) {
  Pattern.call(this, input_scanner, parent);
  if (parent) {
    this._line_regexp = this._input.get_regexp(parent._line_regexp);
  } else {
    this.__set_whitespace_patterns('', '');
  }

  this.newline_count = 0;
  this.whitespace_before_token = '';
}
WhitespacePattern.prototype = new Pattern();

WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {
  whitespace_chars += '\\t ';
  newline_chars += '\\n\\r';

  this._match_pattern = this._input.get_regexp(
    '[' + whitespace_chars + newline_chars + ']+', true);
  this._newline_regexp = this._input.get_regexp(
    '\\r\\n|[' + newline_chars + ']');
};

WhitespacePattern.prototype.read = function() {
  this.newline_count = 0;
  this.whitespace_before_token = '';

  var resulting_string = this._input.read(this._match_pattern);
  if (resulting_string === ' ') {
    this.whitespace_before_token = ' ';
  } else if (resulting_string) {
    var matches = this.__split(this._newline_regexp, resulting_string);
    this.newline_count = matches.length - 1;
    this.whitespace_before_token = matches[this.newline_count];
  }

  return resulting_string;
};

WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {
  var result = this._create();
  result.__set_whitespace_patterns(whitespace_chars, newline_chars);
  result._update();
  return result;
};

WhitespacePattern.prototype._create = function() {
  return new WhitespacePattern(this._input, this);
};

WhitespacePattern.prototype.__split = function(regexp, input_string) {
  regexp.lastIndex = 0;
  var start_index = 0;
  var result = [];
  var next_match = regexp.exec(input_string);
  while (next_match) {
    result.push(input_string.substring(start_index, next_match.index));
    start_index = next_match.index + next_match[0].length;
    next_match = regexp.exec(input_string);
  }

  if (start_index < input_string.length) {
    result.push(input_string.substring(start_index, input_string.length));
  } else {
    result.push('');
  }

  return result;
};



module.exports.WhitespacePattern = WhitespacePattern;

},{"../core/pattern":31}],37:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Options = require('./options').Options;
var Output = require('../core/output').Output;
var InputScanner = require('../core/inputscanner').InputScanner;
var Directives = require('../core/directives').Directives;

var directives_core = new Directives(/\/\*/, /\*\//);

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

// tokenizer
var whitespaceChar = /\s/;
var whitespacePattern = /(?:\s|\n)+/g;
var block_comment_pattern = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g;
var comment_pattern = /\/\/(?:[^\n\r\u2028\u2029]*)/g;

function Beautifier(source_text, options) {
  this._source_text = source_text || '';
  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  this._options = new Options(options);
  this._ch = null;
  this._input = null;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
  this.NESTED_AT_RULE = {
    "@page": true,
    "@font-face": true,
    "@keyframes": true,
    // also in CONDITIONAL_GROUP_RULE below
    "@media": true,
    "@supports": true,
    "@document": true
  };
  this.CONDITIONAL_GROUP_RULE = {
    "@media": true,
    "@supports": true,
    "@document": true
  };

}

Beautifier.prototype.eatString = function(endChars) {
  var result = '';
  this._ch = this._input.next();
  while (this._ch) {
    result += this._ch;
    if (this._ch === "\\") {
      result += this._input.next();
    } else if (endChars.indexOf(this._ch) !== -1 || this._ch === "\n") {
      break;
    }
    this._ch = this._input.next();
  }
  return result;
};

// Skips any white space in the source text from the current position.
// When allowAtLeastOneNewLine is true, will output new lines for each
// newline character found; if the user has preserve_newlines off, only
// the first newline will be output
Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {
  var result = whitespaceChar.test(this._input.peek());
  var isFirstNewLine = true;

  while (whitespaceChar.test(this._input.peek())) {
    this._ch = this._input.next();
    if (allowAtLeastOneNewLine && this._ch === '\n') {
      if (this._options.preserve_newlines || isFirstNewLine) {
        isFirstNewLine = false;
        this._output.add_new_line(true);
      }
    }
  }
  return result;
};

// Nested pseudo-class if we are insideRule
// and the next special character found opens
// a new block
Beautifier.prototype.foundNestedPseudoClass = function() {
  var openParen = 0;
  var i = 1;
  var ch = this._input.peek(i);
  while (ch) {
    if (ch === "{") {
      return true;
    } else if (ch === '(') {
      // pseudoclasses can contain ()
      openParen += 1;
    } else if (ch === ')') {
      if (openParen === 0) {
        return false;
      }
      openParen -= 1;
    } else if (ch === ";" || ch === "}") {
      return false;
    }
    i++;
    ch = this._input.peek(i);
  }
  return false;
};

Beautifier.prototype.print_string = function(output_string) {
  this._output.set_indent(this._indentLevel);
  this._output.non_breaking_space = true;
  this._output.add_token(output_string);
};

Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {
  if (isAfterSpace) {
    this._output.space_before_token = true;
  }
};

Beautifier.prototype.indent = function() {
  this._indentLevel++;
};

Beautifier.prototype.outdent = function() {
  if (this._indentLevel > 0) {
    this._indentLevel--;
  }
};

/*_____________________--------------------_____________________*/

Beautifier.prototype.beautify = function() {
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text || '')) {
      eol = source_text.match(lineBreak)[0];
    }
  }


  // HACK: newline parsing inconsistent. This brute force normalizes the this._input.
  source_text = source_text.replace(allLineBreaks, '\n');

  // reset
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._output = new Output(this._options, baseIndentString);
  this._input = new InputScanner(source_text);
  this._indentLevel = 0;
  this._nestedLevel = 0;

  this._ch = null;
  var parenLevel = 0;

  var insideRule = false;
  // This is the value side of a property value pair (blue in the following ex)
  // label { content: blue }
  var insidePropertyValue = false;
  var enteringConditionalGroup = false;
  var insideAtExtend = false;
  var insideAtImport = false;
  var topCharacter = this._ch;
  var whitespace;
  var isAfterSpace;
  var previous_ch;

  while (true) {
    whitespace = this._input.read(whitespacePattern);
    isAfterSpace = whitespace !== '';
    previous_ch = topCharacter;
    this._ch = this._input.next();
    if (this._ch === '\\' && this._input.hasNext()) {
      this._ch += this._input.next();
    }
    topCharacter = this._ch;

    if (!this._ch) {
      break;
    } else if (this._ch === '/' && this._input.peek() === '*') {
      // /* css comment */
      // Always start block comments on a new line.
      // This handles scenarios where a block comment immediately
      // follows a property definition on the same line or where
      // minified code is being beautified.
      this._output.add_new_line();
      this._input.back();

      var comment = this._input.read(block_comment_pattern);

      // Handle ignore directive
      var directives = directives_core.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core.readIgnored(this._input);
      }

      this.print_string(comment);

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);

      // Block comments are followed by a new line so they don't
      // share a line with other properties
      this._output.add_new_line();
    } else if (this._ch === '/' && this._input.peek() === '/') {
      // // single line comment
      // Preserves the space before a comment
      // on the same line as a rule
      this._output.space_before_token = true;
      this._input.back();
      this.print_string(this._input.read(comment_pattern));

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);
    } else if (this._ch === '@') {
      this.preserveSingleSpace(isAfterSpace);

      // deal with less propery mixins @{...}
      if (this._input.peek() === '{') {
        this.print_string(this._ch + this.eatString('}'));
      } else {
        this.print_string(this._ch);

        // strip trailing space, if present, for hash property checks
        var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);

        if (variableOrRule.match(/[ :]$/)) {
          // we have a variable or pseudo-class, add it and insert one space before continuing
          variableOrRule = this.eatString(": ").replace(/\s$/, '');
          this.print_string(variableOrRule);
          this._output.space_before_token = true;
        }

        variableOrRule = variableOrRule.replace(/\s$/, '');

        if (variableOrRule === 'extend') {
          insideAtExtend = true;
        } else if (variableOrRule === 'import') {
          insideAtImport = true;
        }

        // might be a nesting at-rule
        if (variableOrRule in this.NESTED_AT_RULE) {
          this._nestedLevel += 1;
          if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {
            enteringConditionalGroup = true;
          }
          // might be less variable
        } else if (!insideRule && parenLevel === 0 && variableOrRule.indexOf(':') !== -1) {
          insidePropertyValue = true;
          this.indent();
        }
      }
    } else if (this._ch === '#' && this._input.peek() === '{') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch + this.eatString('}'));
    } else if (this._ch === '{') {
      if (insidePropertyValue) {
        insidePropertyValue = false;
        this.outdent();
      }
      this.indent();
      this._output.space_before_token = true;
      this.print_string(this._ch);

      // when entering conditional groups, only rulesets are allowed
      if (enteringConditionalGroup) {
        enteringConditionalGroup = false;
        insideRule = (this._indentLevel > this._nestedLevel);
      } else {
        // otherwise, declarations are also allowed
        insideRule = (this._indentLevel >= this._nestedLevel);
      }
      if (this._options.newline_between_rules && insideRule) {
        if (this._output.previous_line && this._output.previous_line.item(-1) !== '{') {
          this._output.ensure_empty_line_above('/', ',');
        }
      }
      this.eatWhitespace(true);
      this._output.add_new_line();
    } else if (this._ch === '}') {
      this.outdent();
      this._output.add_new_line();
      if (previous_ch === '{') {
        this._output.trim(true);
      }
      insideAtImport = false;
      insideAtExtend = false;
      if (insidePropertyValue) {
        this.outdent();
        insidePropertyValue = false;
      }
      this.print_string(this._ch);
      insideRule = false;
      if (this._nestedLevel) {
        this._nestedLevel--;
      }

      this.eatWhitespace(true);
      this._output.add_new_line();

      if (this._options.newline_between_rules && !this._output.just_added_blankline()) {
        if (this._input.peek() !== '}') {
          this._output.add_new_line(true);
        }
      }
    } else if (this._ch === ":") {
      if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !insideAtExtend && parenLevel === 0) {
        // 'property: value' delimiter
        // which could be in a conditional group query
        this.print_string(':');
        if (!insidePropertyValue) {
          insidePropertyValue = true;
          this._output.space_before_token = true;
          this.eatWhitespace(true);
          this.indent();
        }
      } else {
        // sass/less parent reference don't use a space
        // sass nested pseudo-class don't use a space

        // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
        if (this._input.lookBack(" ")) {
          this._output.space_before_token = true;
        }
        if (this._input.peek() === ":") {
          // pseudo-element
          this._ch = this._input.next();
          this.print_string("::");
        } else {
          // pseudo-class
          this.print_string(':');
        }
      }
    } else if (this._ch === '"' || this._ch === '\'') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch + this.eatString(this._ch));
      this.eatWhitespace(true);
    } else if (this._ch === ';') {
      if (parenLevel === 0) {
        if (insidePropertyValue) {
          this.outdent();
          insidePropertyValue = false;
        }
        insideAtExtend = false;
        insideAtImport = false;
        this.print_string(this._ch);
        this.eatWhitespace(true);

        // This maintains single line comments on the same
        // line. Block comments are also affected, but
        // a new line is always output before one inside
        // that section
        if (this._input.peek() !== '/') {
          this._output.add_new_line();
        }
      } else {
        this.print_string(this._ch);
        this.eatWhitespace(true);
        this._output.space_before_token = true;
      }
    } else if (this._ch === '(') { // may be a url
      if (this._input.lookBack("url")) {
        this.print_string(this._ch);
        this.eatWhitespace();
        parenLevel++;
        this.indent();
        this._ch = this._input.next();
        if (this._ch === ')' || this._ch === '"' || this._ch === '\'') {
          this._input.back();
        } else if (this._ch) {
          this.print_string(this._ch + this.eatString(')'));
          if (parenLevel) {
            parenLevel--;
            this.outdent();
          }
        }
      } else {
        this.preserveSingleSpace(isAfterSpace);
        this.print_string(this._ch);
        this.eatWhitespace();
        parenLevel++;
        this.indent();
      }
    } else if (this._ch === ')') {
      if (parenLevel) {
        parenLevel--;
        this.outdent();
      }
      this.print_string(this._ch);
    } else if (this._ch === ',') {
      this.print_string(this._ch);
      this.eatWhitespace(true);
      if (this._options.selector_separator_newline && !insidePropertyValue && parenLevel === 0 && !insideAtImport) {
        this._output.add_new_line();
      } else {
        this._output.space_before_token = true;
      }
    } else if ((this._ch === '>' || this._ch === '+' || this._ch === '~') && !insidePropertyValue && parenLevel === 0) {
      //handle combinator spacing
      if (this._options.space_around_combinator) {
        this._output.space_before_token = true;
        this.print_string(this._ch);
        this._output.space_before_token = true;
      } else {
        this.print_string(this._ch);
        this.eatWhitespace();
        // squash extra whitespace
        if (this._ch && whitespaceChar.test(this._ch)) {
          this._ch = '';
        }
      }
    } else if (this._ch === ']') {
      this.print_string(this._ch);
    } else if (this._ch === '[') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch);
    } else if (this._ch === '=') { // no whitespace before or after
      this.eatWhitespace();
      this.print_string('=');
      if (whitespaceChar.test(this._ch)) {
        this._ch = '';
      }
    } else if (this._ch === '!' && !this._input.lookBack("\\")) { // !important
      this.print_string(' ');
      this.print_string(this._ch);
    } else {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch);
    }
  }

  var sweetCode = this._output.get_code(eol);

  return sweetCode;
};

module.exports.Beautifier = Beautifier;

},{"../core/directives":27,"../core/inputscanner":28,"../core/output":30,"./options":39}],38:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Beautifier = require('./beautifier').Beautifier,
  Options = require('./options').Options;

function css_beautify(source_text, options) {
  var beautifier = new Beautifier(source_text, options);
  return beautifier.beautify();
}

module.exports = css_beautify;
module.exports.defaultOptions = function() {
  return new Options();
};

},{"./beautifier":37,"./options":39}],39:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseOptions = require('../core/options').Options;

function Options(options) {
  BaseOptions.call(this, options, 'css');

  this.selector_separator_newline = this._get_boolean('selector_separator_newline', true);
  this.newline_between_rules = this._get_boolean('newline_between_rules', true);
  var space_around_selector_separator = this._get_boolean('space_around_selector_separator');
  this.space_around_combinator = this._get_boolean('space_around_combinator') || space_around_selector_separator;

}
Options.prototype = new BaseOptions();



module.exports.Options = Options;

},{"../core/options":29}],40:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Options = require('../html/options').Options;
var Output = require('../core/output').Output;
var Tokenizer = require('../html/tokenizer').Tokenizer;
var TOKEN = require('../html/tokenizer').TOKEN;

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

var Printer = function(options, base_indent_string) { //handles input/output and some other printing functions

  this.indent_level = 0;
  this.alignment_size = 0;
  this.max_preserve_newlines = options.max_preserve_newlines;
  this.preserve_newlines = options.preserve_newlines;

  this._output = new Output(options, base_indent_string);

};

Printer.prototype.current_line_has_match = function(pattern) {
  return this._output.current_line.has_match(pattern);
};

Printer.prototype.set_space_before_token = function(value, non_breaking) {
  this._output.space_before_token = value;
  this._output.non_breaking_space = non_breaking;
};

Printer.prototype.set_wrap_point = function() {
  this._output.set_indent(this.indent_level, this.alignment_size);
  this._output.set_wrap_point();
};


Printer.prototype.add_raw_token = function(token) {
  this._output.add_raw_token(token);
};

Printer.prototype.print_preserved_newlines = function(raw_token) {
  var newlines = 0;
  if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {
    newlines = raw_token.newlines ? 1 : 0;
  }

  if (this.preserve_newlines) {
    newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;
  }
  for (var n = 0; n < newlines; n++) {
    this.print_newline(n > 0);
  }

  return newlines !== 0;
};

Printer.prototype.traverse_whitespace = function(raw_token) {
  if (raw_token.whitespace_before || raw_token.newlines) {
    if (!this.print_preserved_newlines(raw_token)) {
      this._output.space_before_token = true;
    }
    return true;
  }
  return false;
};

Printer.prototype.previous_token_wrapped = function() {
  return this._output.previous_token_wrapped;
};

Printer.prototype.print_newline = function(force) {
  this._output.add_new_line(force);
};

Printer.prototype.print_token = function(token) {
  if (token.text) {
    this._output.set_indent(this.indent_level, this.alignment_size);
    this._output.add_token(token.text);
  }
};

Printer.prototype.indent = function() {
  this.indent_level++;
};

Printer.prototype.get_full_indent = function(level) {
  level = this.indent_level + (level || 0);
  if (level < 1) {
    return '';
  }

  return this._output.get_indent_string(level);
};

var get_type_attribute = function(start_token) {
  var result = null;
  var raw_token = start_token.next;

  // Search attributes for a type attribute
  while (raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token) {
    if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === 'type') {
      if (raw_token.next && raw_token.next.type === TOKEN.EQUALS &&
        raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {
        result = raw_token.next.next.text;
      }
      break;
    }
    raw_token = raw_token.next;
  }

  return result;
};

var get_custom_beautifier_name = function(tag_check, raw_token) {
  var typeAttribute = null;
  var result = null;

  if (!raw_token.closed) {
    return null;
  }

  if (tag_check === 'script') {
    typeAttribute = 'text/javascript';
  } else if (tag_check === 'style') {
    typeAttribute = 'text/css';
  }

  typeAttribute = get_type_attribute(raw_token) || typeAttribute;

  // For script and style tags that have a type attribute, only enable custom beautifiers for matching values
  // For those without a type attribute use default;
  if (typeAttribute.search('text/css') > -1) {
    result = 'css';
  } else if (typeAttribute.search(/(text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect)/) > -1) {
    result = 'javascript';
  } else if (typeAttribute.search(/(text|application|dojo)\/(x-)?(html)/) > -1) {
    result = 'html';
  } else if (typeAttribute.search(/test\/null/) > -1) {
    // Test only mime-type for testing the beautifier when null is passed as beautifing function
    result = 'null';
  }

  return result;
};

function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}

function TagFrame(parent, parser_token, indent_level) {
  this.parent = parent || null;
  this.tag = parser_token ? parser_token.tag_name : '';
  this.indent_level = indent_level || 0;
  this.parser_token = parser_token || null;
}

function TagStack(printer) {
  this._printer = printer;
  this._current_frame = null;
}

TagStack.prototype.get_parser_token = function() {
  return this._current_frame ? this._current_frame.parser_token : null;
};

TagStack.prototype.record_tag = function(parser_token) { //function to record a tag and its parent in this.tags Object
  var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);
  this._current_frame = new_frame;
};

TagStack.prototype._try_pop_frame = function(frame) { //function to retrieve the opening tag to the corresponding closer
  var parser_token = null;

  if (frame) {
    parser_token = frame.parser_token;
    this._printer.indent_level = frame.indent_level;
    this._current_frame = frame.parent;
  }

  return parser_token;
};

TagStack.prototype._get_frame = function(tag_list, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._current_frame;

  while (frame) { //till we reach '' (the initial value);
    if (tag_list.indexOf(frame.tag) !== -1) { //if this is it use it
      break;
    } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {
      frame = null;
      break;
    }
    frame = frame.parent;
  }

  return frame;
};

TagStack.prototype.try_pop = function(tag, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._get_frame([tag], stop_list);
  return this._try_pop_frame(frame);
};

TagStack.prototype.indent_to_tag = function(tag_list) {
  var frame = this._get_frame(tag_list);
  if (frame) {
    this._printer.indent_level = frame.indent_level;
  }
};

function Beautifier(source_text, options, js_beautify, css_beautify) {
  //Wrapper function to invoke all the necessary constructors and deal with the output.
  this._source_text = source_text || '';
  options = options || {};
  this._js_beautify = js_beautify;
  this._css_beautify = css_beautify;
  this._tag_stack = null;

  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  var optionHtml = new Options(options, 'html');

  this._options = optionHtml;

  this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, 'force'.length) === 'force';
  this._is_wrap_attributes_force_expand_multiline = (this._options.wrap_attributes === 'force-expand-multiline');
  this._is_wrap_attributes_force_aligned = (this._options.wrap_attributes === 'force-aligned');
  this._is_wrap_attributes_aligned_multiple = (this._options.wrap_attributes === 'aligned-multiple');
  this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, 'preserve'.length) === 'preserve';
  this._is_wrap_attributes_preserve_aligned = (this._options.wrap_attributes === 'preserve-aligned');
}

Beautifier.prototype.beautify = function() {

  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text)) {
      eol = source_text.match(lineBreak)[0];
    }
  }

  // HACK: newline parsing inconsistent. This brute force normalizes the input.
  source_text = source_text.replace(allLineBreaks, '\n');

  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  var last_token = {
    text: '',
    type: ''
  };

  var last_tag_token = new TagOpenParserToken();

  var printer = new Printer(this._options, baseIndentString);
  var tokens = new Tokenizer(source_text, this._options).tokenize();

  this._tag_stack = new TagStack(printer);

  var parser_token = null;
  var raw_token = tokens.next();
  while (raw_token.type !== TOKEN.EOF) {

    if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {
      parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token);
      last_tag_token = parser_token;
    } else if ((raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE) ||
      (raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete)) {
      parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, tokens);
    } else if (raw_token.type === TOKEN.TAG_CLOSE) {
      parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);
    } else if (raw_token.type === TOKEN.TEXT) {
      parser_token = this._handle_text(printer, raw_token, last_tag_token);
    } else {
      // This should never happen, but if it does. Print the raw token
      printer.add_raw_token(raw_token);
    }

    last_token = parser_token;

    raw_token = tokens.next();
  }
  var sweet_code = printer._output.get_code(eol);

  return sweet_code;
};

Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };
  printer.alignment_size = 0;
  last_tag_token.tag_complete = true;

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    if (last_tag_token.tag_start_char === '<') {
      printer.set_space_before_token(raw_token.text[0] === '/', true); // space before />, no space before >
      if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {
        printer.print_newline(false);
      }
    }
    printer.print_token(raw_token);

  }

  if (last_tag_token.indent_content &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.indent();

    // only indent once per opened tag
    last_tag_token.indent_content = false;
  }

  if (!last_tag_token.is_inline_element &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.set_wrap_point();
  }

  return parser_token;
};

Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, tokens) {
  var wrapped = last_tag_token.has_wrapped_attrs;
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else if (last_tag_token.tag_start_char === '{' && raw_token.type === TOKEN.TEXT) {
    // For the insides of handlebars allow newlines or a single space between open and contents
    if (printer.print_preserved_newlines(raw_token)) {
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
    } else {
      printer.print_token(raw_token);
    }
  } else {
    if (raw_token.type === TOKEN.ATTRIBUTE) {
      printer.set_space_before_token(true);
      last_tag_token.attr_count += 1;
    } else if (raw_token.type === TOKEN.EQUALS) { //no space before =
      printer.set_space_before_token(false);
    } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) { //no space before value
      printer.set_space_before_token(false);
    }

    if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === '<') {
      if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {
        printer.traverse_whitespace(raw_token);
        wrapped = wrapped || raw_token.newlines !== 0;
      }


      if (this._is_wrap_attributes_force) {
        var force_attr_wrap = last_tag_token.attr_count > 1;
        if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.attr_count === 1) {
          var is_only_attribute = true;
          var peek_index = 0;
          var peek_token;
          do {
            peek_token = tokens.peek(peek_index);
            if (peek_token.type === TOKEN.ATTRIBUTE) {
              is_only_attribute = false;
              break;
            }
            peek_index += 1;
          } while (peek_index < 4 && peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);

          force_attr_wrap = !is_only_attribute;
        }

        if (force_attr_wrap) {
          printer.print_newline(false);
          wrapped = true;
        }
      }
    }
    printer.print_token(raw_token);
    wrapped = wrapped || printer.previous_token_wrapped();
    last_tag_token.has_wrapped_attrs = wrapped;
  }
  return parser_token;
};

Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: 'TK_CONTENT'
  };
  if (last_tag_token.custom_beautifier_name) { //check if we need to format javascript
    this._print_custom_beatifier_text(printer, raw_token, last_tag_token);
  } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    printer.traverse_whitespace(raw_token);
    printer.print_token(raw_token);
  }
  return parser_token;
};

Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {
  var local = this;
  if (raw_token.text !== '') {

    var text = raw_token.text,
      _beautifier,
      script_indent_level = 1,
      pre = '',
      post = '';
    if (last_tag_token.custom_beautifier_name === 'javascript' && typeof this._js_beautify === 'function') {
      _beautifier = this._js_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'css' && typeof this._css_beautify === 'function') {
      _beautifier = this._css_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'html') {
      _beautifier = function(html_source, options) {
        var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);
        return beautifier.beautify();
      };
    }

    if (this._options.indent_scripts === "keep") {
      script_indent_level = 0;
    } else if (this._options.indent_scripts === "separate") {
      script_indent_level = -printer.indent_level;
    }

    var indentation = printer.get_full_indent(script_indent_level);

    // if there is at least one empty line at the end of this text, strip it
    // we'll be adding one back after the text but before the containing tag.
    text = text.replace(/\n[ \t]*$/, '');

    // Handle the case where content is wrapped in a comment or cdata.
    if (last_tag_token.custom_beautifier_name !== 'html' &&
      text[0] === '<' && text.match(/^(<!--|<!\[CDATA\[)/)) {
      var matched = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(text);

      // if we start to wrap but don't finish, print raw
      if (!matched) {
        printer.add_raw_token(raw_token);
        return;
      }

      pre = indentation + matched[1] + '\n';
      text = matched[4];
      if (matched[5]) {
        post = indentation + matched[5];
      }

      // if there is at least one empty line at the end of this text, strip it
      // we'll be adding one back after the text but before the containing tag.
      text = text.replace(/\n[ \t]*$/, '');

      if (matched[2] || matched[3].indexOf('\n') !== -1) {
        // if the first line of the non-comment text has spaces
        // use that as the basis for indenting in null case.
        matched = matched[3].match(/[ \t]+$/);
        if (matched) {
          raw_token.whitespace_before = matched[0];
        }
      }
    }

    if (text) {
      if (_beautifier) {

        // call the Beautifier if avaliable
        var Child_options = function() {
          this.eol = '\n';
        };
        Child_options.prototype = this._options.raw_options;
        var child_options = new Child_options();
        text = _beautifier(indentation + text, child_options);
      } else {
        // simply indent the string otherwise
        var white = raw_token.whitespace_before;
        if (white) {
          text = text.replace(new RegExp('\n(' + white + ')?', 'g'), '\n');
        }

        text = indentation + text.replace(/\n/g, '\n' + indentation);
      }
    }

    if (pre) {
      if (!text) {
        text = pre + post;
      } else {
        text = pre + text + '\n' + post;
      }
    }

    printer.print_newline(false);
    if (text) {
      raw_token.text = text;
      raw_token.whitespace_before = '';
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
      printer.print_newline(true);
    }
  }
};

Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token) {
  var parser_token = this._get_tag_open_token(raw_token);

  if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) &&
    raw_token.type === TOKEN.TAG_OPEN && raw_token.text.indexOf('</') === 0) {
    // End element tags for unformatted or content_unformatted elements
    // are printed raw to keep any newlines inside them exactly the same.
    printer.add_raw_token(raw_token);
  } else {
    printer.traverse_whitespace(raw_token);
    this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);
    if (!parser_token.is_inline_element) {
      printer.set_wrap_point();
    }
    printer.print_token(raw_token);
  }

  //indent attributes an auto, forced, aligned or forced-align line-wrap
  if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {
    parser_token.alignment_size = raw_token.text.length + 1;
  }

  if (!parser_token.tag_complete && !parser_token.is_unformatted) {
    printer.alignment_size = parser_token.alignment_size;
  }

  return parser_token;
};

var TagOpenParserToken = function(parent, raw_token) {
  this.parent = parent || null;
  this.text = '';
  this.type = 'TK_TAG_OPEN';
  this.tag_name = '';
  this.is_inline_element = false;
  this.is_unformatted = false;
  this.is_content_unformatted = false;
  this.is_empty_element = false;
  this.is_start_tag = false;
  this.is_end_tag = false;
  this.indent_content = false;
  this.multiline_content = false;
  this.custom_beautifier_name = null;
  this.start_tag_token = null;
  this.attr_count = 0;
  this.has_wrapped_attrs = false;
  this.alignment_size = 0;
  this.tag_complete = false;
  this.tag_start_char = '';
  this.tag_check = '';

  if (!raw_token) {
    this.tag_complete = true;
  } else {
    var tag_check_match;

    this.tag_start_char = raw_token.text[0];
    this.text = raw_token.text;

    if (this.tag_start_char === '<') {
      tag_check_match = raw_token.text.match(/^<([^\s>]*)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';
    } else {
      tag_check_match = raw_token.text.match(/^{{[#\^]?([^\s}]+)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';
    }
    this.tag_check = this.tag_check.toLowerCase();

    if (raw_token.type === TOKEN.COMMENT) {
      this.tag_complete = true;
    }

    this.is_start_tag = this.tag_check.charAt(0) !== '/';
    this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;
    this.is_end_tag = !this.is_start_tag ||
      (raw_token.closed && raw_token.closed.text === '/>');

    // handlebars tags that don't start with # or ^ are single_tags, and so also start and end.
    this.is_end_tag = this.is_end_tag ||
      (this.tag_start_char === '{' && (this.text.length < 3 || (/[^#\^]/.test(this.text.charAt(2)))));
  }
};

Beautifier.prototype._get_tag_open_token = function(raw_token) { //function to get a full tag and parse its type
  var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);

  parser_token.alignment_size = this._options.wrap_attributes_indent_size;

  parser_token.is_end_tag = parser_token.is_end_tag ||
    in_array(parser_token.tag_check, this._options.void_elements);

  parser_token.is_empty_element = parser_token.tag_complete ||
    (parser_token.is_start_tag && parser_token.is_end_tag);

  parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);
  parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);
  parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || parser_token.tag_start_char === '{';

  return parser_token;
};

Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {

  if (!parser_token.is_empty_element) {
    if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
      parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors
    } else { // it's a start-tag
      // check if this tag is starting an element that has optional end element
      // and do an ending needed
      if (this._do_optional_end_element(parser_token)) {
        if (!parser_token.is_inline_element) {
          if (parser_token.parent) {
            parser_token.parent.multiline_content = true;
          }
          printer.print_newline(false);
        }

      }

      this._tag_stack.record_tag(parser_token); //push it on the tag stack

      if ((parser_token.tag_name === 'script' || parser_token.tag_name === 'style') &&
        !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {
        parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);
      }
    }
  }

  if (in_array(parser_token.tag_check, this._options.extra_liners)) { //check if this double needs an extra line
    printer.print_newline(false);
    if (!printer._output.just_added_blankline()) {
      printer.print_newline(true);
    }
  }

  if (parser_token.is_empty_element) { //if this tag name is a single tag type (either in the list or has a closing /)

    // if you hit an else case, reset the indent level if you are inside an:
    // 'if', 'unless', or 'each' block.
    if (parser_token.tag_start_char === '{' && parser_token.tag_check === 'else') {
      this._tag_stack.indent_to_tag(['if', 'unless', 'each']);
      parser_token.indent_content = true;
      // Don't add a newline if opening {{#if}} tag is on the current line
      var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);
      if (!foundIfOnCurrentLine) {
        printer.print_newline(false);
      }
    }

    // Don't add a newline before elements that should remain where they are.
    if (parser_token.tag_name === '!--' && last_token.type === TOKEN.TAG_CLOSE &&
      last_tag_token.is_end_tag && parser_token.text.indexOf('\n') === -1) {
      //Do nothing. Leave comments on same line.
    } else if (!parser_token.is_inline_element && !parser_token.is_unformatted) {
      printer.print_newline(false);
    }
  } else if (parser_token.is_unformatted || parser_token.is_content_unformatted) {
    if (!parser_token.is_inline_element && !parser_token.is_unformatted) {
      printer.print_newline(false);
    }
  } else if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
    if ((parser_token.start_tag_token && parser_token.start_tag_token.multiline_content) ||
      !(parser_token.is_inline_element ||
        (last_tag_token.is_inline_element) ||
        (last_token.type === TOKEN.TAG_CLOSE &&
          parser_token.start_tag_token === last_tag_token) ||
        (last_token.type === 'TK_CONTENT')
      )) {
      printer.print_newline(false);
    }
  } else { // it's a start-tag
    parser_token.indent_content = !parser_token.custom_beautifier_name;

    if (parser_token.tag_start_char === '<') {
      if (parser_token.tag_name === 'html') {
        parser_token.indent_content = this._options.indent_inner_html;
      } else if (parser_token.tag_name === 'head') {
        parser_token.indent_content = this._options.indent_head_inner_html;
      } else if (parser_token.tag_name === 'body') {
        parser_token.indent_content = this._options.indent_body_inner_html;
      }
    }

    if (!parser_token.is_inline_element && last_token.type !== 'TK_CONTENT') {
      if (parser_token.parent) {
        parser_token.parent.multiline_content = true;
      }
      printer.print_newline(false);
    }
  }
};

//To be used for <p> tag special case:
//var p_closers = ['address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'];

Beautifier.prototype._do_optional_end_element = function(parser_token) {
  var result = null;
  // NOTE: cases of "if there is no more content in the parent element"
  // are handled automatically by the beautifier.
  // It assumes parent or ancestor close tag closes all children.
  // https://www.w3.org/TR/html5/syntax.html#optional-tags
  if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {
    return;

  } else if (parser_token.tag_name === 'body') {
    // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.
    result = result || this._tag_stack.try_pop('head');

    //} else if (parser_token.tag_name === 'body') {
    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.

  } else if (parser_token.tag_name === 'li') {
    // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('li', ['ol', 'ul']);

  } else if (parser_token.tag_name === 'dd' || parser_token.tag_name === 'dt') {
    // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.
    // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.
    result = result || this._tag_stack.try_pop('dt', ['dl']);
    result = result || this._tag_stack.try_pop('dd', ['dl']);

    //} else if (p_closers.indexOf(parser_token.tag_name) !== -1) {
    //TODO: THIS IS A BUG FARM. We are not putting this into 1.8.0 as it is likely to blow up.
    //A p element’s end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hr, main, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element, or an autonomous custom element.
    //result = result || this._tag_stack.try_pop('p', ['body']);

  } else if (parser_token.tag_name === 'rp' || parser_token.tag_name === 'rt') {
    // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('rt', ['ruby', 'rtc']);
    result = result || this._tag_stack.try_pop('rp', ['ruby', 'rtc']);

  } else if (parser_token.tag_name === 'optgroup') {
    // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('optgroup', ['select']);
    //result = result || this._tag_stack.try_pop('option', ['select']);

  } else if (parser_token.tag_name === 'option') {
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('option', ['select', 'datalist', 'optgroup']);

  } else if (parser_token.tag_name === 'colgroup') {
    // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);

  } else if (parser_token.tag_name === 'thead') {
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);

    //} else if (parser_token.tag_name === 'caption') {
    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.

  } else if (parser_token.tag_name === 'tbody' || parser_token.tag_name === 'tfoot') {
    // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.
    // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('thead', ['table']);
    result = result || this._tag_stack.try_pop('tbody', ['table']);

    //} else if (parser_token.tag_name === 'tfoot') {
    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.

  } else if (parser_token.tag_name === 'tr') {
    // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('tr', ['table', 'thead', 'tbody', 'tfoot']);

  } else if (parser_token.tag_name === 'th' || parser_token.tag_name === 'td') {
    // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.
    // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('td', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
    result = result || this._tag_stack.try_pop('th', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
  }

  // Start element omission not handled currently
  // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.
  // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)
  // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)

  // Fix up the parent of the parser token
  parser_token.parent = this._tag_stack.get_parser_token();

  return result;
};

module.exports.Beautifier = Beautifier;

},{"../core/output":30,"../html/options":42,"../html/tokenizer":43}],41:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Beautifier = require('./beautifier').Beautifier,
  Options = require('./options').Options;

function style_html(html_source, options, js_beautify, css_beautify) {
  var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);
  return beautifier.beautify();
}

module.exports = style_html;
module.exports.defaultOptions = function() {
  return new Options();
};

},{"./beautifier":40,"./options":42}],42:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseOptions = require('../core/options').Options;

function Options(options) {
  BaseOptions.call(this, options, 'html');
  if (this.templating.length === 1 && this.templating[0] === 'auto') {
    this.templating = ['django', 'erb', 'handlebars', 'php'];
  }

  this.indent_inner_html = this._get_boolean('indent_inner_html');
  this.indent_body_inner_html = this._get_boolean('indent_body_inner_html', true);
  this.indent_head_inner_html = this._get_boolean('indent_head_inner_html', true);

  this.indent_handlebars = this._get_boolean('indent_handlebars', true);
  this.wrap_attributes = this._get_selection('wrap_attributes',
    ['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']);
  this.wrap_attributes_indent_size = this._get_number('wrap_attributes_indent_size', this.indent_size);
  this.extra_liners = this._get_array('extra_liners', ['head', 'body', '/html']);

  // Block vs inline elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
  // https://www.w3.org/TR/html5/dom.html#phrasing-content
  this.inline = this._get_array('inline', [
    'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
    'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
    'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
    'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
    'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
    'video', 'wbr', 'text',
    // obsolete inline tags
    'acronym', 'big', 'strike', 'tt'
  ]);
  this.void_elements = this._get_array('void_elements', [
    // HTLM void elements - aka self-closing tags - aka singletons
    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
    // NOTE: Optional tags are too complex for a simple list
    // they are hard coded in _do_optional_end_element

    // Doctype and xml elements
    '!doctype', '?xml',

    // obsolete tags
    // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
    // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
    'basefont', 'isindex'
  ]);
  this.unformatted = this._get_array('unformatted', []);
  this.content_unformatted = this._get_array('content_unformatted', [
    'pre', 'textarea'
  ]);
  this.unformatted_content_delimiter = this._get_characters('unformatted_content_delimiter');
  this.indent_scripts = this._get_selection('indent_scripts', ['normal', 'keep', 'separate']);

}
Options.prototype = new BaseOptions();



module.exports.Options = Options;

},{"../core/options":29}],43:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseTokenizer = require('../core/tokenizer').Tokenizer;
var BASETOKEN = require('../core/tokenizer').TOKEN;
var Directives = require('../core/directives').Directives;
var TemplatablePattern = require('../core/templatablepattern').TemplatablePattern;
var Pattern = require('../core/pattern').Pattern;

var TOKEN = {
  TAG_OPEN: 'TK_TAG_OPEN',
  TAG_CLOSE: 'TK_TAG_CLOSE',
  ATTRIBUTE: 'TK_ATTRIBUTE',
  EQUALS: 'TK_EQUALS',
  VALUE: 'TK_VALUE',
  COMMENT: 'TK_COMMENT',
  TEXT: 'TK_TEXT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN.START,
  RAW: BASETOKEN.RAW,
  EOF: BASETOKEN.EOF
};

var directives_core = new Directives(/<\!--/, /-->/);

var Tokenizer = function(input_string, options) {
  BaseTokenizer.call(this, input_string, options);
  this._current_tag_name = '';

  // Words end at whitespace or when a tag starts
  // if we are indenting handlebars, they are considered tags
  var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);
  var pattern_reader = new Pattern(this._input);

  this.__patterns = {
    word: templatable_reader.until(/[\n\r\t <]/),
    single_quote: templatable_reader.until_after(/'/),
    double_quote: templatable_reader.until_after(/"/),
    attribute: templatable_reader.until(/[\n\r\t =>]|\/>/),
    element_name: templatable_reader.until(/[\n\r\t >\/]/),

    handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),
    handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),
    handlebars_open: pattern_reader.until(/[\n\r\t }]/),
    handlebars_raw_close: pattern_reader.until(/}}/),
    comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),
    cdata: pattern_reader.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
    // https://en.wikipedia.org/wiki/Conditional_comment
    conditional_comment: pattern_reader.starting_with(/<!\[/).until_after(/]>/),
    processing: pattern_reader.starting_with(/<\?/).until_after(/\?>/)
  };

  if (this._options.indent_handlebars) {
    this.__patterns.word = this.__patterns.word.exclude('handlebars');
  }

  this._unformatted_content_delimiter = null;

  if (this._options.unformatted_content_delimiter) {
    var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
    this.__patterns.unformatted_content_delimiter =
      pattern_reader.matching(literal_regexp)
      .until_after(literal_regexp);
  }
};
Tokenizer.prototype = new BaseTokenizer();

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;
};

Tokenizer.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN.TAG_OPEN;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) {
  return current_token.type === TOKEN.TAG_CLOSE &&
    (open_token && (
      ((current_token.text === '>' || current_token.text === '/>') && open_token.text[0] === '<') ||
      (current_token.text === '}}' && open_token.text[0] === '{' && open_token.text[1] === '{')));
};

Tokenizer.prototype._reset = function() {
  this._current_tag_name = '';
};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN.EOF, '');
  }

  token = token || this._read_open_handlebars(c, open_token);
  token = token || this._read_attribute(c, previous_token, open_token);
  token = token || this._read_raw_content(c, previous_token, open_token);
  token = token || this._read_close(c, open_token);
  token = token || this._read_content_word(c);
  token = token || this._read_comment_or_cdata(c);
  token = token || this._read_processing(c);
  token = token || this._read_open(c, open_token);
  token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());

  return token;
};

Tokenizer.prototype._read_comment_or_cdata = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    // We treat all comments as literals, even more than preformatted tags
    // we only look for the appropriate closing marker
    if (peek1 === '!') {
      resulting_string = this.__patterns.comment.read();

      // only process directive on html comments
      if (resulting_string) {
        directives = directives_core.get_directives(resulting_string);
        if (directives && directives.ignore === 'start') {
          resulting_string += directives_core.readIgnored(this._input);
        }
      } else {
        resulting_string = this.__patterns.cdata.read();
      }
    }

    if (resulting_string) {
      token = this._create_token(TOKEN.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer.prototype._read_processing = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    if (peek1 === '!' || peek1 === '?') {
      resulting_string = this.__patterns.conditional_comment.read();
      resulting_string = resulting_string || this.__patterns.processing.read();
    }

    if (resulting_string) {
      token = this._create_token(TOKEN.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer.prototype._read_open = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (c === '<') {

      resulting_string = this._input.next();
      if (this._input.peek() === '/') {
        resulting_string += this._input.next();
      }
      resulting_string += this.__patterns.element_name.read();
      token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
    }
  }
  return token;
};

Tokenizer.prototype._read_open_handlebars = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (this._options.indent_handlebars && c === '{' && this._input.peek(1) === '{') {
      if (this._input.peek(2) === '!') {
        resulting_string = this.__patterns.handlebars_comment.read();
        resulting_string = resulting_string || this.__patterns.handlebars.read();
        token = this._create_token(TOKEN.COMMENT, resulting_string);
      } else {
        resulting_string = this.__patterns.handlebars_open.read();
        token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
      }
    }
  }
  return token;
};


Tokenizer.prototype._read_close = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (open_token) {
    if (open_token.text[0] === '<' && (c === '>' || (c === '/' && this._input.peek(1) === '>'))) {
      resulting_string = this._input.next();
      if (c === '/') { //  for close tag "/>"
        resulting_string += this._input.next();
      }
      token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);
    } else if (open_token.text[0] === '{' && c === '}' && this._input.peek(1) === '}') {
      this._input.next();
      this._input.next();
      token = this._create_token(TOKEN.TAG_CLOSE, '}}');
    }
  }

  return token;
};

Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {
  var token = null;
  var resulting_string = '';
  if (open_token && open_token.text[0] === '<') {

    if (c === '=') {
      token = this._create_token(TOKEN.EQUALS, this._input.next());
    } else if (c === '"' || c === "'") {
      var content = this._input.next();
      if (c === '"') {
        content += this.__patterns.double_quote.read();
      } else {
        content += this.__patterns.single_quote.read();
      }
      token = this._create_token(TOKEN.VALUE, content);
    } else {
      resulting_string = this.__patterns.attribute.read();

      if (resulting_string) {
        if (previous_token.type === TOKEN.EQUALS) {
          token = this._create_token(TOKEN.VALUE, resulting_string);
        } else {
          token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);
        }
      }
    }
  }
  return token;
};

Tokenizer.prototype._is_content_unformatted = function(tag_name) {
  // void_elements have no content and so cannot have unformatted content
  // script and style tags should always be read as unformatted content
  // finally content_unformatted and unformatted element contents are unformatted
  return this._options.void_elements.indexOf(tag_name) === -1 &&
    (this._options.content_unformatted.indexOf(tag_name) !== -1 ||
      this._options.unformatted.indexOf(tag_name) !== -1);
};


Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) { // jshint unused:false
  var resulting_string = '';
  if (open_token && open_token.text[0] === '{') {
    resulting_string = this.__patterns.handlebars_raw_close.read();
  } else if (previous_token.type === TOKEN.TAG_CLOSE && (previous_token.opened.text[0] === '<')) {
    var tag_name = previous_token.opened.text.substr(1).toLowerCase();
    if (tag_name === 'script' || tag_name === 'style') {
      // Script and style tags are allowed to have comments wrapping their content
      // or just have regular content.
      var token = this._read_comment_or_cdata(c);
      if (token) {
        token.type = TOKEN.TEXT;
        return token;
      }
      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    } else if (this._is_content_unformatted(tag_name)) {
      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    }
  }

  if (resulting_string) {
    return this._create_token(TOKEN.TEXT, resulting_string);
  }

  return null;
};

Tokenizer.prototype._read_content_word = function(c) {
  var resulting_string = '';
  if (this._options.unformatted_content_delimiter) {
    if (c === this._options.unformatted_content_delimiter[0]) {
      resulting_string = this.__patterns.unformatted_content_delimiter.read();
    }
  }

  if (!resulting_string) {
    resulting_string = this.__patterns.word.read();
  }
  if (resulting_string) {
    return this._create_token(TOKEN.TEXT, resulting_string);
  }
};

module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;

},{"../core/directives":27,"../core/pattern":31,"../core/templatablepattern":32,"../core/tokenizer":34}],44:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var js_beautify = require('./javascript/index');
var css_beautify = require('./css/index');
var html_beautify = require('./html/index');

function style_html(html_source, options, js, css) {
  js = js || js_beautify;
  css = css || css_beautify;
  return html_beautify(html_source, options, js, css);
}
style_html.defaultOptions = html_beautify.defaultOptions;

module.exports.js = js_beautify;
module.exports.css = css_beautify;
module.exports.html = style_html;

},{"./css/index":38,"./html/index":41,"./javascript/index":47}],45:[function(require,module,exports){
/* jshint node: true, curly: false */
// Parts of this section of code is taken from acorn.
//
// Acorn was written by Marijn Haverbeke and released under an MIT
// license. The Unicode regexps (for identifiers and whitespace) were
// taken from [Esprima](http://esprima.org) by Ariya Hidayat.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/marijnh/acorn.git

// ## Character categories


'use strict';

// acorn used char codes to squeeze the last bit of performance out
// Beautifier is okay without that, so we're using regex
// permit # (23), $ (36), and @ (64). @ is used in ES7 decorators.
// 65 through 91 are uppercase letters.
// permit _ (95).
// 97 through 123 are lowercase letters.
var baseASCIIidentifierStartChars = "\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a";

// inside an identifier @ is not allowed but 0-9 are.
var baseASCIIidentifierChars = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a";

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
var nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";
var nonASCIIidentifierChars = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f";
//var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
//var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

var identifierStart = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + "])";
var identifierChars = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])*";

exports.identifier = new RegExp(identifierStart + identifierChars, 'g');
exports.identifierStart = new RegExp(identifierStart);
exports.identifierMatch = new RegExp("(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])+");

var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/; // jshint ignore:line

// Whether a single character denotes a newline.

exports.newline = /[\n\r\u2028\u2029]/;

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

// in javascript, these two differ
// in python they are the same, different methods are called on them
exports.lineBreak = new RegExp('\r\n|' + exports.newline.source);
exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');

},{}],46:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Output = require('../core/output').Output;
var Token = require('../core/token').Token;
var acorn = require('./acorn');
var Options = require('./options').Options;
var Tokenizer = require('./tokenizer').Tokenizer;
var line_starters = require('./tokenizer').line_starters;
var positionable_operators = require('./tokenizer').positionable_operators;
var TOKEN = require('./tokenizer').TOKEN;


function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}

function ltrim(s) {
  return s.replace(/^\s+/g, '');
}

function generateMapFromStrings(list) {
  var result = {};
  for (var x = 0; x < list.length; x++) {
    // make the mapped names underscored instead of dash
    result[list[x].replace(/-/g, '_')] = list[x];
  }
  return result;
}

function reserved_word(token, word) {
  return token && token.type === TOKEN.RESERVED && token.text === word;
}

function reserved_array(token, words) {
  return token && token.type === TOKEN.RESERVED && in_array(token.text, words);
}
// Unsure of what they mean, but they work. Worth cleaning up in future.
var special_words = ['case', 'return', 'do', 'if', 'throw', 'else', 'await', 'break', 'continue', 'async'];

var validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];

// Generate map from array
var OPERATOR_POSITION = generateMapFromStrings(validPositionValues);

var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];

var MODE = {
  BlockStatement: 'BlockStatement', // 'BLOCK'
  Statement: 'Statement', // 'STATEMENT'
  ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
  ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
  ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
  Conditional: 'Conditional', //'(COND-EXPRESSION)',
  Expression: 'Expression' //'(EXPRESSION)'
};

function remove_redundant_indentation(output, frame) {
  // This implementation is effective but has some issues:
  //     - can cause line wrap to happen too soon due to indent removal
  //           after wrap points are calculated
  // These issues are minor compared to ugly indentation.

  if (frame.multiline_frame ||
    frame.mode === MODE.ForInitializer ||
    frame.mode === MODE.Conditional) {
    return;
  }

  // remove one indent from each line inside this section
  output.remove_indent(frame.start_line_index);
}

// we could use just string.split, but
// IE doesn't like returning empty strings
function split_linebreaks(s) {
  //return s.split(/\x0d\x0a|\x0a/);

  s = s.replace(acorn.allLineBreaks, '\n');
  var out = [],
    idx = s.indexOf("\n");
  while (idx !== -1) {
    out.push(s.substring(0, idx));
    s = s.substring(idx + 1);
    idx = s.indexOf("\n");
  }
  if (s.length) {
    out.push(s);
  }
  return out;
}

function is_array(mode) {
  return mode === MODE.ArrayLiteral;
}

function is_expression(mode) {
  return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
}

function all_lines_start_with(lines, c) {
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i].trim();
    if (line.charAt(0) !== c) {
      return false;
    }
  }
  return true;
}

function each_line_matches_indent(lines, indent) {
  var i = 0,
    len = lines.length,
    line;
  for (; i < len; i++) {
    line = lines[i];
    // allow empty lines to pass through
    if (line && line.indexOf(indent) !== 0) {
      return false;
    }
  }
  return true;
}


function Beautifier(source_text, options) {
  options = options || {};
  this._source_text = source_text || '';

  this._output = null;
  this._tokens = null;
  this._last_last_text = null;
  this._flags = null;
  this._previous_flags = null;

  this._flag_store = null;
  this._options = new Options(options);
}

Beautifier.prototype.create_flags = function(flags_base, mode) {
  var next_indent_level = 0;
  if (flags_base) {
    next_indent_level = flags_base.indentation_level;
    if (!this._output.just_added_newline() &&
      flags_base.line_indent_level > next_indent_level) {
      next_indent_level = flags_base.line_indent_level;
    }
  }

  var next_flags = {
    mode: mode,
    parent: flags_base,
    last_token: flags_base ? flags_base.last_token : new Token(TOKEN.START_BLOCK, ''), // last token text
    last_word: flags_base ? flags_base.last_word : '', // last TOKEN.WORD passed
    declaration_statement: false,
    declaration_assignment: false,
    multiline_frame: false,
    inline_frame: false,
    if_block: false,
    else_block: false,
    do_block: false,
    do_while: false,
    import_block: false,
    in_case_statement: false, // switch(..){ INSIDE HERE }
    in_case: false, // we're on the exact line with "case 0:"
    case_body: false, // the indented case-action block
    indentation_level: next_indent_level,
    alignment: 0,
    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
    start_line_index: this._output.get_line_number(),
    ternary_depth: 0
  };
  return next_flags;
};

Beautifier.prototype._reset = function(source_text) {
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._last_last_text = ''; // pre-last token text
  this._output = new Output(this._options, baseIndentString);

  // If testing the ignore directive, start with output disable set to true
  this._output.raw = this._options.test_output_raw;


  // Stack of parsing/formatting states, including MODE.
  // We tokenize, parse, and output in an almost purely a forward-only stream of token input
  // and formatted output.  This makes the beautifier less accurate than full parsers
  // but also far more tolerant of syntax errors.
  //
  // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
  // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
  // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
  // most full parsers would die, but the beautifier gracefully falls back to
  // MODE.BlockStatement and continues on.
  this._flag_store = [];
  this.set_mode(MODE.BlockStatement);
  var tokenizer = new Tokenizer(source_text, this._options);
  this._tokens = tokenizer.tokenize();
  return source_text;
};

Beautifier.prototype.beautify = function() {
  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var sweet_code;
  var source_text = this._reset(this._source_text);

  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && acorn.lineBreak.test(source_text || '')) {
      eol = source_text.match(acorn.lineBreak)[0];
    }
  }

  var current_token = this._tokens.next();
  while (current_token) {
    this.handle_token(current_token);

    this._last_last_text = this._flags.last_token.text;
    this._flags.last_token = current_token;

    current_token = this._tokens.next();
  }

  sweet_code = this._output.get_code(eol);

  return sweet_code;
};

Beautifier.prototype.handle_token = function(current_token, preserve_statement_flags) {
  if (current_token.type === TOKEN.START_EXPR) {
    this.handle_start_expr(current_token);
  } else if (current_token.type === TOKEN.END_EXPR) {
    this.handle_end_expr(current_token);
  } else if (current_token.type === TOKEN.START_BLOCK) {
    this.handle_start_block(current_token);
  } else if (current_token.type === TOKEN.END_BLOCK) {
    this.handle_end_block(current_token);
  } else if (current_token.type === TOKEN.WORD) {
    this.handle_word(current_token);
  } else if (current_token.type === TOKEN.RESERVED) {
    this.handle_word(current_token);
  } else if (current_token.type === TOKEN.SEMICOLON) {
    this.handle_semicolon(current_token);
  } else if (current_token.type === TOKEN.STRING) {
    this.handle_string(current_token);
  } else if (current_token.type === TOKEN.EQUALS) {
    this.handle_equals(current_token);
  } else if (current_token.type === TOKEN.OPERATOR) {
    this.handle_operator(current_token);
  } else if (current_token.type === TOKEN.COMMA) {
    this.handle_comma(current_token);
  } else if (current_token.type === TOKEN.BLOCK_COMMENT) {
    this.handle_block_comment(current_token, preserve_statement_flags);
  } else if (current_token.type === TOKEN.COMMENT) {
    this.handle_comment(current_token, preserve_statement_flags);
  } else if (current_token.type === TOKEN.DOT) {
    this.handle_dot(current_token);
  } else if (current_token.type === TOKEN.EOF) {
    this.handle_eof(current_token);
  } else if (current_token.type === TOKEN.UNKNOWN) {
    this.handle_unknown(current_token, preserve_statement_flags);
  } else {
    this.handle_unknown(current_token, preserve_statement_flags);
  }
};

Beautifier.prototype.handle_whitespace_and_comments = function(current_token, preserve_statement_flags) {
  var newlines = current_token.newlines;
  var keep_whitespace = this._options.keep_array_indentation && is_array(this._flags.mode);

  if (current_token.comments_before) {
    var comment_token = current_token.comments_before.next();
    while (comment_token) {
      // The cleanest handling of inline comments is to treat them as though they aren't there.
      // Just continue formatting and the behavior should be logical.
      // Also ignore unknown tokens.  Again, this should result in better behavior.
      this.handle_whitespace_and_comments(comment_token, preserve_statement_flags);
      this.handle_token(comment_token, preserve_statement_flags);
      comment_token = current_token.comments_before.next();
    }
  }

  if (keep_whitespace) {
    for (var i = 0; i < newlines; i += 1) {
      this.print_newline(i > 0, preserve_statement_flags);
    }
  } else {
    if (this._options.max_preserve_newlines && newlines > this._options.max_preserve_newlines) {
      newlines = this._options.max_preserve_newlines;
    }

    if (this._options.preserve_newlines) {
      if (newlines > 1) {
        this.print_newline(false, preserve_statement_flags);
        for (var j = 1; j < newlines; j += 1) {
          this.print_newline(true, preserve_statement_flags);
        }
      }
    }
  }

};

var newline_restricted_tokens = ['async', 'break', 'continue', 'return', 'throw', 'yield'];

Beautifier.prototype.allow_wrap_or_preserved_newline = function(current_token, force_linewrap) {
  force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;

  // Never wrap the first token on a line
  if (this._output.just_added_newline()) {
    return;
  }

  var shouldPreserveOrForce = (this._options.preserve_newlines && current_token.newlines) || force_linewrap;
  var operatorLogicApplies = in_array(this._flags.last_token.text, positionable_operators) ||
    in_array(current_token.text, positionable_operators);

  if (operatorLogicApplies) {
    var shouldPrintOperatorNewline = (
        in_array(this._flags.last_token.text, positionable_operators) &&
        in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)
      ) ||
      in_array(current_token.text, positionable_operators);
    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
  }

  if (shouldPreserveOrForce) {
    this.print_newline(false, true);
  } else if (this._options.wrap_line_length) {
    if (reserved_array(this._flags.last_token, newline_restricted_tokens)) {
      // These tokens should never have a newline inserted
      // between them and the following expression.
      return;
    }
    this._output.set_wrap_point();
  }
};

Beautifier.prototype.print_newline = function(force_newline, preserve_statement_flags) {
  if (!preserve_statement_flags) {
    if (this._flags.last_token.text !== ';' && this._flags.last_token.text !== ',' && this._flags.last_token.text !== '=' && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === '--' || this._flags.last_token.text === '++')) {
      var next_token = this._tokens.peek();
      while (this._flags.mode === MODE.Statement &&
        !(this._flags.if_block && reserved_word(next_token, 'else')) &&
        !this._flags.do_block) {
        this.restore_mode();
      }
    }
  }

  if (this._output.add_new_line(force_newline)) {
    this._flags.multiline_frame = true;
  }
};

Beautifier.prototype.print_token_line_indentation = function(current_token) {
  if (this._output.just_added_newline()) {
    if (this._options.keep_array_indentation &&
      current_token.newlines &&
      (current_token.text === '[' || is_array(this._flags.mode))) {
      this._output.current_line.set_indent(-1);
      this._output.current_line.push(current_token.whitespace_before);
      this._output.space_before_token = false;
    } else if (this._output.set_indent(this._flags.indentation_level, this._flags.alignment)) {
      this._flags.line_indent_level = this._flags.indentation_level;
    }
  }
};

Beautifier.prototype.print_token = function(current_token) {
  if (this._output.raw) {
    this._output.add_raw_token(current_token);
    return;
  }

  if (this._options.comma_first && current_token.previous && current_token.previous.type === TOKEN.COMMA &&
    this._output.just_added_newline()) {
    if (this._output.previous_line.last() === ',') {
      var popped = this._output.previous_line.pop();
      // if the comma was already at the start of the line,
      // pull back onto that line and reprint the indentation
      if (this._output.previous_line.is_empty()) {
        this._output.previous_line.push(popped);
        this._output.trim(true);
        this._output.current_line.pop();
        this._output.trim();
      }

      // add the comma in front of the next token
      this.print_token_line_indentation(current_token);
      this._output.add_token(',');
      this._output.space_before_token = true;
    }
  }

  this.print_token_line_indentation(current_token);
  this._output.non_breaking_space = true;
  this._output.add_token(current_token.text);
  if (this._output.previous_token_wrapped) {
    this._flags.multiline_frame = true;
  }
};

Beautifier.prototype.indent = function() {
  this._flags.indentation_level += 1;
  this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
};

Beautifier.prototype.deindent = function() {
  if (this._flags.indentation_level > 0 &&
    ((!this._flags.parent) || this._flags.indentation_level > this._flags.parent.indentation_level)) {
    this._flags.indentation_level -= 1;
    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }
};

Beautifier.prototype.set_mode = function(mode) {
  if (this._flags) {
    this._flag_store.push(this._flags);
    this._previous_flags = this._flags;
  } else {
    this._previous_flags = this.create_flags(null, mode);
  }

  this._flags = this.create_flags(this._previous_flags, mode);
  this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
};


Beautifier.prototype.restore_mode = function() {
  if (this._flag_store.length > 0) {
    this._previous_flags = this._flags;
    this._flags = this._flag_store.pop();
    if (this._previous_flags.mode === MODE.Statement) {
      remove_redundant_indentation(this._output, this._previous_flags);
    }
    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }
};

Beautifier.prototype.start_of_object_property = function() {
  return this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement && (
    (this._flags.last_token.text === ':' && this._flags.ternary_depth === 0) || (reserved_array(this._flags.last_token, ['get', 'set'])));
};

Beautifier.prototype.start_of_statement = function(current_token) {
  var start = false;
  start = start || reserved_array(this._flags.last_token, ['var', 'let', 'const']) && current_token.type === TOKEN.WORD;
  start = start || reserved_word(this._flags.last_token, 'do');
  start = start || (!(this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement)) && reserved_array(this._flags.last_token, newline_restricted_tokens) && !current_token.newlines;
  start = start || reserved_word(this._flags.last_token, 'else') &&
    !(reserved_word(current_token, 'if') && !current_token.comments_before);
  start = start || (this._flags.last_token.type === TOKEN.END_EXPR && (this._previous_flags.mode === MODE.ForInitializer || this._previous_flags.mode === MODE.Conditional));
  start = start || (this._flags.last_token.type === TOKEN.WORD && this._flags.mode === MODE.BlockStatement &&
    !this._flags.in_case &&
    !(current_token.text === '--' || current_token.text === '++') &&
    this._last_last_text !== 'function' &&
    current_token.type !== TOKEN.WORD && current_token.type !== TOKEN.RESERVED);
  start = start || (this._flags.mode === MODE.ObjectLiteral && (
    (this._flags.last_token.text === ':' && this._flags.ternary_depth === 0) || reserved_array(this._flags.last_token, ['get', 'set'])));

  if (start) {
    this.set_mode(MODE.Statement);
    this.indent();

    this.handle_whitespace_and_comments(current_token, true);

    // Issue #276:
    // If starting a new statement with [if, for, while, do], push to a new line.
    // if (a) if (b) if(c) d(); else e(); else f();
    if (!this.start_of_object_property()) {
      this.allow_wrap_or_preserved_newline(current_token,
        reserved_array(current_token, ['do', 'for', 'if', 'while']));
    }
    return true;
  }
  return false;
};

Beautifier.prototype.handle_start_expr = function(current_token) {
  // The conditional starts the statement if appropriate.
  if (!this.start_of_statement(current_token)) {
    this.handle_whitespace_and_comments(current_token);
  }

  var next_mode = MODE.Expression;
  if (current_token.text === '[') {

    if (this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === ')') {
      // this is array index specifier, break immediately
      // a[x], fn()[x]
      if (reserved_array(this._flags.last_token, line_starters)) {
        this._output.space_before_token = true;
      }
      this.print_token(current_token);
      this.set_mode(next_mode);
      this.indent();
      if (this._options.space_in_paren) {
        this._output.space_before_token = true;
      }
      return;
    }

    next_mode = MODE.ArrayLiteral;
    if (is_array(this._flags.mode)) {
      if (this._flags.last_token.text === '[' ||
        (this._flags.last_token.text === ',' && (this._last_last_text === ']' || this._last_last_text === '}'))) {
        // ], [ goes to new line
        // }, [ goes to new line
        if (!this._options.keep_array_indentation) {
          this.print_newline();
        }
      }
    }

    if (!in_array(this._flags.last_token.type, [TOKEN.START_EXPR, TOKEN.END_EXPR, TOKEN.WORD, TOKEN.OPERATOR])) {
      this._output.space_before_token = true;
    }
  } else {
    if (this._flags.last_token.type === TOKEN.RESERVED) {
      if (this._flags.last_token.text === 'for') {
        this._output.space_before_token = this._options.space_before_conditional;
        next_mode = MODE.ForInitializer;
      } else if (in_array(this._flags.last_token.text, ['if', 'while'])) {
        this._output.space_before_token = this._options.space_before_conditional;
        next_mode = MODE.Conditional;
      } else if (in_array(this._flags.last_word, ['await', 'async'])) {
        // Should be a space between await and an IIFE, or async and an arrow function
        this._output.space_before_token = true;
      } else if (this._flags.last_token.text === 'import' && current_token.whitespace_before === '') {
        this._output.space_before_token = false;
      } else if (in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === 'catch') {
        this._output.space_before_token = true;
      }
    } else if (this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
      // Support of this kind of newline preservation.
      // a = (b &&
      //     (c || d));
      if (!this.start_of_object_property()) {
        this.allow_wrap_or_preserved_newline(current_token);
      }
    } else if (this._flags.last_token.type === TOKEN.WORD) {
      this._output.space_before_token = false;

      // function name() vs function name ()
      // function* name() vs function* name ()
      // async name() vs async name ()
      // In ES6, you can also define the method properties of an object
      // var obj = {a: function() {}}
      // It can be abbreviated
      // var obj = {a() {}}
      // var obj = { a() {}} vs var obj = { a () {}}
      // var obj = { * a() {}} vs var obj = { * a () {}}
      var peek_back_two = this._tokens.peek(-3);
      if (this._options.space_after_named_function && peek_back_two) {
        // peek starts at next character so -1 is current token
        var peek_back_three = this._tokens.peek(-4);
        if (reserved_array(peek_back_two, ['async', 'function']) ||
          (peek_back_two.text === '*' && reserved_array(peek_back_three, ['async', 'function']))) {
          this._output.space_before_token = true;
        } else if (this._flags.mode === MODE.ObjectLiteral) {
          if ((peek_back_two.text === '{' || peek_back_two.text === ',') ||
            (peek_back_two.text === '*' && (peek_back_three.text === '{' || peek_back_three.text === ','))) {
            this._output.space_before_token = true;
          }
        }
      }
    } else {
      // Support preserving wrapped arrow function expressions
      // a.b('c',
      //     () => d.e
      // )
      this.allow_wrap_or_preserved_newline(current_token);
    }

    // function() vs function ()
    // yield*() vs yield* ()
    // function*() vs function* ()
    if ((this._flags.last_token.type === TOKEN.RESERVED && (this._flags.last_word === 'function' || this._flags.last_word === 'typeof')) ||
      (this._flags.last_token.text === '*' &&
        (in_array(this._last_last_text, ['function', 'yield']) ||
          (this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, ['{', ',']))))) {
      this._output.space_before_token = this._options.space_after_anon_function;
    }
  }

  if (this._flags.last_token.text === ';' || this._flags.last_token.type === TOKEN.START_BLOCK) {
    this.print_newline();
  } else if (this._flags.last_token.type === TOKEN.END_EXPR || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.END_BLOCK || this._flags.last_token.text === '.' || this._flags.last_token.type === TOKEN.COMMA) {
    // do nothing on (( and )( and ][ and ]( and .(
    // TODO: Consider whether forcing this is required.  Review failing tests when removed.
    this.allow_wrap_or_preserved_newline(current_token, current_token.newlines);
  }

  this.print_token(current_token);
  this.set_mode(next_mode);
  if (this._options.space_in_paren) {
    this._output.space_before_token = true;
  }

  // In all cases, if we newline while inside an expression it should be indented.
  this.indent();
};

Beautifier.prototype.handle_end_expr = function(current_token) {
  // statements inside expressions are not valid syntax, but...
  // statements must all be closed when their container closes
  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }

  this.handle_whitespace_and_comments(current_token);

  if (this._flags.multiline_frame) {
    this.allow_wrap_or_preserved_newline(current_token,
      current_token.text === ']' && is_array(this._flags.mode) && !this._options.keep_array_indentation);
  }

  if (this._options.space_in_paren) {
    if (this._flags.last_token.type === TOKEN.START_EXPR && !this._options.space_in_empty_paren) {
      // () [] no inner space in empty parens like these, ever, ref #320
      this._output.trim();
      this._output.space_before_token = false;
    } else {
      this._output.space_before_token = true;
    }
  }
  this.deindent();
  this.print_token(current_token);
  this.restore_mode();

  remove_redundant_indentation(this._output, this._previous_flags);

  // do {} while () // no statement required after
  if (this._flags.do_while && this._previous_flags.mode === MODE.Conditional) {
    this._previous_flags.mode = MODE.Expression;
    this._flags.do_block = false;
    this._flags.do_while = false;

  }
};

Beautifier.prototype.handle_start_block = function(current_token) {
  this.handle_whitespace_and_comments(current_token);

  // Check if this is should be treated as a ObjectLiteral
  var next_token = this._tokens.peek();
  var second_token = this._tokens.peek(1);
  if (this._flags.last_word === 'switch' && this._flags.last_token.type === TOKEN.END_EXPR) {
    this.set_mode(MODE.BlockStatement);
    this._flags.in_case_statement = true;
  } else if (this._flags.case_body) {
    this.set_mode(MODE.BlockStatement);
  } else if (second_token && (
      (in_array(second_token.text, [':', ',']) && in_array(next_token.type, [TOKEN.STRING, TOKEN.WORD, TOKEN.RESERVED])) ||
      (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, [TOKEN.WORD, TOKEN.RESERVED]))
    )) {
    // We don't support TypeScript,but we didn't break it for a very long time.
    // We'll try to keep not breaking it.
    if (!in_array(this._last_last_text, ['class', 'interface'])) {
      this.set_mode(MODE.ObjectLiteral);
    } else {
      this.set_mode(MODE.BlockStatement);
    }
  } else if (this._flags.last_token.type === TOKEN.OPERATOR && this._flags.last_token.text === '=>') {
    // arrow function: (param1, paramN) => { statements }
    this.set_mode(MODE.BlockStatement);
  } else if (in_array(this._flags.last_token.type, [TOKEN.EQUALS, TOKEN.START_EXPR, TOKEN.COMMA, TOKEN.OPERATOR]) ||
    reserved_array(this._flags.last_token, ['return', 'throw', 'import', 'default'])
  ) {
    // Detecting shorthand function syntax is difficult by scanning forward,
    //     so check the surrounding context.
    // If the block is being returned, imported, export default, passed as arg,
    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
    this.set_mode(MODE.ObjectLiteral);
  } else {
    this.set_mode(MODE.BlockStatement);
  }

  var empty_braces = !next_token.comments_before && next_token.text === '}';
  var empty_anonymous_function = empty_braces && this._flags.last_word === 'function' &&
    this._flags.last_token.type === TOKEN.END_EXPR;

  if (this._options.brace_preserve_inline) // check for inline, set inline_frame if so
  {
    // search forward for a newline wanted inside this block
    var index = 0;
    var check_token = null;
    this._flags.inline_frame = true;
    do {
      index += 1;
      check_token = this._tokens.peek(index - 1);
      if (check_token.newlines) {
        this._flags.inline_frame = false;
        break;
      }
    } while (check_token.type !== TOKEN.EOF &&
      !(check_token.type === TOKEN.END_BLOCK && check_token.opened === current_token));
  }

  if ((this._options.brace_style === "expand" ||
      (this._options.brace_style === "none" && current_token.newlines)) &&
    !this._flags.inline_frame) {
    if (this._flags.last_token.type !== TOKEN.OPERATOR &&
      (empty_anonymous_function ||
        this._flags.last_token.type === TOKEN.EQUALS ||
        (reserved_array(this._flags.last_token, special_words) && this._flags.last_token.text !== 'else'))) {
      this._output.space_before_token = true;
    } else {
      this.print_newline(false, true);
    }
  } else { // collapse || inline_frame
    if (is_array(this._previous_flags.mode) && (this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.COMMA)) {
      if (this._flags.last_token.type === TOKEN.COMMA || this._options.space_in_paren) {
        this._output.space_before_token = true;
      }

      if (this._flags.last_token.type === TOKEN.COMMA || (this._flags.last_token.type === TOKEN.START_EXPR && this._flags.inline_frame)) {
        this.allow_wrap_or_preserved_newline(current_token);
        this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame;
        this._flags.multiline_frame = false;
      }
    }
    if (this._flags.last_token.type !== TOKEN.OPERATOR && this._flags.last_token.type !== TOKEN.START_EXPR) {
      if (this._flags.last_token.type === TOKEN.START_BLOCK && !this._flags.inline_frame) {
        this.print_newline();
      } else {
        this._output.space_before_token = true;
      }
    }
  }
  this.print_token(current_token);
  this.indent();

  // Except for specific cases, open braces are followed by a new line.
  if (!empty_braces && !(this._options.brace_preserve_inline && this._flags.inline_frame)) {
    this.print_newline();
  }
};

Beautifier.prototype.handle_end_block = function(current_token) {
  // statements must all be closed when their container closes
  this.handle_whitespace_and_comments(current_token);

  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }

  var empty_braces = this._flags.last_token.type === TOKEN.START_BLOCK;

  if (this._flags.inline_frame && !empty_braces) { // try inline_frame (only set if this._options.braces-preserve-inline) first
    this._output.space_before_token = true;
  } else if (this._options.brace_style === "expand") {
    if (!empty_braces) {
      this.print_newline();
    }
  } else {
    // skip {}
    if (!empty_braces) {
      if (is_array(this._flags.mode) && this._options.keep_array_indentation) {
        // we REALLY need a newline here, but newliner would skip that
        this._options.keep_array_indentation = false;
        this.print_newline();
        this._options.keep_array_indentation = true;

      } else {
        this.print_newline();
      }
    }
  }
  this.restore_mode();
  this.print_token(current_token);
};

Beautifier.prototype.handle_word = function(current_token) {
  if (current_token.type === TOKEN.RESERVED) {
    if (in_array(current_token.text, ['set', 'get']) && this._flags.mode !== MODE.ObjectLiteral) {
      current_token.type = TOKEN.WORD;
    } else if (current_token.text === 'import' && this._tokens.peek().text === '(') {
      current_token.type = TOKEN.WORD;
    } else if (in_array(current_token.text, ['as', 'from']) && !this._flags.import_block) {
      current_token.type = TOKEN.WORD;
    } else if (this._flags.mode === MODE.ObjectLiteral) {
      var next_token = this._tokens.peek();
      if (next_token.text === ':') {
        current_token.type = TOKEN.WORD;
      }
    }
  }

  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    if (reserved_array(this._flags.last_token, ['var', 'let', 'const']) && current_token.type === TOKEN.WORD) {
      this._flags.declaration_statement = true;
    }
  } else if (current_token.newlines && !is_expression(this._flags.mode) &&
    (this._flags.last_token.type !== TOKEN.OPERATOR || (this._flags.last_token.text === '--' || this._flags.last_token.text === '++')) &&
    this._flags.last_token.type !== TOKEN.EQUALS &&
    (this._options.preserve_newlines || !reserved_array(this._flags.last_token, ['var', 'let', 'const', 'set', 'get']))) {
    this.handle_whitespace_and_comments(current_token);
    this.print_newline();
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  if (this._flags.do_block && !this._flags.do_while) {
    if (reserved_word(current_token, 'while')) {
      // do {} ## while ()
      this._output.space_before_token = true;
      this.print_token(current_token);
      this._output.space_before_token = true;
      this._flags.do_while = true;
      return;
    } else {
      // do {} should always have while as the next word.
      // if we don't see the expected while, recover
      this.print_newline();
      this._flags.do_block = false;
    }
  }

  // if may be followed by else, or not
  // Bare/inline ifs are tricky
  // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
  if (this._flags.if_block) {
    if (!this._flags.else_block && reserved_word(current_token, 'else')) {
      this._flags.else_block = true;
    } else {
      while (this._flags.mode === MODE.Statement) {
        this.restore_mode();
      }
      this._flags.if_block = false;
      this._flags.else_block = false;
    }
  }

  if (this._flags.in_case_statement && reserved_array(current_token, ['case', 'default'])) {
    this.print_newline();
    if (this._flags.last_token.type !== TOKEN.END_BLOCK && (this._flags.case_body || this._options.jslint_happy)) {
      // switch cases following one another
      this.deindent();
    }
    this._flags.case_body = false;

    this.print_token(current_token);
    this._flags.in_case = true;
    return;
  }

  if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
    if (!this.start_of_object_property()) {
      this.allow_wrap_or_preserved_newline(current_token);
    }
  }

  if (reserved_word(current_token, 'function')) {
    if (in_array(this._flags.last_token.text, ['}', ';']) ||
      (this._output.just_added_newline() && !(in_array(this._flags.last_token.text, ['(', '[', '{', ':', '=', ',']) || this._flags.last_token.type === TOKEN.OPERATOR))) {
      // make sure there is a nice clean space of at least one blank line
      // before a new function definition
      if (!this._output.just_added_blankline() && !current_token.comments_before) {
        this.print_newline();
        this.print_newline(true);
      }
    }
    if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD) {
      if (reserved_array(this._flags.last_token, ['get', 'set', 'new', 'export']) ||
        reserved_array(this._flags.last_token, newline_restricted_tokens)) {
        this._output.space_before_token = true;
      } else if (reserved_word(this._flags.last_token, 'default') && this._last_last_text === 'export') {
        this._output.space_before_token = true;
      } else if (this._flags.last_token.text === 'declare') {
        // accomodates Typescript declare function formatting
        this._output.space_before_token = true;
      } else {
        this.print_newline();
      }
    } else if (this._flags.last_token.type === TOKEN.OPERATOR || this._flags.last_token.text === '=') {
      // foo = function
      this._output.space_before_token = true;
    } else if (!this._flags.multiline_frame && (is_expression(this._flags.mode) || is_array(this._flags.mode))) {
      // (function
    } else {
      this.print_newline();
    }

    this.print_token(current_token);
    this._flags.last_word = current_token.text;
    return;
  }

  var prefix = 'NONE';

  if (this._flags.last_token.type === TOKEN.END_BLOCK) {

    if (this._previous_flags.inline_frame) {
      prefix = 'SPACE';
    } else if (!reserved_array(current_token, ['else', 'catch', 'finally', 'from'])) {
      prefix = 'NEWLINE';
    } else {
      if (this._options.brace_style === "expand" ||
        this._options.brace_style === "end-expand" ||
        (this._options.brace_style === "none" && current_token.newlines)) {
        prefix = 'NEWLINE';
      } else {
        prefix = 'SPACE';
        this._output.space_before_token = true;
      }
    }
  } else if (this._flags.last_token.type === TOKEN.SEMICOLON && this._flags.mode === MODE.BlockStatement) {
    // TODO: Should this be for STATEMENT as well?
    prefix = 'NEWLINE';
  } else if (this._flags.last_token.type === TOKEN.SEMICOLON && is_expression(this._flags.mode)) {
    prefix = 'SPACE';
  } else if (this._flags.last_token.type === TOKEN.STRING) {
    prefix = 'NEWLINE';
  } else if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD ||
    (this._flags.last_token.text === '*' &&
      (in_array(this._last_last_text, ['function', 'yield']) ||
        (this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, ['{', ',']))))) {
    prefix = 'SPACE';
  } else if (this._flags.last_token.type === TOKEN.START_BLOCK) {
    if (this._flags.inline_frame) {
      prefix = 'SPACE';
    } else {
      prefix = 'NEWLINE';
    }
  } else if (this._flags.last_token.type === TOKEN.END_EXPR) {
    this._output.space_before_token = true;
    prefix = 'NEWLINE';
  }

  if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== ')') {
    if (this._flags.inline_frame || this._flags.last_token.text === 'else' || this._flags.last_token.text === 'export') {
      prefix = 'SPACE';
    } else {
      prefix = 'NEWLINE';
    }

  }

  if (reserved_array(current_token, ['else', 'catch', 'finally'])) {
    if ((!(this._flags.last_token.type === TOKEN.END_BLOCK && this._previous_flags.mode === MODE.BlockStatement) ||
        this._options.brace_style === "expand" ||
        this._options.brace_style === "end-expand" ||
        (this._options.brace_style === "none" && current_token.newlines)) &&
      !this._flags.inline_frame) {
      this.print_newline();
    } else {
      this._output.trim(true);
      var line = this._output.current_line;
      // If we trimmed and there's something other than a close block before us
      // put a newline back in.  Handles '} // comment' scenario.
      if (line.last() !== '}') {
        this.print_newline();
      }
      this._output.space_before_token = true;
    }
  } else if (prefix === 'NEWLINE') {
    if (reserved_array(this._flags.last_token, special_words)) {
      // no newline between 'return nnn'
      this._output.space_before_token = true;
    } else if (this._flags.last_token.text === 'declare' && reserved_array(current_token, ['var', 'let', 'const'])) {
      // accomodates Typescript declare formatting
      this._output.space_before_token = true;
    } else if (this._flags.last_token.type !== TOKEN.END_EXPR) {
      if ((this._flags.last_token.type !== TOKEN.START_EXPR || !reserved_array(current_token, ['var', 'let', 'const'])) && this._flags.last_token.text !== ':') {
        // no need to force newline on 'var': for (var x = 0...)
        if (reserved_word(current_token, 'if') && reserved_word(current_token.previous, 'else')) {
          // no newline for } else if {
          this._output.space_before_token = true;
        } else {
          this.print_newline();
        }
      }
    } else if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== ')') {
      this.print_newline();
    }
  } else if (this._flags.multiline_frame && is_array(this._flags.mode) && this._flags.last_token.text === ',' && this._last_last_text === '}') {
    this.print_newline(); // }, in lists get a newline treatment
  } else if (prefix === 'SPACE') {
    this._output.space_before_token = true;
  }
  if (current_token.previous && (current_token.previous.type === TOKEN.WORD || current_token.previous.type === TOKEN.RESERVED)) {
    this._output.space_before_token = true;
  }
  this.print_token(current_token);
  this._flags.last_word = current_token.text;

  if (current_token.type === TOKEN.RESERVED) {
    if (current_token.text === 'do') {
      this._flags.do_block = true;
    } else if (current_token.text === 'if') {
      this._flags.if_block = true;
    } else if (current_token.text === 'import') {
      this._flags.import_block = true;
    } else if (this._flags.import_block && reserved_word(current_token, 'from')) {
      this._flags.import_block = false;
    }
  }
};

Beautifier.prototype.handle_semicolon = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    // Semicolon can be the start (and end) of a statement
    this._output.space_before_token = false;
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  var next_token = this._tokens.peek();
  while (this._flags.mode === MODE.Statement &&
    !(this._flags.if_block && reserved_word(next_token, 'else')) &&
    !this._flags.do_block) {
    this.restore_mode();
  }

  // hacky but effective for the moment
  if (this._flags.import_block) {
    this._flags.import_block = false;
  }
  this.print_token(current_token);
};

Beautifier.prototype.handle_string = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    // One difference - strings want at least a space before
    this._output.space_before_token = true;
  } else {
    this.handle_whitespace_and_comments(current_token);
    if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.inline_frame) {
      this._output.space_before_token = true;
    } else if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
      if (!this.start_of_object_property()) {
        this.allow_wrap_or_preserved_newline(current_token);
      }
    } else {
      this.print_newline();
    }
  }
  this.print_token(current_token);
};

Beautifier.prototype.handle_equals = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  if (this._flags.declaration_statement) {
    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
    this._flags.declaration_assignment = true;
  }
  this._output.space_before_token = true;
  this.print_token(current_token);
  this._output.space_before_token = true;
};

Beautifier.prototype.handle_comma = function(current_token) {
  this.handle_whitespace_and_comments(current_token, true);

  this.print_token(current_token);
  this._output.space_before_token = true;
  if (this._flags.declaration_statement) {
    if (is_expression(this._flags.parent.mode)) {
      // do not break on comma, for(var a = 1, b = 2)
      this._flags.declaration_assignment = false;
    }

    if (this._flags.declaration_assignment) {
      this._flags.declaration_assignment = false;
      this.print_newline(false, true);
    } else if (this._options.comma_first) {
      // for comma-first, we want to allow a newline before the comma
      // to turn into a newline after the comma, which we will fixup later
      this.allow_wrap_or_preserved_newline(current_token);
    }
  } else if (this._flags.mode === MODE.ObjectLiteral ||
    (this._flags.mode === MODE.Statement && this._flags.parent.mode === MODE.ObjectLiteral)) {
    if (this._flags.mode === MODE.Statement) {
      this.restore_mode();
    }

    if (!this._flags.inline_frame) {
      this.print_newline();
    }
  } else if (this._options.comma_first) {
    // EXPR or DO_BLOCK
    // for comma-first, we want to allow a newline before the comma
    // to turn into a newline after the comma, which we will fixup later
    this.allow_wrap_or_preserved_newline(current_token);
  }
};

Beautifier.prototype.handle_operator = function(current_token) {
  var isGeneratorAsterisk = current_token.text === '*' &&
    (reserved_array(this._flags.last_token, ['function', 'yield']) ||
      (in_array(this._flags.last_token.type, [TOKEN.START_BLOCK, TOKEN.COMMA, TOKEN.END_BLOCK, TOKEN.SEMICOLON]))
    );
  var isUnary = in_array(current_token.text, ['-', '+']) && (
    in_array(this._flags.last_token.type, [TOKEN.START_BLOCK, TOKEN.START_EXPR, TOKEN.EQUALS, TOKEN.OPERATOR]) ||
    in_array(this._flags.last_token.text, line_starters) ||
    this._flags.last_token.text === ','
  );

  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
  } else {
    var preserve_statement_flags = !isGeneratorAsterisk;
    this.handle_whitespace_and_comments(current_token, preserve_statement_flags);
  }

  if (reserved_array(this._flags.last_token, special_words)) {
    // "return" had a special handling in TK_WORD. Now we need to return the favor
    this._output.space_before_token = true;
    this.print_token(current_token);
    return;
  }

  // hack for actionscript's import .*;
  if (current_token.text === '*' && this._flags.last_token.type === TOKEN.DOT) {
    this.print_token(current_token);
    return;
  }

  if (current_token.text === '::') {
    // no spaces around exotic namespacing syntax operator
    this.print_token(current_token);
    return;
  }

  // Allow line wrapping between operators when operator_position is
  //   set to before or preserve
  if (this._flags.last_token.type === TOKEN.OPERATOR && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
    this.allow_wrap_or_preserved_newline(current_token);
  }

  if (current_token.text === ':' && this._flags.in_case) {
    this.print_token(current_token);

    this._flags.in_case = false;
    this._flags.case_body = true;
    if (this._tokens.peek().type !== TOKEN.START_BLOCK) {
      this.indent();
      this.print_newline();
    } else {
      this._output.space_before_token = true;
    }
    return;
  }

  var space_before = true;
  var space_after = true;
  var in_ternary = false;
  if (current_token.text === ':') {
    if (this._flags.ternary_depth === 0) {
      // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
      space_before = false;
    } else {
      this._flags.ternary_depth -= 1;
      in_ternary = true;
    }
  } else if (current_token.text === '?') {
    this._flags.ternary_depth += 1;
  }

  // let's handle the operator_position option prior to any conflicting logic
  if (!isUnary && !isGeneratorAsterisk && this._options.preserve_newlines && in_array(current_token.text, positionable_operators)) {
    var isColon = current_token.text === ':';
    var isTernaryColon = (isColon && in_ternary);
    var isOtherColon = (isColon && !in_ternary);

    switch (this._options.operator_position) {
      case OPERATOR_POSITION.before_newline:
        // if the current token is : and it's not a ternary statement then we set space_before to false
        this._output.space_before_token = !isOtherColon;

        this.print_token(current_token);

        if (!isColon || isTernaryColon) {
          this.allow_wrap_or_preserved_newline(current_token);
        }

        this._output.space_before_token = true;
        return;

      case OPERATOR_POSITION.after_newline:
        // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
        //   then print a newline.

        this._output.space_before_token = true;

        if (!isColon || isTernaryColon) {
          if (this._tokens.peek().newlines) {
            this.print_newline(false, true);
          } else {
            this.allow_wrap_or_preserved_newline(current_token);
          }
        } else {
          this._output.space_before_token = false;
        }

        this.print_token(current_token);

        this._output.space_before_token = true;
        return;

      case OPERATOR_POSITION.preserve_newline:
        if (!isOtherColon) {
          this.allow_wrap_or_preserved_newline(current_token);
        }

        // if we just added a newline, or the current token is : and it's not a ternary statement,
        //   then we set space_before to false
        space_before = !(this._output.just_added_newline() || isOtherColon);

        this._output.space_before_token = space_before;
        this.print_token(current_token);
        this._output.space_before_token = true;
        return;
    }
  }

  if (isGeneratorAsterisk) {
    this.allow_wrap_or_preserved_newline(current_token);
    space_before = false;
    var next_token = this._tokens.peek();
    space_after = next_token && in_array(next_token.type, [TOKEN.WORD, TOKEN.RESERVED]);
  } else if (current_token.text === '...') {
    this.allow_wrap_or_preserved_newline(current_token);
    space_before = this._flags.last_token.type === TOKEN.START_BLOCK;
    space_after = false;
  } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {
    // unary operators (and binary +/- pretending to be unary) special cases
    if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR) {
      this.allow_wrap_or_preserved_newline(current_token);
    }

    space_before = false;
    space_after = false;

    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
    // if there is a newline between -- or ++ and anything else we should preserve it.
    if (current_token.newlines && (current_token.text === '--' || current_token.text === '++')) {
      this.print_newline(false, true);
    }

    if (this._flags.last_token.text === ';' && is_expression(this._flags.mode)) {
      // for (;; ++i)
      //        ^^^
      space_before = true;
    }

    if (this._flags.last_token.type === TOKEN.RESERVED) {
      space_before = true;
    } else if (this._flags.last_token.type === TOKEN.END_EXPR) {
      space_before = !(this._flags.last_token.text === ']' && (current_token.text === '--' || current_token.text === '++'));
    } else if (this._flags.last_token.type === TOKEN.OPERATOR) {
      // a++ + ++b;
      // a - -b
      space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(this._flags.last_token.text, ['--', '-', '++', '+']);
      // + and - are not unary when preceeded by -- or ++ operator
      // a-- + b
      // a * +b
      // a - -b
      if (in_array(current_token.text, ['+', '-']) && in_array(this._flags.last_token.text, ['--', '++'])) {
        space_after = true;
      }
    }


    if (((this._flags.mode === MODE.BlockStatement && !this._flags.inline_frame) || this._flags.mode === MODE.Statement) &&
      (this._flags.last_token.text === '{' || this._flags.last_token.text === ';')) {
      // { foo; --i }
      // foo(); --bar;
      this.print_newline();
    }
  }

  this._output.space_before_token = this._output.space_before_token || space_before;
  this.print_token(current_token);
  this._output.space_before_token = space_after;
};

Beautifier.prototype.handle_block_comment = function(current_token, preserve_statement_flags) {
  if (this._output.raw) {
    this._output.add_raw_token(current_token);
    if (current_token.directives && current_token.directives.preserve === 'end') {
      // If we're testing the raw output behavior, do not allow a directive to turn it off.
      this._output.raw = this._options.test_output_raw;
    }
    return;
  }

  if (current_token.directives) {
    this.print_newline(false, preserve_statement_flags);
    this.print_token(current_token);
    if (current_token.directives.preserve === 'start') {
      this._output.raw = true;
    }
    this.print_newline(false, true);
    return;
  }

  // inline block
  if (!acorn.newline.test(current_token.text) && !current_token.newlines) {
    this._output.space_before_token = true;
    this.print_token(current_token);
    this._output.space_before_token = true;
    return;
  } else {
    this.print_block_commment(current_token, preserve_statement_flags);
  }
};

Beautifier.prototype.print_block_commment = function(current_token, preserve_statement_flags) {
  var lines = split_linebreaks(current_token.text);
  var j; // iterator for this case
  var javadoc = false;
  var starless = false;
  var lastIndent = current_token.whitespace_before;
  var lastIndentLength = lastIndent.length;

  // block comment starts with a new line
  this.print_newline(false, preserve_statement_flags);

  // first line always indented
  this.print_token_line_indentation(current_token);
  this._output.add_token(lines[0]);
  this.print_newline(false, preserve_statement_flags);


  if (lines.length > 1) {
    lines = lines.slice(1);
    javadoc = all_lines_start_with(lines, '*');
    starless = each_line_matches_indent(lines, lastIndent);

    if (javadoc) {
      this._flags.alignment = 1;
    }

    for (j = 0; j < lines.length; j++) {
      if (javadoc) {
        // javadoc: reformat and re-indent
        this.print_token_line_indentation(current_token);
        this._output.add_token(ltrim(lines[j]));
      } else if (starless && lines[j]) {
        // starless: re-indent non-empty content, avoiding trim
        this.print_token_line_indentation(current_token);
        this._output.add_token(lines[j].substring(lastIndentLength));
      } else {
        // normal comments output raw
        this._output.current_line.set_indent(-1);
        this._output.add_token(lines[j]);
      }

      // for comments on their own line or  more than one line, make sure there's a new line after
      this.print_newline(false, preserve_statement_flags);
    }

    this._flags.alignment = 0;
  }
};


Beautifier.prototype.handle_comment = function(current_token, preserve_statement_flags) {
  if (current_token.newlines) {
    this.print_newline(false, preserve_statement_flags);
  } else {
    this._output.trim(true);
  }

  this._output.space_before_token = true;
  this.print_token(current_token);
  this.print_newline(false, preserve_statement_flags);
};

Beautifier.prototype.handle_dot = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
  } else {
    this.handle_whitespace_and_comments(current_token, true);
  }

  if (reserved_array(this._flags.last_token, special_words)) {
    this._output.space_before_token = false;
  } else {
    // allow preserved newlines before dots in general
    // force newlines on dots after close paren when break_chained - for bar().baz()
    this.allow_wrap_or_preserved_newline(current_token,
      this._flags.last_token.text === ')' && this._options.break_chained_methods);
  }

  // Only unindent chained method dot if this dot starts a new line.
  // Otherwise the automatic extra indentation removal will handle the over indent
  if (this._options.unindent_chained_methods && this._output.just_added_newline()) {
    this.deindent();
  }

  this.print_token(current_token);
};

Beautifier.prototype.handle_unknown = function(current_token, preserve_statement_flags) {
  this.print_token(current_token);

  if (current_token.text[current_token.text.length - 1] === '\n') {
    this.print_newline(false, preserve_statement_flags);
  }
};

Beautifier.prototype.handle_eof = function(current_token) {
  // Unwind any open statements
  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }
  this.handle_whitespace_and_comments(current_token);
};

module.exports.Beautifier = Beautifier;

},{"../core/output":30,"../core/token":33,"./acorn":45,"./options":48,"./tokenizer":49}],47:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Beautifier = require('./beautifier').Beautifier,
  Options = require('./options').Options;

function js_beautify(js_source_text, options) {
  var beautifier = new Beautifier(js_source_text, options);
  return beautifier.beautify();
}

module.exports = js_beautify;
module.exports.defaultOptions = function() {
  return new Options();
};

},{"./beautifier":46,"./options":48}],48:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseOptions = require('../core/options').Options;

var validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];

function Options(options) {
  BaseOptions.call(this, options, 'js');

  // compatibility, re
  var raw_brace_style = this.raw_options.brace_style || null;
  if (raw_brace_style === "expand-strict") { //graceful handling of deprecated option
    this.raw_options.brace_style = "expand";
  } else if (raw_brace_style === "collapse-preserve-inline") { //graceful handling of deprecated option
    this.raw_options.brace_style = "collapse,preserve-inline";
  } else if (this.raw_options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
    this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse";
    // } else if (!raw_brace_style) { //Nothing exists to set it
    //   raw_brace_style = "collapse";
  }

  //preserve-inline in delimited string will trigger brace_preserve_inline, everything
  //else is considered a brace_style and the last one only will have an effect

  var brace_style_split = this._get_selection_list('brace_style', ['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']);

  this.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option
  this.brace_style = "collapse";

  for (var bs = 0; bs < brace_style_split.length; bs++) {
    if (brace_style_split[bs] === "preserve-inline") {
      this.brace_preserve_inline = true;
    } else {
      this.brace_style = brace_style_split[bs];
    }
  }

  this.unindent_chained_methods = this._get_boolean('unindent_chained_methods');
  this.break_chained_methods = this._get_boolean('break_chained_methods');
  this.space_in_paren = this._get_boolean('space_in_paren');
  this.space_in_empty_paren = this._get_boolean('space_in_empty_paren');
  this.jslint_happy = this._get_boolean('jslint_happy');
  this.space_after_anon_function = this._get_boolean('space_after_anon_function');
  this.space_after_named_function = this._get_boolean('space_after_named_function');
  this.keep_array_indentation = this._get_boolean('keep_array_indentation');
  this.space_before_conditional = this._get_boolean('space_before_conditional', true);
  this.unescape_strings = this._get_boolean('unescape_strings');
  this.e4x = this._get_boolean('e4x');
  this.comma_first = this._get_boolean('comma_first');
  this.operator_position = this._get_selection('operator_position', validPositionValues);

  // For testing of beautify preserve:start directive
  this.test_output_raw = this._get_boolean('test_output_raw');

  // force this._options.space_after_anon_function to true if this._options.jslint_happy
  if (this.jslint_happy) {
    this.space_after_anon_function = true;
  }

}
Options.prototype = new BaseOptions();



module.exports.Options = Options;

},{"../core/options":29}],49:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var InputScanner = require('../core/inputscanner').InputScanner;
var BaseTokenizer = require('../core/tokenizer').Tokenizer;
var BASETOKEN = require('../core/tokenizer').TOKEN;
var Directives = require('../core/directives').Directives;
var acorn = require('./acorn');
var Pattern = require('../core/pattern').Pattern;
var TemplatablePattern = require('../core/templatablepattern').TemplatablePattern;


function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}


var TOKEN = {
  START_EXPR: 'TK_START_EXPR',
  END_EXPR: 'TK_END_EXPR',
  START_BLOCK: 'TK_START_BLOCK',
  END_BLOCK: 'TK_END_BLOCK',
  WORD: 'TK_WORD',
  RESERVED: 'TK_RESERVED',
  SEMICOLON: 'TK_SEMICOLON',
  STRING: 'TK_STRING',
  EQUALS: 'TK_EQUALS',
  OPERATOR: 'TK_OPERATOR',
  COMMA: 'TK_COMMA',
  BLOCK_COMMENT: 'TK_BLOCK_COMMENT',
  COMMENT: 'TK_COMMENT',
  DOT: 'TK_DOT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN.START,
  RAW: BASETOKEN.RAW,
  EOF: BASETOKEN.EOF
};


var directives_core = new Directives(/\/\*/, /\*\//);

var number_pattern = /0[xX][0123456789abcdefABCDEF]*|0[oO][01234567]*|0[bB][01]*|\d+n|(?:\.\d+|\d+\.?\d*)(?:[eE][+-]?\d+)?/;

var digit = /[0-9]/;

// Dot "." must be distinguished from "..." and decimal
var dot_pattern = /[^\d\.]/;

var positionable_operators = (
  ">>> === !== " +
  "<< && >= ** != == <= >> || " +
  "< / - + > : & % ? ^ | *").split(' ');

// IMPORTANT: this must be sorted longest to shortest or tokenizing many not work.
// Also, you must update possitionable operators separately from punct
var punct =
  ">>>= " +
  "... >>= <<= === >>> !== **= " +
  "=> ^= :: /= << <= == && -= >= >> != -- += ** || ++ %= &= *= |= " +
  "= ! ? > < : / ^ - + * & % ~ |";

punct = punct.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&");
punct = punct.replace(/ /g, '|');

var punct_pattern = new RegExp(punct);

// words which should always start on new line.
var line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
var reserved_words = line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);
var reserved_word_pattern = new RegExp('^(?:' + reserved_words.join('|') + ')$');

// var template_pattern = /(?:(?:<\?php|<\?=)[\s\S]*?\?>)|(?:<%[\s\S]*?%>)/g;

var in_html_comment;

var Tokenizer = function(input_string, options) {
  BaseTokenizer.call(this, input_string, options);

  this._patterns.whitespace = this._patterns.whitespace.matching(
    /\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source,
    /\u2028\u2029/.source);

  var pattern_reader = new Pattern(this._input);
  var templatable = new TemplatablePattern(this._input)
    .read_options(this._options);

  this.__patterns = {
    template: templatable,
    identifier: templatable.starting_with(acorn.identifier).matching(acorn.identifierMatch),
    number: pattern_reader.matching(number_pattern),
    punct: pattern_reader.matching(punct_pattern),
    // comment ends just before nearest linefeed or end of file
    comment: pattern_reader.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),
    //  /* ... */ comment ends with nearest */ or end of file
    block_comment: pattern_reader.starting_with(/\/\*/).until_after(/\*\//),
    html_comment_start: pattern_reader.matching(/<!--/),
    html_comment_end: pattern_reader.matching(/-->/),
    include: pattern_reader.starting_with(/#include/).until_after(acorn.lineBreak),
    shebang: pattern_reader.starting_with(/#!/).until_after(acorn.lineBreak),
    xml: pattern_reader.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/),
    single_quote: templatable.until(/['\\\n\r\u2028\u2029]/),
    double_quote: templatable.until(/["\\\n\r\u2028\u2029]/),
    template_text: templatable.until(/[`\\$]/),
    template_expression: templatable.until(/[`}\\]/)
  };

};
Tokenizer.prototype = new BaseTokenizer();

Tokenizer.prototype._is_comment = function(current_token) {
  return current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.BLOCK_COMMENT || current_token.type === TOKEN.UNKNOWN;
};

Tokenizer.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN.START_BLOCK || current_token.type === TOKEN.START_EXPR;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) {
  return (current_token.type === TOKEN.END_BLOCK || current_token.type === TOKEN.END_EXPR) &&
    (open_token && (
      (current_token.text === ']' && open_token.text === '[') ||
      (current_token.text === ')' && open_token.text === '(') ||
      (current_token.text === '}' && open_token.text === '{')));
};

Tokenizer.prototype._reset = function() {
  in_html_comment = false;
};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN.EOF, '');
  }

  token = token || this._read_non_javascript(c);
  token = token || this._read_string(c);
  token = token || this._read_word(previous_token);
  token = token || this._read_singles(c);
  token = token || this._read_comment(c);
  token = token || this._read_regexp(c, previous_token);
  token = token || this._read_xml(c, previous_token);
  token = token || this._read_punctuation();
  token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());

  return token;
};

Tokenizer.prototype._read_word = function(previous_token) {
  var resulting_string;
  resulting_string = this.__patterns.identifier.read();
  if (resulting_string !== '') {
    resulting_string = resulting_string.replace(acorn.allLineBreaks, '\n');
    if (!(previous_token.type === TOKEN.DOT ||
        (previous_token.type === TOKEN.RESERVED && (previous_token.text === 'set' || previous_token.text === 'get'))) &&
      reserved_word_pattern.test(resulting_string)) {
      if (resulting_string === 'in' || resulting_string === 'of') { // hack for 'in' and 'of' operators
        return this._create_token(TOKEN.OPERATOR, resulting_string);
      }
      return this._create_token(TOKEN.RESERVED, resulting_string);
    }
    return this._create_token(TOKEN.WORD, resulting_string);
  }

  resulting_string = this.__patterns.number.read();
  if (resulting_string !== '') {
    return this._create_token(TOKEN.WORD, resulting_string);
  }
};

Tokenizer.prototype._read_singles = function(c) {
  var token = null;
  if (c === '(' || c === '[') {
    token = this._create_token(TOKEN.START_EXPR, c);
  } else if (c === ')' || c === ']') {
    token = this._create_token(TOKEN.END_EXPR, c);
  } else if (c === '{') {
    token = this._create_token(TOKEN.START_BLOCK, c);
  } else if (c === '}') {
    token = this._create_token(TOKEN.END_BLOCK, c);
  } else if (c === ';') {
    token = this._create_token(TOKEN.SEMICOLON, c);
  } else if (c === '.' && dot_pattern.test(this._input.peek(1))) {
    token = this._create_token(TOKEN.DOT, c);
  } else if (c === ',') {
    token = this._create_token(TOKEN.COMMA, c);
  }

  if (token) {
    this._input.next();
  }
  return token;
};

Tokenizer.prototype._read_punctuation = function() {
  var resulting_string = this.__patterns.punct.read();

  if (resulting_string !== '') {
    if (resulting_string === '=') {
      return this._create_token(TOKEN.EQUALS, resulting_string);
    } else {
      return this._create_token(TOKEN.OPERATOR, resulting_string);
    }
  }
};

Tokenizer.prototype._read_non_javascript = function(c) {
  var resulting_string = '';

  if (c === '#') {
    if (this._is_first_token()) {
      resulting_string = this.__patterns.shebang.read();

      if (resulting_string) {
        return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + '\n');
      }
    }

    // handles extendscript #includes
    resulting_string = this.__patterns.include.read();

    if (resulting_string) {
      return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + '\n');
    }

    c = this._input.next();

    // Spidermonkey-specific sharp variables for circular references. Considered obsolete.
    var sharp = '#';
    if (this._input.hasNext() && this._input.testChar(digit)) {
      do {
        c = this._input.next();
        sharp += c;
      } while (this._input.hasNext() && c !== '#' && c !== '=');
      if (c === '#') {
        //
      } else if (this._input.peek() === '[' && this._input.peek(1) === ']') {
        sharp += '[]';
        this._input.next();
        this._input.next();
      } else if (this._input.peek() === '{' && this._input.peek(1) === '}') {
        sharp += '{}';
        this._input.next();
        this._input.next();
      }
      return this._create_token(TOKEN.WORD, sharp);
    }

    this._input.back();

  } else if (c === '<' && this._is_first_token()) {
    resulting_string = this.__patterns.html_comment_start.read();
    if (resulting_string) {
      while (this._input.hasNext() && !this._input.testChar(acorn.newline)) {
        resulting_string += this._input.next();
      }
      in_html_comment = true;
      return this._create_token(TOKEN.COMMENT, resulting_string);
    }
  } else if (in_html_comment && c === '-') {
    resulting_string = this.__patterns.html_comment_end.read();
    if (resulting_string) {
      in_html_comment = false;
      return this._create_token(TOKEN.COMMENT, resulting_string);
    }
  }

  return null;
};

Tokenizer.prototype._read_comment = function(c) {
  var token = null;
  if (c === '/') {
    var comment = '';
    if (this._input.peek(1) === '*') {
      // peek for comment /* ... */
      comment = this.__patterns.block_comment.read();
      var directives = directives_core.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core.readIgnored(this._input);
      }
      comment = comment.replace(acorn.allLineBreaks, '\n');
      token = this._create_token(TOKEN.BLOCK_COMMENT, comment);
      token.directives = directives;
    } else if (this._input.peek(1) === '/') {
      // peek for comment // ...
      comment = this.__patterns.comment.read();
      token = this._create_token(TOKEN.COMMENT, comment);
    }
  }
  return token;
};

Tokenizer.prototype._read_string = function(c) {
  if (c === '`' || c === "'" || c === '"') {
    var resulting_string = this._input.next();
    this.has_char_escapes = false;

    if (c === '`') {
      resulting_string += this._read_string_recursive('`', true, '${');
    } else {
      resulting_string += this._read_string_recursive(c);
    }

    if (this.has_char_escapes && this._options.unescape_strings) {
      resulting_string = unescape_string(resulting_string);
    }

    if (this._input.peek() === c) {
      resulting_string += this._input.next();
    }

    resulting_string = resulting_string.replace(acorn.allLineBreaks, '\n');

    return this._create_token(TOKEN.STRING, resulting_string);
  }

  return null;
};

Tokenizer.prototype._allow_regexp_or_xml = function(previous_token) {
  // regex and xml can only appear in specific locations during parsing
  return (previous_token.type === TOKEN.RESERVED && in_array(previous_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
    (previous_token.type === TOKEN.END_EXPR && previous_token.text === ')' &&
      previous_token.opened.previous.type === TOKEN.RESERVED && in_array(previous_token.opened.previous.text, ['if', 'while', 'for'])) ||
    (in_array(previous_token.type, [TOKEN.COMMENT, TOKEN.START_EXPR, TOKEN.START_BLOCK, TOKEN.START,
      TOKEN.END_BLOCK, TOKEN.OPERATOR, TOKEN.EQUALS, TOKEN.EOF, TOKEN.SEMICOLON, TOKEN.COMMA
    ]));
};

Tokenizer.prototype._read_regexp = function(c, previous_token) {

  if (c === '/' && this._allow_regexp_or_xml(previous_token)) {
    // handle regexp
    //
    var resulting_string = this._input.next();
    var esc = false;

    var in_char_class = false;
    while (this._input.hasNext() &&
      ((esc || in_char_class || this._input.peek() !== c) &&
        !this._input.testChar(acorn.newline))) {
      resulting_string += this._input.peek();
      if (!esc) {
        esc = this._input.peek() === '\\';
        if (this._input.peek() === '[') {
          in_char_class = true;
        } else if (this._input.peek() === ']') {
          in_char_class = false;
        }
      } else {
        esc = false;
      }
      this._input.next();
    }

    if (this._input.peek() === c) {
      resulting_string += this._input.next();

      // regexps may have modifiers /regexp/MOD , so fetch those, too
      // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
      resulting_string += this._input.read(acorn.identifier);
    }
    return this._create_token(TOKEN.STRING, resulting_string);
  }
  return null;
};

Tokenizer.prototype._read_xml = function(c, previous_token) {

  if (this._options.e4x && c === "<" && this._allow_regexp_or_xml(previous_token)) {
    var xmlStr = '';
    var match = this.__patterns.xml.read_match();
    // handle e4x xml literals
    //
    if (match) {
      // Trim root tag to attempt to
      var rootTag = match[2].replace(/^{\s+/, '{').replace(/\s+}$/, '}');
      var isCurlyRoot = rootTag.indexOf('{') === 0;
      var depth = 0;
      while (match) {
        var isEndTag = !!match[1];
        var tagName = match[2];
        var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
        if (!isSingletonTag &&
          (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\s+/, '{').replace(/\s+}$/, '}')))) {
          if (isEndTag) {
            --depth;
          } else {
            ++depth;
          }
        }
        xmlStr += match[0];
        if (depth <= 0) {
          break;
        }
        match = this.__patterns.xml.read_match();
      }
      // if we didn't close correctly, keep unformatted.
      if (!match) {
        xmlStr += this._input.match(/[\s\S]*/g)[0];
      }
      xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
      return this._create_token(TOKEN.STRING, xmlStr);
    }
  }

  return null;
};

function unescape_string(s) {
  // You think that a regex would work for this
  // return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
  //         return String.fromCharCode(parseInt(val, 16));
  //     })
  // However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
  var out = '',
    escaped = 0;

  var input_scan = new InputScanner(s);
  var matched = null;

  while (input_scan.hasNext()) {
    // Keep any whitespace, non-slash characters
    // also keep slash pairs.
    matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);

    if (matched) {
      out += matched[0];
    }

    if (input_scan.peek() === '\\') {
      input_scan.next();
      if (input_scan.peek() === 'x') {
        matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
      } else if (input_scan.peek() === 'u') {
        matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
      } else {
        out += '\\';
        if (input_scan.hasNext()) {
          out += input_scan.next();
        }
        continue;
      }

      // If there's some error decoding, return the original string
      if (!matched) {
        return s;
      }

      escaped = parseInt(matched[1], 16);

      if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {
        // we bail out on \x7f..\xff,
        // leaving whole string escaped,
        // as it's probably completely binary
        return s;
      } else if (escaped >= 0x00 && escaped < 0x20) {
        // leave 0x00...0x1f escaped
        out += '\\' + matched[0];
        continue;
      } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
        // single-quote, apostrophe, backslash - escape these
        out += '\\' + String.fromCharCode(escaped);
      } else {
        out += String.fromCharCode(escaped);
      }
    }
  }

  return out;
}

// handle string
//
Tokenizer.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {
  var current_char;
  var pattern;
  if (delimiter === '\'') {
    pattern = this.__patterns.single_quote;
  } else if (delimiter === '"') {
    pattern = this.__patterns.double_quote;
  } else if (delimiter === '`') {
    pattern = this.__patterns.template_text;
  } else if (delimiter === '}') {
    pattern = this.__patterns.template_expression;
  }

  var resulting_string = pattern.read();
  var next = '';
  while (this._input.hasNext()) {
    next = this._input.next();
    if (next === delimiter ||
      (!allow_unescaped_newlines && acorn.newline.test(next))) {
      this._input.back();
      break;
    } else if (next === '\\' && this._input.hasNext()) {
      current_char = this._input.peek();

      if (current_char === 'x' || current_char === 'u') {
        this.has_char_escapes = true;
      } else if (current_char === '\r' && this._input.peek(1) === '\n') {
        this._input.next();
      }
      next += this._input.next();
    } else if (start_sub) {
      if (start_sub === '${' && next === '$' && this._input.peek() === '{') {
        next += this._input.next();
      }

      if (start_sub === next) {
        if (delimiter === '`') {
          next += this._read_string_recursive('}', allow_unescaped_newlines, '`');
        } else {
          next += this._read_string_recursive('`', allow_unescaped_newlines, '${');
        }
        if (this._input.hasNext()) {
          next += this._input.next();
        }
      }
    }
    next += pattern.read();
    resulting_string += next;
  }

  return resulting_string;
};

module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;
module.exports.positionable_operators = positionable_operators.slice();
module.exports.line_starters = line_starters.slice();

},{"../core/directives":27,"../core/inputscanner":28,"../core/pattern":31,"../core/templatablepattern":32,"../core/tokenizer":34,"./acorn":45}],50:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":51}],51:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],52:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"./util":61,"dup":6}],53:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"./base64":54,"dup":7}],54:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],55:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"dup":9}],56:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"./util":61,"dup":10}],57:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"dup":11}],58:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"./array-set":52,"./base64-vlq":53,"./binary-search":55,"./quick-sort":57,"./util":61,"dup":12}],59:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"./array-set":52,"./base64-vlq":53,"./mapping-list":56,"./util":61,"dup":13}],60:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"./source-map-generator":59,"./util":61,"dup":14}],61:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"dup":15}],62:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"./lib/source-map-consumer":58,"./lib/source-map-generator":59,"./lib/source-node":60,"dup":16}],63:[function(require,module,exports){
(function (process){
var SourceMapConsumer = require('source-map').SourceMapConsumer;
var path = require('path');

var fs;
try {
  fs = require('fs');
  if (!fs.existsSync || !fs.readFileSync) {
    // fs doesn't have all methods we need
    fs = null;
  }
} catch (err) {
  /* nop */
}

var bufferFrom = require('buffer-from');

// Only install once if called multiple times
var errorFormatterInstalled = false;
var uncaughtShimInstalled = false;

// If true, the caches are reset before a stack trace formatting operation
var emptyCacheBetweenOperations = false;

// Supports {browser, node, auto}
var environment = "auto";

// Maps a file path to a string containing the file contents
var fileContentsCache = {};

// Maps a file path to a source map for that file
var sourceMapCache = {};

// Regex for detecting source maps
var reSourceMap = /^data:application\/json[^,]+base64,/;

// Priority list of retrieve handlers
var retrieveFileHandlers = [];
var retrieveMapHandlers = [];

function isInBrowser() {
  if (environment === "browser")
    return true;
  if (environment === "node")
    return false;
  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
}

function hasGlobalProcessEventEmitter() {
  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
}

function handlerExec(list) {
  return function(arg) {
    for (var i = 0; i < list.length; i++) {
      var ret = list[i](arg);
      if (ret) {
        return ret;
      }
    }
    return null;
  };
}

var retrieveFile = handlerExec(retrieveFileHandlers);

retrieveFileHandlers.push(function(path) {
  // Trim the path to make sure there is no extra whitespace.
  path = path.trim();
  if (/^file:/.test(path)) {
    // existsSync/readFileSync can't handle file protocol, but once stripped, it works
    path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
      return drive ?
        '' : // file:///C:/dir/file -> C:/dir/file
        '/'; // file:///root-dir/file -> /root-dir/file
    });
  }
  if (path in fileContentsCache) {
    return fileContentsCache[path];
  }

  var contents = '';
  try {
    if (!fs) {
      // Use SJAX if we are in the browser
      var xhr = new XMLHttpRequest();
      xhr.open('GET', path, /** async */ false);
      xhr.send(null);
      if (xhr.readyState === 4 && xhr.status === 200) {
        contents = xhr.responseText;
      }
    } else if (fs.existsSync(path)) {
      // Otherwise, use the filesystem
      contents = fs.readFileSync(path, 'utf8');
    }
  } catch (er) {
    /* ignore any errors */
  }

  return fileContentsCache[path] = contents;
});

// Support URLs relative to a directory, but be careful about a protocol prefix
// in case we are in the browser (i.e. directories may start with "http://" or "file:///")
function supportRelativeURL(file, url) {
  if (!file) return url;
  var dir = path.dirname(file);
  var match = /^\w+:\/\/[^\/]*/.exec(dir);
  var protocol = match ? match[0] : '';
  var startPath = dir.slice(protocol.length);
  if (protocol && /^\/\w\:/.test(startPath)) {
    // handle file:///C:/ paths
    protocol += '/';
    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, '/');
  }
  return protocol + path.resolve(dir.slice(protocol.length), url);
}

function retrieveSourceMapURL(source) {
  var fileData;

  if (isInBrowser()) {
     try {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', source, false);
       xhr.send(null);
       fileData = xhr.readyState === 4 ? xhr.responseText : null;

       // Support providing a sourceMappingURL via the SourceMap header
       var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
                             xhr.getResponseHeader("X-SourceMap");
       if (sourceMapHeader) {
         return sourceMapHeader;
       }
     } catch (e) {
     }
  }

  // Get the URL of the source map
  fileData = retrieveFile(source);
  var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
  // Keep executing the search to find the *last* sourceMappingURL to avoid
  // picking up sourceMappingURLs from comments, strings, etc.
  var lastMatch, match;
  while (match = re.exec(fileData)) lastMatch = match;
  if (!lastMatch) return null;
  return lastMatch[1];
};

// Can be overridden by the retrieveSourceMap option to install. Takes a
// generated source filename; returns a {map, optional url} object, or null if
// there is no source map.  The map field may be either a string or the parsed
// JSON object (ie, it must be a valid argument to the SourceMapConsumer
// constructor).
var retrieveSourceMap = handlerExec(retrieveMapHandlers);
retrieveMapHandlers.push(function(source) {
  var sourceMappingURL = retrieveSourceMapURL(source);
  if (!sourceMappingURL) return null;

  // Read the contents of the source map
  var sourceMapData;
  if (reSourceMap.test(sourceMappingURL)) {
    // Support source map URL as a data url
    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
    sourceMapData = bufferFrom(rawData, "base64").toString();
    sourceMappingURL = source;
  } else {
    // Support source map URLs relative to the source URL
    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
    sourceMapData = retrieveFile(sourceMappingURL);
  }

  if (!sourceMapData) {
    return null;
  }

  return {
    url: sourceMappingURL,
    map: sourceMapData
  };
});

function mapSourcePosition(position) {
  var sourceMap = sourceMapCache[position.source];
  if (!sourceMap) {
    // Call the (overrideable) retrieveSourceMap function to get the source map.
    var urlAndMap = retrieveSourceMap(position.source);
    if (urlAndMap) {
      sourceMap = sourceMapCache[position.source] = {
        url: urlAndMap.url,
        map: new SourceMapConsumer(urlAndMap.map)
      };

      // Load all sources stored inline with the source map into the file cache
      // to pretend like they are already loaded. They may not exist on disk.
      if (sourceMap.map.sourcesContent) {
        sourceMap.map.sources.forEach(function(source, i) {
          var contents = sourceMap.map.sourcesContent[i];
          if (contents) {
            var url = supportRelativeURL(sourceMap.url, source);
            fileContentsCache[url] = contents;
          }
        });
      }
    } else {
      sourceMap = sourceMapCache[position.source] = {
        url: null,
        map: null
      };
    }
  }

  // Resolve the source URL relative to the URL of the source map
  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {
    var originalPosition = sourceMap.map.originalPositionFor(position);

    // Only return the original position if a matching line was found. If no
    // matching line is found then we return position instead, which will cause
    // the stack trace to print the path and line for the compiled file. It is
    // better to give a precise location in the compiled file than a vague
    // location in the original file.
    if (originalPosition.source !== null) {
      originalPosition.source = supportRelativeURL(
        sourceMap.url, originalPosition.source);
      return originalPosition;
    }
  }

  return position;
}

// Parses code generated by FormatEvalOrigin(), a function inside V8:
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js
function mapEvalOrigin(origin) {
  // Most eval() calls are in this format
  var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
  if (match) {
    var position = mapSourcePosition({
      source: match[2],
      line: +match[3],
      column: match[4] - 1
    });
    return 'eval at ' + match[1] + ' (' + position.source + ':' +
      position.line + ':' + (position.column + 1) + ')';
  }

  // Parse nested eval() calls using recursion
  match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
  if (match) {
    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
  }

  // Make sure we still return useful information if we didn't find anything
  return origin;
}

// This is copied almost verbatim from the V8 source code at
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
// implementation of wrapCallSite() used to just forward to the actual source
// code of CallSite.prototype.toString but unfortunately a new release of V8
// did something to the prototype chain and broke the shim. The only fix I
// could find was copy/paste.
function CallSiteToString() {
  var fileName;
  var fileLocation = "";
  if (this.isNative()) {
    fileLocation = "native";
  } else {
    fileName = this.getScriptNameOrSourceURL();
    if (!fileName && this.isEval()) {
      fileLocation = this.getEvalOrigin();
      fileLocation += ", ";  // Expecting source position to follow.
    }

    if (fileName) {
      fileLocation += fileName;
    } else {
      // Source code does not originate from a file and is not native, but we
      // can still get the source position inside the source string, e.g. in
      // an eval string.
      fileLocation += "<anonymous>";
    }
    var lineNumber = this.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ":" + lineNumber;
      var columnNumber = this.getColumnNumber();
      if (columnNumber) {
        fileLocation += ":" + columnNumber;
      }
    }
  }

  var line = "";
  var functionName = this.getFunctionName();
  var addSuffix = true;
  var isConstructor = this.isConstructor();
  var isMethodCall = !(this.isToplevel() || isConstructor);
  if (isMethodCall) {
    var typeName = this.getTypeName();
    // Fixes shim to be backward compatable with Node v0 to v4
    if (typeName === "[object Object]") {
      typeName = "null";
    }
    var methodName = this.getMethodName();
    if (functionName) {
      if (typeName && functionName.indexOf(typeName) != 0) {
        line += typeName + ".";
      }
      line += functionName;
      if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
        line += " [as " + methodName + "]";
      }
    } else {
      line += typeName + "." + (methodName || "<anonymous>");
    }
  } else if (isConstructor) {
    line += "new " + (functionName || "<anonymous>");
  } else if (functionName) {
    line += functionName;
  } else {
    line += fileLocation;
    addSuffix = false;
  }
  if (addSuffix) {
    line += " (" + fileLocation + ")";
  }
  return line;
}

function cloneCallSite(frame) {
  var object = {};
  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
  });
  object.toString = CallSiteToString;
  return object;
}

function wrapCallSite(frame, state) {
  // provides interface backward compatibility
  if (state === undefined) {
    state = { nextPosition: null, curPosition: null }
  }
  if(frame.isNative()) {
    state.curPosition = null;
    return frame;
  }

  // Most call sites will return the source file from getFileName(), but code
  // passed to eval() ending in "//# sourceURL=..." will return the source file
  // from getScriptNameOrSourceURL() instead
  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
  if (source) {
    var line = frame.getLineNumber();
    var column = frame.getColumnNumber() - 1;

    // Fix position in Node where some (internal) code is prepended.
    // See https://github.com/evanw/node-source-map-support/issues/36
    // Header removed in node at ^10.16 || >=11.11.0
    // v11 is not an LTS candidate, we can just test the one version with it.
    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
    var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
    var headerLength = noHeader.test(process.version) ? 0 : 62;
    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
      column -= headerLength;
    }

    var position = mapSourcePosition({
      source: source,
      line: line,
      column: column
    });
    state.curPosition = position;
    frame = cloneCallSite(frame);
    var originalFunctionName = frame.getFunctionName;
    frame.getFunctionName = function() {
      if (state.nextPosition == null) {
        return originalFunctionName();
      }
      return state.nextPosition.name || originalFunctionName();
    };
    frame.getFileName = function() { return position.source; };
    frame.getLineNumber = function() { return position.line; };
    frame.getColumnNumber = function() { return position.column + 1; };
    frame.getScriptNameOrSourceURL = function() { return position.source; };
    return frame;
  }

  // Code called using eval() needs special handling
  var origin = frame.isEval() && frame.getEvalOrigin();
  if (origin) {
    origin = mapEvalOrigin(origin);
    frame = cloneCallSite(frame);
    frame.getEvalOrigin = function() { return origin; };
    return frame;
  }

  // If we get here then we were unable to change the source position
  return frame;
}

// This function is part of the V8 stack trace API, for more info see:
// https://v8.dev/docs/stack-trace-api
function prepareStackTrace(error, stack) {
  if (emptyCacheBetweenOperations) {
    fileContentsCache = {};
    sourceMapCache = {};
  }

  var name = error.name || 'Error';
  var message = error.message || '';
  var errorString = name + ": " + message;

  var state = { nextPosition: null, curPosition: null };
  var processedStack = [];
  for (var i = stack.length - 1; i >= 0; i--) {
    processedStack.push('\n    at ' + wrapCallSite(stack[i], state));
    state.nextPosition = state.curPosition;
  }
  state.curPosition = state.nextPosition = null;
  return errorString + processedStack.reverse().join('');
}

// Generate position and snippet of original source with pointer
function getErrorSource(error) {
  var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
  if (match) {
    var source = match[1];
    var line = +match[2];
    var column = +match[3];

    // Support the inline sourceContents inside the source map
    var contents = fileContentsCache[source];

    // Support files on disk
    if (!contents && fs && fs.existsSync(source)) {
      try {
        contents = fs.readFileSync(source, 'utf8');
      } catch (er) {
        contents = '';
      }
    }

    // Format the line from the original source code like node does
    if (contents) {
      var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
      if (code) {
        return source + ':' + line + '\n' + code + '\n' +
          new Array(column).join(' ') + '^';
      }
    }
  }
  return null;
}

function printErrorAndExit (error) {
  var source = getErrorSource(error);

  // Ensure error is printed synchronously and not truncated
  if (process.stderr._handle && process.stderr._handle.setBlocking) {
    process.stderr._handle.setBlocking(true);
  }

  if (source) {
    console.error();
    console.error(source);
  }

  console.error(error.stack);
  process.exit(1);
}

function shimEmitUncaughtException () {
  var origEmit = process.emit;

  process.emit = function (type) {
    if (type === 'uncaughtException') {
      var hasStack = (arguments[1] && arguments[1].stack);
      var hasListeners = (this.listeners(type).length > 0);

      if (hasStack && !hasListeners) {
        return printErrorAndExit(arguments[1]);
      }
    }

    return origEmit.apply(this, arguments);
  };
}

var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);

exports.wrapCallSite = wrapCallSite;
exports.getErrorSource = getErrorSource;
exports.mapSourcePosition = mapSourcePosition;
exports.retrieveSourceMap = retrieveSourceMap;

exports.install = function(options) {
  options = options || {};

  if (options.environment) {
    environment = options.environment;
    if (["node", "browser", "auto"].indexOf(environment) === -1) {
      throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
    }
  }

  // Allow sources to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveFile) {
    if (options.overrideRetrieveFile) {
      retrieveFileHandlers.length = 0;
    }

    retrieveFileHandlers.unshift(options.retrieveFile);
  }

  // Allow source maps to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveSourceMap) {
    if (options.overrideRetrieveSourceMap) {
      retrieveMapHandlers.length = 0;
    }

    retrieveMapHandlers.unshift(options.retrieveSourceMap);
  }

  // Support runtime transpilers that include inline source maps
  if (options.hookRequire && !isInBrowser()) {
    var Module;
    try {
      Module = require('module');
    } catch (err) {
      // NOP: Loading in catch block to convert webpack error to warning.
    }
    var $compile = Module.prototype._compile;

    if (!$compile.__sourceMapSupport) {
      Module.prototype._compile = function(content, filename) {
        fileContentsCache[filename] = content;
        sourceMapCache[filename] = undefined;
        return $compile.call(this, content, filename);
      };

      Module.prototype._compile.__sourceMapSupport = true;
    }
  }

  // Configure options
  if (!emptyCacheBetweenOperations) {
    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
      options.emptyCacheBetweenOperations : false;
  }

  // Install the error reformatter
  if (!errorFormatterInstalled) {
    errorFormatterInstalled = true;
    Error.prepareStackTrace = prepareStackTrace;
  }

  if (!uncaughtShimInstalled) {
    var installHandler = 'handleUncaughtExceptions' in options ?
      options.handleUncaughtExceptions : true;

    // Provide the option to not install the uncaught exception handler. This is
    // to support other uncaught exception handlers (in test frameworks, for
    // example). If this handler is not installed and there are no other uncaught
    // exception handlers, uncaught exceptions will be caught by node's built-in
    // exception handler and the process will still be terminated. However, the
    // generated JavaScript code will be shown above the stack trace instead of
    // the original source code.
    if (installHandler && hasGlobalProcessEventEmitter()) {
      uncaughtShimInstalled = true;
      shimEmitUncaughtException();
    }
  }
};

exports.resetRetrieveHandlers = function() {
  retrieveFileHandlers.length = 0;
  retrieveMapHandlers.length = 0;

  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);

  retrieveSourceMap = handlerExec(retrieveMapHandlers);
  retrieveFile = handlerExec(retrieveFileHandlers);
}

}).call(this,require('_process'))

},{"_process":51,"buffer-from":3,"fs":2,"module":2,"path":50,"source-map":62}],64:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Value_1 = require("./Value");
exports.index = new Value_1.Value('index', Label_1.bot);
exports.input = new Value_1.Value('input', Label_1.bot);
exports.value = new Value_1.Value('value', Label_1.bot);
exports.writable = new Value_1.Value('writable', Label_1.bot);
exports.enumerable = new Value_1.Value('enumerable', Label_1.bot);
exports.configurable = new Value_1.Value('configurable', Label_1.bot);
exports.get = new Value_1.Value('get', Label_1.bot);
exports.set = new Value_1.Value('set', Label_1.bot);
exports.print = new Value_1.Value('print', Label_1.bot);
exports.console = new Value_1.Value('console', Label_1.bot);
exports.alert = new Value_1.Value('alert', Label_1.bot);
exports.prototype = new Value_1.Value('prototype', Label_1.bot);
exports.constructor = new Value_1.Value('constructor', Label_1.bot);
exports.length = new Value_1.Value('length', Label_1.bot);
//@ts-ignore TYPES
exports.arguments = new Value_1.Value('arguments', Label_1.bot);
exports.upg = new Value_1.Value('upg', Label_1.bot);
exports.upgv = new Value_1.Value('upgv', Label_1.bot);
exports.upgf = new Value_1.Value('upgf', Label_1.bot);
exports.upgs = new Value_1.Value('upgs', Label_1.bot);
exports.getPrototypeOf = new Value_1.Value('getPrototypeOf', Label_1.bot);
exports.getOwnPropertyDescriptor = new Value_1.Value('getOwnPropertyDescriptor', Label_1.bot);
exports.getOwnPropertyNames = new Value_1.Value('getOwnPropertyNames', Label_1.bot);
exports.create = new Value_1.Value('create', Label_1.bot);
//@ts-ignore TYPES
exports.require = new Value_1.Value('require', Label_1.bot);
exports.defineProperty = new Value_1.Value('defineProperty', Label_1.bot);
exports.defineProperties = new Value_1.Value('defineProperties', Label_1.bot);
exports.seal = new Value_1.Value('seal', Label_1.bot);
exports.freeze = new Value_1.Value('freeze', Label_1.bot);
exports.preventExtensions = new Value_1.Value('preventExtensions', Label_1.bot);
exports.isSealed = new Value_1.Value('isSealed', Label_1.bot);
exports.isFrozen = new Value_1.Value('isFrozen', Label_1.bot);
exports.isExtensible = new Value_1.Value('isExtensible', Label_1.bot);
exports.keys = new Value_1.Value('keys', Label_1.bot);
exports.toString = new Value_1.Value('toString', Label_1.bot);
exports.toLocaleString = new Value_1.Value('toLocaleString', Label_1.bot);
exports.valueOf = new Value_1.Value('valueOf', Label_1.bot);
exports.hasOwnProperty = new Value_1.Value('hasOwnProperty', Label_1.bot);
exports.isPrototypeOf = new Value_1.Value('isPrototypeOf', Label_1.bot);
exports.propertyIsEnumerable = new Value_1.Value('propertyIsEnumerable', Label_1.bot);
exports.apply = new Value_1.Value('apply', Label_1.bot);
exports.call = new Value_1.Value('call', Label_1.bot);
exports.caller = new Value_1.Value('caller', Label_1.bot);
exports.bind = new Value_1.Value('bind', Label_1.bot);
exports.NaN = new Value_1.Value('NaN', Label_1.bot);
exports.Infinity = new Value_1.Value('Infinity', Label_1.bot);
exports.undefined = new Value_1.Value('undefined', Label_1.bot);
//@ts-ignore TYPES
exports.eval = new Value_1.Value('eval', Label_1.bot);
exports.parseInt = new Value_1.Value('parseInt', Label_1.bot);
exports.parseFloat = new Value_1.Value('parseFloat', Label_1.bot);
exports.isNaN = new Value_1.Value('isNaN', Label_1.bot);
exports.isFinite = new Value_1.Value('isFinite', Label_1.bot);
exports.decodeURI = new Value_1.Value('decodeURI', Label_1.bot);
exports.decodeURIComponent = new Value_1.Value('decodeURIComponent', Label_1.bot);
exports.encodeURI = new Value_1.Value('encodeURI', Label_1.bot);
exports.encodeURIComponent = new Value_1.Value('encodeURIComponent', Label_1.bot);
exports.Object = new Value_1.Value('Object', Label_1.bot);
exports.Function = new Value_1.Value('Function', Label_1.bot);
exports.Array = new Value_1.Value('Array', Label_1.bot);
exports.String = new Value_1.Value('String', Label_1.bot);
exports.Boolean = new Value_1.Value('Boolean', Label_1.bot);
exports.Number = new Value_1.Value('Number', Label_1.bot);
exports.Date = new Value_1.Value('Date', Label_1.bot);
exports.RegExp = new Value_1.Value('RegExp', Label_1.bot);
exports.Error = new Value_1.Value('Error', Label_1.bot);
exports.EvalError = new Value_1.Value('EvalError', Label_1.bot);
exports.RangeError = new Value_1.Value('RangeError', Label_1.bot);
exports.ReferenceError = new Value_1.Value('ReferenceError', Label_1.bot);
exports.SyntaxError = new Value_1.Value('SyntaxError', Label_1.bot);
exports.TypeError = new Value_1.Value('TypeError', Label_1.bot);
exports.URIError = new Value_1.Value('URIError', Label_1.bot);
exports.Math = new Value_1.Value('Math', Label_1.bot);
exports.JSON = new Value_1.Value('JSON', Label_1.bot);
exports.parse = new Value_1.Value('parse', Label_1.bot);
exports.stringify = new Value_1.Value('stringify', Label_1.bot);
exports.name = new Value_1.Value('name', Label_1.bot);
exports.message = new Value_1.Value('message', Label_1.bot);
exports.isArray = new Value_1.Value('isArray', Label_1.bot);
exports.concat = new Value_1.Value('concat', Label_1.bot);
exports.join = new Value_1.Value('join', Label_1.bot);
exports.pop = new Value_1.Value('pop', Label_1.bot);
exports.push = new Value_1.Value('push', Label_1.bot);
exports.reverse = new Value_1.Value('reverse', Label_1.bot);
exports.shift = new Value_1.Value('shift', Label_1.bot);
exports.slice = new Value_1.Value('slice', Label_1.bot);
exports.sort = new Value_1.Value('sort', Label_1.bot);
exports.splice = new Value_1.Value('splice', Label_1.bot);
exports.unshift = new Value_1.Value('unshift', Label_1.bot);
exports.indexOf = new Value_1.Value('indexOf', Label_1.bot);
exports.lastIndexOf = new Value_1.Value('lastIndexOf', Label_1.bot);
exports.every = new Value_1.Value('every', Label_1.bot);
exports.some = new Value_1.Value('some', Label_1.bot);
exports.forEach = new Value_1.Value('forEach', Label_1.bot);
exports.map = new Value_1.Value('map', Label_1.bot);
exports.filter = new Value_1.Value('filter', Label_1.bot);
exports.reduce = new Value_1.Value('reduce', Label_1.bot);
exports.reduceRight = new Value_1.Value('reduceRight', Label_1.bot);
exports.fromCharCode = new Value_1.Value('fromCharCode', Label_1.bot);
exports.charAt = new Value_1.Value('charAt', Label_1.bot);
exports.charCodeAt = new Value_1.Value('charCodeAt', Label_1.bot);
exports.localeCompare = new Value_1.Value('localeCompare', Label_1.bot);
exports.match = new Value_1.Value('match', Label_1.bot);
exports.replace = new Value_1.Value('replace', Label_1.bot);
exports.search = new Value_1.Value('search', Label_1.bot);
exports.split = new Value_1.Value('split', Label_1.bot);
exports.substring = new Value_1.Value('substring', Label_1.bot);
exports.substr = new Value_1.Value('substr', Label_1.bot);
exports.toLowerCase = new Value_1.Value('toLowerCase', Label_1.bot);
exports.toLocaleLowerCase = new Value_1.Value('toLocaleLowerCase', Label_1.bot);
exports.toUpperCase = new Value_1.Value('toUpperCase', Label_1.bot);
exports.toLocaleUpperCase = new Value_1.Value('toLocaleUpperCase', Label_1.bot);
exports.trim = new Value_1.Value('trim', Label_1.bot);
exports.MAX_VALUE = new Value_1.Value('MAX_VALUE', Label_1.bot);
exports.MIN_VALUE = new Value_1.Value('MIN_VALUE', Label_1.bot);
exports.NEGATIVE_INFINITY = new Value_1.Value('NEGATIVE_INFINITY', Label_1.bot);
exports.POSITIVE_INFINITY = new Value_1.Value('POSITIVE_INFINITY', Label_1.bot);
exports.toFixed = new Value_1.Value('toFixed', Label_1.bot);
exports.toExponential = new Value_1.Value('toExponential', Label_1.bot);
exports.toPrecision = new Value_1.Value('toPrecision', Label_1.bot);
exports.E = new Value_1.Value('E', Label_1.bot);
exports.LN10 = new Value_1.Value('LN10', Label_1.bot);
exports.LN2 = new Value_1.Value('LN2', Label_1.bot);
exports.LOG2E = new Value_1.Value('LOG2E', Label_1.bot);
exports.LOG10E = new Value_1.Value('LOG10E', Label_1.bot);
exports.PI = new Value_1.Value('PI', Label_1.bot);
exports.SQRT1_2 = new Value_1.Value('SQRT1_2', Label_1.bot);
exports.SQRT2 = new Value_1.Value('SQRT2', Label_1.bot);
exports.abs = new Value_1.Value('abs', Label_1.bot);
exports.acos = new Value_1.Value('acos', Label_1.bot);
exports.asin = new Value_1.Value('asin', Label_1.bot);
exports.atan = new Value_1.Value('atan', Label_1.bot);
exports.atan2 = new Value_1.Value('atan2', Label_1.bot);
exports.ceil = new Value_1.Value('ceil', Label_1.bot);
exports.cos = new Value_1.Value('cos', Label_1.bot);
exports.exp = new Value_1.Value('exp', Label_1.bot);
exports.floor = new Value_1.Value('floor', Label_1.bot);
exports.log = new Value_1.Value('log', Label_1.bot);
exports.max = new Value_1.Value('max', Label_1.bot);
exports.min = new Value_1.Value('min', Label_1.bot);
exports.pow = new Value_1.Value('pow', Label_1.bot);
exports.random = new Value_1.Value('random', Label_1.bot);
exports.round = new Value_1.Value('round', Label_1.bot);
exports.sin = new Value_1.Value('sin', Label_1.bot);
exports.sqrt = new Value_1.Value('sqrt', Label_1.bot);
exports.tan = new Value_1.Value('tan', Label_1.bot);
exports.toDateString = new Value_1.Value('toDateString', Label_1.bot);
exports.toTimeString = new Value_1.Value('toTimeString', Label_1.bot);
exports.toLocaleDateString = new Value_1.Value('toLocaleDateString', Label_1.bot);
exports.toLocaleTimeString = new Value_1.Value('toLocaleTimeString', Label_1.bot);
exports.getTime = new Value_1.Value('getTime', Label_1.bot);
exports.getFullYear = new Value_1.Value('getFullYear', Label_1.bot);
exports.getUTCFullYear = new Value_1.Value('getUTCFullYear', Label_1.bot);
exports.getMonth = new Value_1.Value('getMonth', Label_1.bot);
exports.getUTCMonth = new Value_1.Value('getUTCMonth', Label_1.bot);
exports.getDate = new Value_1.Value('getDate', Label_1.bot);
exports.getUTCDate = new Value_1.Value('getUTCDate', Label_1.bot);
exports.getDay = new Value_1.Value('getDay', Label_1.bot);
exports.getUTCDay = new Value_1.Value('getUTCDay', Label_1.bot);
exports.getHours = new Value_1.Value('getHours', Label_1.bot);
exports.getUTCHours = new Value_1.Value('getUTCHours', Label_1.bot);
exports.getMinutes = new Value_1.Value('getMinutes', Label_1.bot);
exports.getUTCMinutes = new Value_1.Value('getUTCMinutes', Label_1.bot);
exports.getSeconds = new Value_1.Value('getSeconds', Label_1.bot);
exports.getUTCSeconds = new Value_1.Value('getUTCSeconds', Label_1.bot);
exports.getMilliseconds = new Value_1.Value('getMilliseconds', Label_1.bot);
exports.getUTCMilliseconds = new Value_1.Value('getUTCMilliseconds', Label_1.bot);
exports.getTimezoneOffset = new Value_1.Value('getTimezoneOffset', Label_1.bot);
exports.setTime = new Value_1.Value('setTime', Label_1.bot);
exports.setMilliseconds = new Value_1.Value('setMilliseconds', Label_1.bot);
exports.setUTCMilliseconds = new Value_1.Value('setUTCMilliseconds', Label_1.bot);
exports.setSeconds = new Value_1.Value('setSeconds', Label_1.bot);
exports.setUTCSeconds = new Value_1.Value('setUTCSeconds', Label_1.bot);
exports.setMinutes = new Value_1.Value('setMinutes', Label_1.bot);
exports.setUTCMinutes = new Value_1.Value('setUTCMinutes', Label_1.bot);
exports.setHours = new Value_1.Value('setHours', Label_1.bot);
exports.setUTCHours = new Value_1.Value('setUTCHours', Label_1.bot);
exports.setDate = new Value_1.Value('setDate', Label_1.bot);
exports.setUTCDate = new Value_1.Value('setUTCDate', Label_1.bot);
exports.setMonth = new Value_1.Value('setMonth', Label_1.bot);
exports.setUTCMonth = new Value_1.Value('setUTCMonth', Label_1.bot);
exports.setFullYear = new Value_1.Value('setFullYear', Label_1.bot);
exports.setUTCFullYear = new Value_1.Value('setUTCFullYear', Label_1.bot);
exports.toUTCString = new Value_1.Value('toUTCString', Label_1.bot);
exports.toISOString = new Value_1.Value('toISOString', Label_1.bot);
exports.toJSON = new Value_1.Value('toJSON', Label_1.bot);
exports.UTC = new Value_1.Value('UTC', Label_1.bot);
exports.now = new Value_1.Value('now', Label_1.bot);
exports.exec = new Value_1.Value('exec', Label_1.bot);
exports.test = new Value_1.Value('test', Label_1.bot);
exports.source = new Value_1.Value('source', Label_1.bot);
exports.global = new Value_1.Value('global', Label_1.bot);
exports.ignoreCase = new Value_1.Value('ignoreCase', Label_1.bot);
exports.multiline = new Value_1.Value('multiline', Label_1.bot);
exports.lastIndex = new Value_1.Value('lastIndex', Label_1.bot);
exports.getYear = new Value_1.Value('getYear', Label_1.bot);
exports.setYear = new Value_1.Value('setYear', Label_1.bot);
exports.toGMTString = new Value_1.Value('toGMTString', Label_1.bot);
exports.escape = new Value_1.Value('escape', Label_1.bot);
exports.unescape = new Value_1.Value('unescape', Label_1.bot);
exports.of = new Value_1.Value('of', Label_1.bot);

},{"./Label":123,"./Value":184}],65:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var Label_1 = require("../Label");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var HasInstance_1 = require("../HasInstance");
var IsConstructor_1 = require("../Utility/IsConstructor");
var ToString_1 = require("../Conversion/ToString");
// ------------------------------------------------------------
// 15.4.3 
var ArrayConstructor = /** @class */ (function (_super) {
    __extends(ArrayConstructor, _super);
    function ArrayConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    ArrayConstructor.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 1);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.ArrayPrototype);
        Define_1.DefineTFT(this, constants.isArray, new BuiltinFunctionObject_1.BuiltinFunctionObject(isArray, 1, Array.isArray));
        // ES6, 22.1.2.3
        Define_1.DefineTFT(this, constants.of, new BuiltinFunctionObject_1.BuiltinFunctionObject(of, 1, Array.of));
    };
    ArrayConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    ArrayConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // ------------------------------------------------------------
    ArrayConstructor.prototype.Construct = function (args) {
        var array;
        var len = args.length;
        if (len === 0 || len >= 2) {
            array = ArrayObject_1.ArrayObject.fromValueArray(args, Label_1.bot);
        }
        else {
            var arg = args[0];
            if (typeof arg.value === 'number') {
                array = new ArrayObject_1.ArrayObject();
                array.properties.length = arg.value;
                array.labels.length = {
                    value: arg.label,
                    existence: Label_1.bot
                };
            }
            else {
                array = ArrayObject_1.ArrayObject.fromValueArray(args, Label_1.bot);
            }
        }
        return new Value_1.Value(array, Label_1.bot);
    };
    return ArrayConstructor;
}(EcmaObject_1.EcmaObject));
exports.ArrayConstructor = ArrayConstructor;
// ------------------------------------------------------------
// isArray, 15.4.3.1
function isArray(thisArg, args) {
    var arg = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (arg.value === null || typeof arg.value !== 'object') {
        return new Value_1.Value(false, arg.label);
    }
    return new Value_1.Value(arg.value.Class === 'Array', arg.label);
}
;
// ------------------------------------------------------------
// ES6: of, 22.1.2.3
function of(thisArg, args) {
    var e_1, _a;
    var len = args.length;
    var lbl = new Label_1.Label();
    try {
        for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
            var arg = args_1_1.value;
            lbl = Label_1.lub(lbl, arg.label);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var A;
    if (IsConstructor_1.IsConstructor(thisArg)) {
        // @ts-ignore
        A = thisArg.value.Construct([new Value_1.Value(len, lbl)]);
    }
    else {
        A = new ArrayObject_1.ArrayObject();
        A.properties.length = len;
        A.labels.length = {
            value: lbl,
            existence: Label_1.bot
        };
    }
    var k = 0;
    while (k < len) {
        var kValue = args[k];
        var Pk = ToString_1.ToString(new Value_1.Value(k, kValue.label));
        // 7.3.4 in ES6 will make this..
        var desc = {
            value: kValue.value,
            label: kValue.label,
            writable: true,
            enumerable: true,
            configurable: true
        };
        A.DefineOwnProperty(Pk, desc);
        k++;
    }
    return A;
}
;

},{"../Constants":64,"../Conversion/ToString":87,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/ArrayObject":132,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Utility/IsConstructor":183,"../Value":184}],66:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var HasInstance_1 = require("../HasInstance");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var BooleanObject_1 = require("../Objects/BooleanObject");
var ToBoolean_1 = require("../Conversion/ToBoolean");
// ------------------------------------------------------------
// 15.6.2 
var BooleanConstructor = /** @class */ (function (_super) {
    __extends(BooleanConstructor, _super);
    function BooleanConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    BooleanConstructor.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 1); //REMOVE ?
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.BooleanPrototype);
    };
    BooleanConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.6.1.1
    BooleanConstructor.prototype.Call = function (thisArg, args) {
        var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
        return ToBoolean_1.ToBoolean(arg0);
    };
    // 15.6.2.1
    BooleanConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
        var b = ToBoolean_1.ToBoolean(arg0);
        var obj = new BooleanObject_1.BooleanObject(b.value, b.label);
        return new Value_1.Value(obj, Label_1.bot);
    };
    return BooleanConstructor;
}(EcmaObject_1.EcmaObject));
exports.BooleanConstructor = BooleanConstructor;

},{"../Constants":64,"../Conversion/ToBoolean":81,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/BooleanObject":133,"../Objects/EcmaObject":137,"../Value":184}],67:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var HasInstance_1 = require("../HasInstance");
var ToPrimitive_1 = require("../Conversion/ToPrimitive");
var ToNumber_1 = require("../Conversion/ToNumber");
var ToString_1 = require("../Conversion/ToString");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var DateObject_1 = require("../Objects/DateObject");
// ------------------------------------------------------------
// The Date Constructor, 15.9.3
var DateConstructor = /** @class */ (function (_super) {
    __extends(DateConstructor, _super);
    function DateConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    DateConstructor.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 7);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.DatePrototype);
        Define_1.DefineTFT(this, constants.parse, new BuiltinFunctionObject_1.BuiltinFunctionObject(parse, 0, Date.parse));
        Define_1.DefineTFT(this, constants.UTC, new BuiltinFunctionObject_1.BuiltinFunctionObject(UTC, 0, Date.UTC));
        Define_1.DefineTFT(this, constants.now, new BuiltinFunctionObject_1.BuiltinFunctionObject(now, 0, Date.now));
    };
    DateConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    //----------------------------------------------------
    // 15.9.1.1
    DateConstructor.prototype.Call = function (thisArg, args) {
        var str = this.host();
        return new Value_1.Value(str, Label_1.bot);
    };
    //----------------------------------------------------
    // 15.9.3.1
    DateConstructor.prototype.Construct = function (args) {
        var _args = [];
        var label = new Label_1.Label();
        var obj;
        switch (args.length) {
            case 0:
                obj = new DateObject_1.DateObject(new this.host(), new Label_1.Label('Date'));
                break;
            case 1:
                var v = ToPrimitive_1.ToPrimitive(args[0]);
                if (typeof v.value !== 'string') {
                    v = ToNumber_1.ToNumber(v);
                }
                obj = new DateObject_1.DateObject(new this.host(v.value), v.label);
                break;
            default:
                var len = args.length;
                var i = 0;
                for (; i < len; i++) {
                    var val = ToNumber_1.ToNumber(args[i]);
                    _args[i] = val.value;
                    Label_1.lub(val.label);
                }
                if (len == 2) {
                    _args[2] = 1;
                }
                for (; i < 7; i++) {
                    _args[i] = 0;
                }
                var date = new this.host(_args[0], _args[1], _args[2], _args[3], _args[4], _args[5], _args[6]);
                obj = new DateObject_1.DateObject(date, label);
        }
        return new Value_1.Value(obj, Label_1.bot);
    };
    ;
    return DateConstructor;
}(EcmaObject_1.EcmaObject));
exports.DateConstructor = DateConstructor;
// ------------------------------------------------------------
// parse, 15.9.4.2
function parse(thisArg, args) {
    var arg = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var string = ToString_1.ToString(arg);
    var number = monitor.instances.DateConstructor.host.parse(string.value);
    return new Value_1.Value(number, string.label);
}
// ------------------------------------------------------------
// UTC, 15.9.4.3
function UTC(thisArg, args) {
    var _args = [];
    var label = new Label_1.Label();
    for (var i = 0, len = args.length; i < len; i++) {
        var val = ToNumber_1.ToNumber(args[i]);
        _args[i] = val.value;
        Label_1.lub(val.label);
    }
    var number = monitor.instances.DateConstructor.host.UTC.apply(null, _args);
    return new Value_1.Value(number, label);
}
// ------------------------------------------------------------
// now, 15.9.4.4
function now(thisArg, args) {
    var number = monitor.instances.DateConstructor.host.now();
    return new Value_1.Value(number, Label_1.bot /*top*/);
}

},{"../Constants":64,"../Conversion/ToNumber":84,"../Conversion/ToPrimitive":86,"../Conversion/ToString":87,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/DateObject":136,"../Objects/EcmaObject":137,"../Value":184}],68:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var HasInstance_1 = require("../HasInstance");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Define_1 = require("../Define");
var Label_1 = require("../Label");
var ErrorObject_1 = require("../Objects/ErrorObject");
// ------------------------------------------------------------
// 15.11 - The Error Constructor
var ErrorConstructor = /** @class */ (function (_super) {
    __extends(ErrorConstructor, _super);
    function ErrorConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.host = host;
        _this.Extensible = true;
        _this.name = 'Error';
        return _this;
    }
    ErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorPrototype);
    };
    ErrorConstructor.prototype.SetupBase = function (prototype) {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 1);
        Define_1.DefineFFF(this, constants.prototype, prototype);
    };
    ErrorConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.11.2
    ErrorConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // 15.11.2.1
    ErrorConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
        var o = new ErrorObject_1.ErrorObject(arg0);
        return new Value_1.Value(o, Label_1.bot);
    };
    return ErrorConstructor;
}(EcmaObject_1.EcmaObject));
exports.ErrorConstructor = ErrorConstructor;

},{"../Constants":64,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/EcmaObject":137,"../Objects/ErrorObject":138,"../Value":184}],69:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorConstructor_1 = require("./ErrorConstructor");
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var EvalErrorObject_1 = require("../Objects/EvalErrorObject");
var EvalErrorConstructor = /** @class */ (function (_super) {
    __extends(EvalErrorConstructor, _super);
    function EvalErrorConstructor(host) {
        return _super.call(this, host) || this;
    }
    EvalErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.EvalErrorPrototype);
    };
    EvalErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var o = new EvalErrorObject_1.EvalErrorObject(message);
        return new Value_1.Value(o, Label_1.bot);
    };
    return EvalErrorConstructor;
}(ErrorConstructor_1.ErrorConstructor));
exports.EvalErrorConstructor = EvalErrorConstructor;

},{"../Label":123,"../Objects/EvalErrorObject":139,"../Value":184,"./ErrorConstructor":68}],70:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var FunctionObject_1 = require("../Objects/FunctionObject");
var HasInstance_1 = require("../HasInstance");
var esprima = require("esprima");
var ToString_1 = require("../Conversion/ToString");
// ------------------------------------------------------------
// Function Constructor, 15.3.2 (15.3.1, 15.3.1.1)
var FunctionConstructor = /** @class */ (function (_super) {
    __extends(FunctionConstructor, _super);
    function FunctionConstructor(host) {
        var _this = _super.call(this) || this;
        // Properties, 15.3.3.
        _this.Class = 'Function';
        _this.host = host;
        _this.Extensible = true;
        return _this;
    }
    FunctionConstructor.prototype.Setup = function () {
        // 15.3.3.1 
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.FunctionPrototype);
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        // 15.3.3.2 
        Define_1.DefineFFF(this, constants.length, 1);
    };
    // ---
    FunctionConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.3.1
    FunctionConstructor.prototype.Call = function (thisArg, args) {
        return this.Construct(args);
    };
    // 15.3.2
    FunctionConstructor.prototype.Construct = function (args) {
        var argCount = args.length;
        var P = '';
        var body;
        var label = Label_1.bot;
        if (argCount === 0) {
            body = new Value_1.Value('', Label_1.bot);
        }
        else if (argCount === 1) {
            body = args[0];
        }
        else {
            var firstArg = ToString_1.ToString(args[0]);
            label = Label_1.lub(label, firstArg.label);
            P = firstArg.value;
            for (var i = 1; i < argCount - 1; i++) {
                var nextArg = ToString_1.ToString(args[i]);
                label = Label_1.lub(label, firstArg.label);
                P += ', ' + nextArg.value;
            }
            body = args[argCount - 1];
        }
        var strbody = ToString_1.ToString(body);
        label = Label_1.lub(label, strbody.label);
        // transform may use a parser, which means we cannot transform the body
        // in isolation (e.g., it may contain return), and we cannot assume that the
        // transformation returns a function
        var transformed = monitor.transform("function __jsflow_transformed() {\n        arguments.callee = __jsflow_callee;\n        arguments.caller = __jsflow_caller;\n        " + strbody.value + "\n      }");
        P = "(function ( " + P + " ) {\n        let __jsflow_callee = arguments.callee;\n        let __jsflow_caller = arguments.caller;\n        " + transformed + ";\n        return __jsflow_transformed.apply(this, arguments);\n      })";
        var prog;
        try {
            prog = esprima.parse(P, { loc: true });
        }
        catch (e) {
            monitor.Throw("SyntaxError", e.message, label);
        }
        // parsing returns a program --- we are interested in function declaration
        var func = prog.body[0].expression;
        var F = new FunctionObject_1.FunctionObject(func.params, func.body, new Value_1.Value(monitor.GlobalEnvironment, Label_1.bot));
        // For pretty printing
        F.Source = func;
        return new Value_1.Value(F, label);
    };
    return FunctionConstructor;
}(EcmaObject_1.EcmaObject));
exports.FunctionConstructor = FunctionConstructor;

},{"../Constants":64,"../Conversion/ToString":87,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/EcmaObject":137,"../Objects/FunctionObject":140,"../Value":184,"esprima":18}],71:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var HasInstance_1 = require("../HasInstance");
var NumberObject_1 = require("../Objects/NumberObject");
var ToNumber_1 = require("../Conversion/ToNumber");
// ------------------------------------------------------------
// The Number Constructor, 15.7.2
var NumberConstructor = /** @class */ (function (_super) {
    __extends(NumberConstructor, _super);
    function NumberConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        // not mandated by standard
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    NumberConstructor.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.NumberPrototype);
        Define_1.DefineFFF(this, constants.length, 1);
        Define_1.DefineFFF(this, constants.MAX_VALUE, this.host.MAX_VALUE);
        Define_1.DefineFFF(this, constants.MIN_VALUE, this.host.MIN_VALUE);
        Define_1.DefineFFF(this, constants.NaN, this.host.NaN);
        Define_1.DefineFFF(this, constants.NEGATIVE_INFINITY, this.host.NEGATIVE_INFINITY);
        Define_1.DefineFFF(this, constants.POSITIVE_INFINITY, this.host.POSITIVE_INFINITY);
    };
    NumberConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.7.1.1
    NumberConstructor.prototype.Call = function (thisArg, args) {
        if (!args[0]) {
            return new Value_1.Value(0, Label_1.bot);
        }
        return ToNumber_1.ToNumber(args[0]);
    };
    // 15.7.2.1
    NumberConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(0, Label_1.bot);
        var res = new NumberObject_1.NumberObject(arg0.value, arg0.label);
        return new Value_1.Value(res, Label_1.bot);
    };
    return NumberConstructor;
}(EcmaObject_1.EcmaObject));
exports.NumberConstructor = NumberConstructor;

},{"../Constants":64,"../Conversion/ToNumber":84,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/EcmaObject":137,"../Objects/NumberObject":145,"../Value":184}],72:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ObjectObject_1 = require("../Objects/ObjectObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToBoolean_1 = require("../Conversion/ToBoolean");
var HasInstance_1 = require("../HasInstance");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
var PropertyDescriptor_1 = require("../PropertyDescriptor");
var Interfaces_1 = require("../Interfaces");
// ------------------------------------------------------------
// Object Constructor, 15.2.3
var ObjectConstructor = /** @class */ (function (_super) {
    __extends(ObjectConstructor, _super);
    function ObjectConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.host = host;
        return _this;
    }
    ObjectConstructor.prototype.Setup = function () {
        Define_1.DefineFFF(this, constants.length, 1);
        // 15.2.3
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        // 15.2.3.1
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.ObjectPrototype);
        Define_1.DefineTFT(this, constants.getPrototypeOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(getPrototypeOf, 1, Object.getPrototypeOf));
        Define_1.DefineTFT(this, constants.getOwnPropertyDescriptor, new BuiltinFunctionObject_1.BuiltinFunctionObject(getOwnPropertyDescriptor, 2, Object.getOwnPropertyDescriptor));
        Define_1.DefineTFT(this, constants.getOwnPropertyNames, new BuiltinFunctionObject_1.BuiltinFunctionObject(getOwnPropertyNames, 1, Object.getOwnPropertyNames));
        Define_1.DefineTFT(this, constants.create, new BuiltinFunctionObject_1.BuiltinFunctionObject(create, 2, Object.create));
        Define_1.DefineTFT(this, constants.defineProperty, new BuiltinFunctionObject_1.BuiltinFunctionObject(defineProperty, 3, Object.defineProperty));
        Define_1.DefineTFT(this, constants.defineProperties, new BuiltinFunctionObject_1.BuiltinFunctionObject(defineProperties, 2, Object.defineProperties));
        Define_1.DefineTFT(this, constants.seal, new BuiltinFunctionObject_1.BuiltinFunctionObject(seal, 1, Object.seal));
        Define_1.DefineTFT(this, constants.freeze, new BuiltinFunctionObject_1.BuiltinFunctionObject(freeze, 1, Object.freeze));
        Define_1.DefineTFT(this, constants.preventExtensions, new BuiltinFunctionObject_1.BuiltinFunctionObject(preventExtensions, 1, Object.preventExtensions));
        Define_1.DefineTFT(this, constants.isSealed, new BuiltinFunctionObject_1.BuiltinFunctionObject(isSealed, 1, Object.isSealed));
        Define_1.DefineTFT(this, constants.isFrozen, new BuiltinFunctionObject_1.BuiltinFunctionObject(isFrozen, 1, Object.isFrozen));
        Define_1.DefineTFT(this, constants.isExtensible, new BuiltinFunctionObject_1.BuiltinFunctionObject(isExtensible, 1, Object.isExtensible));
        Define_1.DefineTFT(this, constants.keys, new BuiltinFunctionObject_1.BuiltinFunctionObject(keys, 1, Object.keys));
    };
    ObjectConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // ------------------------------------------------------------
    // 15.2.1.1
    ObjectConstructor.prototype.Call = function (thisArg, args) {
        var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var res;
        monitor.context.pushPC(arg0.label);
        if (arg0.value === undefined || arg0.value === null) {
            res = this.Construct(args);
            res.raise(arg0.label);
            monitor.context.popPC();
            return res;
        }
        res = ToObject_1.ToObject(arg0);
        monitor.context.popPC();
        return res;
    };
    // ------------------------------------------------------------
    // 15.2.2.1
    ObjectConstructor.prototype.Construct = function (args) {
        var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
        monitor.context.pushPC(arg0.label);
        var res;
        if (arg0.value === undefined || arg0.value === null) {
            var o = new ObjectObject_1.ObjectObject();
            res = new Value_1.Value(o, arg0.label);
            monitor.context.popPC();
            return res;
        }
        if (typeof arg0.value === 'object') {
            res = new Value_1.Value(arg0.value, arg0.label);
            monitor.context.popPC();
            return res;
        }
        res = ToObject_1.ToObject(arg0);
        monitor.context.popPC();
        return res;
    };
    return ObjectConstructor;
}(EcmaObject_1.EcmaObject));
exports.ObjectConstructor = ObjectConstructor;
// ------------------------------------------------------------
function AssertObject(arg, callee) {
    monitor.context.pushPC(arg.label);
    monitor.Throw("TypeError", callee + ' called on non-object (' + String(arg.value) + ')', arg.label);
}
// ------------------------------------------------------------
// 15.2.3.2
function getPrototypeOf(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.getPrototypeOf');
        throw 'TypeScript';
    }
    var proto = O.value.Prototype;
    return new Value_1.Value(proto.value, Label_1.lub(proto.label, O.label));
}
// ------------------------------------------------------------
// 15.2.3.3
var getOwnPropertyDescriptor = function (thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var P = args[1] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.getOwnPropertyDescriptor');
        throw 'TypeScript';
    }
    var name = ToString_1.ToString(P);
    var desc = O.GetOwnProperty(name);
    if (desc.value === undefined) {
        return new Value_1.Value(undefined, desc.label);
    }
    var obj = new ObjectObject_1.ObjectObject();
    if (PropertyDescriptor_1.IsDataDescriptor(desc.value)) {
        obj.DefineOwnProperty(constants.value, {
            value: desc.value.value,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
        obj.DefineOwnProperty(constants.writable, {
            value: desc.value.writable,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
    }
    else {
        //@ts-ignore DESC HELL
        var get = desc.value.get ? desc.value.get.actualFunction : desc.value.get;
        obj.DefineOwnProperty(constants.get, {
            value: get,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
        //@ts-ignore DESC HELL
        var set = desc.value.set ? desc.value.set.actualFunction : desc.value.set;
        obj.DefineOwnProperty(constants.set, {
            value: set,
            writable: true, enumerable: true, configurable: true,
            label: desc.value.label
        }, false);
    }
    obj.DefineOwnProperty(constants.enumerable, {
        value: desc.value.enumerable,
        writable: true, enumerable: true, configurable: true,
        label: desc.value.label
    }, false);
    obj.DefineOwnProperty(constants.configurable, {
        value: desc.value.configurable,
        writable: true, enumerable: true, configurable: true,
        label: desc.value.label
    }, false);
    return new Value_1.Value(obj, desc.label);
};
// ------------------------------------------------------------
// 15.2.3.4
function getOwnPropertyNames(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.getOwnPropertyNames');
        throw 'TypeScript';
    }
    var propertyNames = O.value.getOwnPropertyNames(O.label);
    var array = ArrayObject_1.ArrayObject.fromPropertyArray(propertyNames, O.value.struct);
    return new Value_1.Value(array, Label_1.bot);
}
// ------------------------------------------------------------
// 15.2.3.5
function create(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var Properties = args[1] || new Value_1.Value(undefined, Label_1.bot);
    if (O.value !== null && !Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.create');
        throw 'TypeScript';
    }
    var obj = new ObjectObject_1.ObjectObject();
    obj.Prototype = O;
    var objValue = new Value_1.Value(obj, Label_1.bot);
    if (Properties.value !== undefined) {
        defineProperties(thisArg, [objValue, Properties]);
    }
    return objValue;
}
// ------------------------------------------------------------
function ToPropertyDescriptor(Obj) {
    if (!Interfaces_1.IsIEcmaObject(Obj)) {
        AssertObject(Obj, 'Object.ToPropertyDescriptor');
        throw 'TypeScript';
    }
    var c = monitor.context;
    var lbl = new Label_1.Label();
    var desc = { label: Label_1.bot };
    var b;
    var x;
    var propertyName;
    // enumerable
    propertyName = constants.enumerable;
    b = Obj.HasProperty(propertyName);
    lbl = Label_1.lub(lbl, b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = ToBoolean_1.ToBoolean(Obj.Get(propertyName));
        c.popPC();
        lbl = Label_1.lub(lbl, x.label);
        desc[propertyName.value] = x.value;
    }
    // configurable
    propertyName = constants.configurable;
    b = Obj.HasProperty(propertyName);
    lbl = Label_1.lub(lbl, b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = ToBoolean_1.ToBoolean(Obj.Get(propertyName));
        c.popPC();
        lbl = Label_1.lub(lbl, x.label);
        desc[propertyName.value] = x.value;
    }
    // value
    propertyName = constants.value;
    b = Obj.HasProperty(propertyName);
    lbl = Label_1.lub(lbl, b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = Obj.Get(propertyName);
        c.popPC();
        lbl = Label_1.lub(lbl, x.label);
        desc[propertyName.value] = x.value;
    }
    // writable
    propertyName = constants.writable;
    b = Obj.HasProperty(propertyName);
    lbl = Label_1.lub(lbl, b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = ToBoolean_1.ToBoolean(Obj.Get(propertyName));
        c.popPC();
        lbl = Label_1.lub(lbl, x.label);
        desc[propertyName.value] = x.value;
    }
    // get
    propertyName = constants.get;
    b = Obj.HasProperty(propertyName);
    lbl = Label_1.lub(lbl, b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = Obj.Get(propertyName);
        c.popPC();
        lbl = Label_1.lub(lbl, x.label);
        desc[propertyName.value] = x.value;
    }
    // set
    propertyName = constants.set;
    b = Obj.HasProperty(propertyName);
    lbl = Label_1.lub(lbl, b.label);
    if (b.value) {
        c.pushPC(b.label);
        x = Obj.Get(propertyName);
        c.popPC();
        lbl = Label_1.lub(lbl, x.label);
        desc[propertyName.value] = x.value;
    }
    desc.label = lbl;
    return desc;
}
// ------------------------------------------------------------
// 15.2.3.6
function defineProperty(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var P = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var Attributes = args[2] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.defineProperty');
        throw 'TypeScript';
    }
    var name = ToString_1.ToString(P);
    var desc = ToPropertyDescriptor(Attributes);
    O.DefineOwnProperty(name, desc, true);
    return O;
}
// ------------------------------------------------------------
// 15.2.3.7
function defineProperties(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var Properties = args[1] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.defineProperties');
        throw 'TypeScript';
    }
    var props = ToObject_1.ToObject(Properties);
    var names = props.value.getOwnEnumerablePropertyNames(props.label);
    var descriptors = [];
    for (var i = 0, len = names.length; i < len; i++) {
        var P = names[i];
        var descObject = props.Get(P);
        //@ts-ignore DEC HELL
        var desc = ToPropertyDescriptor(descObject);
        descriptors.push({ name: P, descriptor: desc });
    }
    for (var i = 0, len = descriptors.length; i < len; i++) {
        var P = descriptors[i].name;
        var desc = descriptors[i].descriptor;
        O.DefineOwnProperty(P, desc, true);
    }
    return O;
}
// ------------------------------------------------------------
// 15.2.3.8
function seal(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.defineProperties');
        throw 'TypeScript';
    }
    var context = Label_1.lub(monitor.context.effectivePC, O.label);
    monitor.assert(Label_1.le(context, O.value.struct), 'Object.seal: context label ' + context + ' not below structural label ' + O.value.struct + ' of object');
    var labels = O.value.labels;
    for (var x in labels) {
        if (Object.hasOwnProperty.call(labels, x)) {
            monitor.assert(Label_1.le(context, labels[x].value), 'Object.seal: context label ' + context + ' not below label ' + labels[x].value + ' of ' + x);
        }
    }
    Object.seal(O.value.properties);
    O.value.Extensible = false;
    return O;
}
// ------------------------------------------------------------
// 15.2.3.9
function freeze(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.freeze');
        throw 'TypeScript';
    }
    var context = Label_1.lub(monitor.context.effectivePC, O.label);
    monitor.assert(Label_1.le(context, O.value.struct), 'Object.freeze: context label ' + context + ' not below structural label ' + O.value.struct + ' of object');
    var labels = O.value.labels;
    var properties = O.value.properties;
    for (var x in properties) {
        if (Object.hasOwnProperty.call(properties, x)) {
            var desc = Object.getOwnPropertyDescriptor(properties, x);
            if (desc.enumerable) {
                monitor.assert(Label_1.le(context, labels[x].value), 'Object.freeze: context label ' + context + ' not below label ' + labels[x].value + ' of ' + x);
            }
        }
    }
    Object.freeze(O.value.properties);
    O.value.Extensible = false;
    return O;
}
// ------------------------------------------------------------
// 15.2.3.10
function preventExtensions(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.preventExtensions');
        throw 'TypeScript';
    }
    var context = Label_1.lub(monitor.context.effectivePC, O.label);
    monitor.assert(Label_1.le(context, O.value.struct), 'Object.preventExtensions: context label ' + context + ' not below structural label ' + O.value.struct + ' of object');
    Object.preventExtensions(O.value.properties);
    O.value.Extensible = false;
    return O;
}
// ------------------------------------------------------------
// 15.2.3.11
function isSealed(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.isSealed');
        throw 'TypeScript';
    }
    var result = Object.isSealed(O.value.properties);
    return new Value_1.Value(result, Label_1.lub(O.label, O.value.struct));
}
// ------------------------------------------------------------
// 15.2.3.12
function isFrozen(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.isFrozen');
        throw 'TypeScript';
    }
    var result = Object.isFrozen(O.value.properties);
    return new Value_1.Value(result, Label_1.lub(O.label, O.value.struct));
}
// ------------------------------------------------------------
// 15.2.3.13
function isExtensible(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.isExtensible');
        throw 'TypeScript';
    }
    var result = Object.isExtensible(O.value.properties);
    return new Value_1.Value(result, Label_1.lub(O.label, O.value.struct));
}
// ------------------------------------------------------------
// 15.2.3.14
function keys(thisArg, args) {
    var O = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (!Interfaces_1.IsIEcmaObject(O)) {
        AssertObject(O, 'Object.isExtensible');
        throw 'TypeScript';
    }
    var enumerable = O.value.getOwnEnumerablePropertyNames(O.label);
    var array = ArrayObject_1.ArrayObject.fromPropertyArray(enumerable, O.value.struct);
    return new Value_1.Value(array, Label_1.bot);
}

},{"../Constants":64,"../Conversion/ToBoolean":81,"../Conversion/ToObject":85,"../Conversion/ToString":87,"../Define":91,"../HasInstance":120,"../Interfaces":122,"../Label":123,"../Objects/ArrayObject":132,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Objects/ObjectObject":146,"../PropertyDescriptor":156,"../Value":184}],73:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorConstructor_1 = require("./ErrorConstructor");
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var RangeErrorObject_1 = require("../Objects/RangeErrorObject");
var RangeErrorConstructor = /** @class */ (function (_super) {
    __extends(RangeErrorConstructor, _super);
    function RangeErrorConstructor(host) {
        return _super.call(this, host) || this;
    }
    RangeErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.RangeErrorPrototype);
    };
    RangeErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var o = new RangeErrorObject_1.RangeErrorObject(message);
        return new Value_1.Value(o, Label_1.bot);
    };
    return RangeErrorConstructor;
}(ErrorConstructor_1.ErrorConstructor));
exports.RangeErrorConstructor = RangeErrorConstructor;

},{"../Label":123,"../Objects/RangeErrorObject":147,"../Value":184,"./ErrorConstructor":68}],74:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorConstructor_1 = require("./ErrorConstructor");
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var ReferenceErrorObject_1 = require("../Objects/ReferenceErrorObject");
var ReferenceErrorConstructor = /** @class */ (function (_super) {
    __extends(ReferenceErrorConstructor, _super);
    function ReferenceErrorConstructor(host) {
        return _super.call(this, host) || this;
    }
    ReferenceErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ReferenceErrorPrototype);
    };
    ReferenceErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var o = new ReferenceErrorObject_1.ReferenceErrorObject(message);
        return new Value_1.Value(o, Label_1.bot);
    };
    return ReferenceErrorConstructor;
}(ErrorConstructor_1.ErrorConstructor));
exports.ReferenceErrorConstructor = ReferenceErrorConstructor;

},{"../Label":123,"../Objects/ReferenceErrorObject":148,"../Value":184,"./ErrorConstructor":68}],75:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var HasInstance_1 = require("../HasInstance");
var ToString_1 = require("../Conversion/ToString");
var Label_1 = require("../Label");
var RegExpObject_1 = require("../Objects/RegExpObject");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
// ------------------------------------------------------------
// The RegExp Constructor, 15.10.5
var RegExpConstructor = /** @class */ (function (_super) {
    __extends(RegExpConstructor, _super);
    function RegExpConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        // not mandated by standard
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    RegExpConstructor.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 2);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.RegExpPrototype);
    };
    RegExpConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.10.3.1
    RegExpConstructor.prototype.Call = function (thisArg, args) {
        var pattern = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var flags = args[1] || new Value_1.Value(undefined, Label_1.bot);
        if (RegExpObject_1.IsRegExpObject(pattern) && flags.value === undefined) {
            return pattern;
        }
        return this.Construct(args);
    };
    // 15.10.4.1
    RegExpConstructor.prototype.Construct = function (args) {
        var c = monitor.context;
        var pattern = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var flags = args[1] || new Value_1.Value(undefined, Label_1.bot);
        var P = "";
        var F = "";
        var l = Label_1.lub(pattern.label, flags.label);
        c.pushPC(l);
        if (RegExpObject_1.IsRegExpObject(pattern)) {
            if (flags.value === undefined) {
                var rx = pattern.value.PrimitiveValue;
                P = rx.source;
                F = (rx.global ? 'g' : '') + (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '');
            }
            else {
                monitor.Throw("TypeError", '', Label_1.bot);
            }
        }
        else {
            var _P = pattern.value === undefined ? new Value_1.Value("", l) : ToString_1.ToString(pattern);
            var _F = flags.value === undefined ? new Value_1.Value("", l) : ToString_1.ToString(flags);
            l = Label_1.lub(l, _P.label, _F.label);
            P = _P.value;
            F = _F.value;
        }
        var res;
        try {
            res = new RegExpObject_1.RegExpObject(new RegExp(P, F), l);
        }
        catch (e) {
            monitor.tryRethrow(e, true);
            monitor.fatal("RegExp.Construct, unable to lift " + e + " of type " + typeof e + " for RegExp(" + P + ", " + F + ")");
        }
        c.popPC();
        return new Value_1.Value(res, Label_1.bot);
    };
    return RegExpConstructor;
}(EcmaObject_1.EcmaObject));
exports.RegExpConstructor = RegExpConstructor;

},{"../Constants":64,"../Conversion/ToString":87,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/EcmaObject":137,"../Objects/RegExpObject":149,"../Value":184}],76:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var HasInstance_1 = require("../HasInstance");
var ToUInt16_1 = require("../Conversion/ToUInt16");
var ToString_1 = require("../Conversion/ToString");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var StringObject_1 = require("../Objects/StringObject");
// ------------------------------------------------------------
// The String Constructor, 15.5.2
var StringConstructor = /** @class */ (function (_super) {
    __extends(StringConstructor, _super);
    function StringConstructor(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        // not mandated by standard
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    StringConstructor.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 1);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.StringPrototype);
        Define_1.DefineTFT(this, constants.fromCharCode, new BuiltinFunctionObject_1.BuiltinFunctionObject(fromCharCode, 1, this.host.fromCharCode));
    };
    StringConstructor.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    // 15.5.1.1 -----------------------------------------------------------------
    StringConstructor.prototype.Call = function (thisArg, args) {
        if (!args[0]) {
            return new Value_1.Value('', Label_1.bot);
        }
        var str = ToString_1.ToString(args[0]);
        return str;
    };
    // 15.5.2.1 ----------------------------------------------------------------- 
    StringConstructor.prototype.Construct = function (args) {
        var value = args[0];
        var str;
        if (value) {
            var x = ToString_1.ToString(value);
            str = new StringObject_1.StringObject(x.value, x.label);
        }
        else {
            str = new StringObject_1.StringObject('');
        }
        return new Value_1.Value(str, Label_1.bot);
    };
    return StringConstructor;
}(EcmaObject_1.EcmaObject));
exports.StringConstructor = StringConstructor;
// --------------------------------------------------------------------------
// fromCharCode, 15.5.3.2 
function fromCharCode(thisArg, args) {
    var lbl = new Label_1.Label();
    var _args = [];
    for (var i = 0, len = args.length; i < len; i++) {
        var arg = ToUInt16_1.ToUInt16(args[i]);
        lbl = Label_1.lub(lbl, arg.label);
        _args[i] = arg.value;
    }
    var _String = monitor.instances.StringConstructor.host;
    var v = _String.fromCharCode.apply(_String, _args);
    return new Value_1.Value(v, lbl);
}

},{"../Constants":64,"../Conversion/ToString":87,"../Conversion/ToUInt16":88,"../Define":91,"../HasInstance":120,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Objects/StringObject":150,"../Value":184}],77:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorConstructor_1 = require("./ErrorConstructor");
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var SyntaxErrorObject_1 = require("../Objects/SyntaxErrorObject");
var SyntaxErrorConstructor = /** @class */ (function (_super) {
    __extends(SyntaxErrorConstructor, _super);
    function SyntaxErrorConstructor(host) {
        return _super.call(this, host) || this;
    }
    SyntaxErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.SyntaxErrorPrototype);
    };
    SyntaxErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var o = new SyntaxErrorObject_1.SyntaxErrorObject(message);
        return new Value_1.Value(o, Label_1.bot);
    };
    return SyntaxErrorConstructor;
}(ErrorConstructor_1.ErrorConstructor));
exports.SyntaxErrorConstructor = SyntaxErrorConstructor;

},{"../Label":123,"../Objects/SyntaxErrorObject":151,"../Value":184,"./ErrorConstructor":68}],78:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorConstructor_1 = require("./ErrorConstructor");
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var TypeErrorObject_1 = require("../Objects/TypeErrorObject");
var TypeErrorConstructor = /** @class */ (function (_super) {
    __extends(TypeErrorConstructor, _super);
    function TypeErrorConstructor(host) {
        return _super.call(this, host) || this;
    }
    TypeErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.TypeErrorPrototype);
    };
    TypeErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var o = new TypeErrorObject_1.TypeErrorObject(message);
        return new Value_1.Value(o, Label_1.bot);
    };
    return TypeErrorConstructor;
}(ErrorConstructor_1.ErrorConstructor));
exports.TypeErrorConstructor = TypeErrorConstructor;

},{"../Label":123,"../Objects/TypeErrorObject":152,"../Value":184,"./ErrorConstructor":68}],79:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorConstructor_1 = require("./ErrorConstructor");
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var URIErrorObject_1 = require("../Objects/URIErrorObject");
var URIErrorConstructor = /** @class */ (function (_super) {
    __extends(URIErrorConstructor, _super);
    function URIErrorConstructor(host) {
        return _super.call(this, host) || this;
    }
    URIErrorConstructor.prototype.Setup = function () {
        this.SetupBase(monitor.instances.URIErrorPrototype);
    };
    URIErrorConstructor.prototype.Construct = function (args) {
        var message = args[0] || new Value_1.Value(undefined, Label_1.bot);
        var o = new URIErrorObject_1.URIErrorObject(message);
        return new Value_1.Value(o, Label_1.bot);
    };
    return URIErrorConstructor;
}(ErrorConstructor_1.ErrorConstructor));
exports.URIErrorConstructor = URIErrorConstructor;

},{"../Label":123,"../Objects/URIErrorObject":153,"../Value":184,"./ErrorConstructor":68}],80:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Stack_1 = require("./Stack");
var PP_1 = require("./PP");
var Result_1 = require("./Result");
// --- -----------------------------------------------------------------------
var Bucket = /** @class */ (function () {
    function Bucket(element, prev, next) {
        this.element = element;
        this.next = next || null;
        this.prev = prev || null;
    }
    return Bucket;
}());
function isGuardedFunction(el) {
    return el.runfor !== undefined;
}
exports.isGuardedFunction = isGuardedFunction;
function isClosure(el) {
    return el.func !== undefined;
}
exports.isClosure = isClosure;
var WorkList = /** @class */ (function () {
    function WorkList() {
        this.length = 0;
        this.head = null;
        this.thenloc = null;
    }
    // ---
    WorkList.prototype.toString = function () {
        var pos = this.head;
        var str = 'worklist:';
        var cnt = 1;
        while (pos) {
            var element = pos.element;
            var line;
            if (typeof element === 'function') {
                line = cnt + ': ' + String(element);
            }
            else if ('func' in element && 'data' in element) {
                line = cnt + ': ' + String(element.func);
            }
            else {
                //@ts-ignore TYPES
                line = cnt + ': ' + element.type + ' ' + PP_1.pretty(element);
            }
            var ix = line.indexOf('\n');
            if (ix > 0) {
                line = line.slice(0, ix);
            }
            str = str + '\n' + line;
            pos = pos.next;
            cnt++;
        }
        return str;
    };
    // ---
    WorkList.prototype.push = function (element) {
        this.head = new Bucket(element, null, this.head);
        if (this.head.next !== null) {
            this.head.next.prev = this.head;
        }
        this.length++;
    };
    // ---
    WorkList.prototype.prepend = function (elements) {
        for (var i = elements.length - 1; i >= 0; i--) {
            this.push(elements[i]);
        }
    };
    // ---
    WorkList.prototype.peek = function () {
        if (this.head === null) {
            return monitor.fatal("WorkList.peek() empty work list");
        }
        return this.head.element;
    };
    // ---
    WorkList.prototype.pop = function () {
        if (this.head === null) {
            return monitor.fatal("WorkList.pop() empty work list");
        }
        var element = this.head.element;
        this.head = this.head.next;
        this.length--;
        return element;
    };
    // ---
    WorkList.prototype.empty = function () {
        return (this.head === null);
    };
    // ---
    WorkList.prototype.top = function () {
        return new WorkListPtr(this, null);
    };
    // ---
    WorkList.prototype.first = function (element) {
        if (element) {
            this.push(element);
            this.thenloc = this.head;
        }
        else {
            // if no element given, reset thenloc to force next called 'then'
            // to be a 'first'
            this.thenloc = null;
        }
    };
    // ---
    WorkList.prototype.then = function (element) {
        if (!this.thenloc) {
            this.first(element);
        }
        else {
            var before = this.thenloc;
            var after = this.thenloc.next;
            var bucket = new Bucket(element, before, after);
            before.next = bucket;
            this.thenloc = before.next;
            if (after) {
                after.prev = before.next;
            }
            this.length++;
        }
    };
    return WorkList;
}());
exports.WorkList = WorkList;
// -------------------------------------------------------------
var WorkListPtr = /** @class */ (function () {
    function WorkListPtr(worklist, pos) {
        this.worklist = worklist;
        this.pos = pos;
    }
    WorkListPtr.prototype.then = function (element, data) {
        if (!element) {
            throw Error();
        }
        var thing = element;
        if (typeof element === 'function' && data) {
            thing = { func: element, data: data };
        }
        if (this.pos) {
            var before = this.pos;
            var after = this.pos.next;
            var bucket = new Bucket(thing, before, after);
            before.next = bucket;
            this.pos = before.next;
            if (after) {
                after.prev = before.next;
            }
            this.worklist.length++;
        }
        else {
            this.worklist.push(thing);
            this.pos = this.worklist.head;
        }
        return this;
    };
    return WorkListPtr;
}());
exports.WorkListPtr = WorkListPtr;
// -------------------------------------------------------------
// The Execution Context
var Context = /** @class */ (function () {
    function Context(thisValue, variableEnv, lexicalEnv) {
        this.labels = new /** @class */ (function () {
            function class_1(outer) {
                this.excLbl = Label_1.bot;
                this.retLbl = Label_1.bot;
                this.labelmap = {};
                this.outer = outer;
            }
            Object.defineProperty(class_1.prototype, "exc", {
                get: function () {
                    if (monitor.options.get('monitor.taintMode')) {
                        return Label_1.bot;
                    }
                    return this.excLbl;
                },
                set: function (l) {
                    this.excLbl = l;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(class_1.prototype, "ret", {
                get: function () {
                    if (monitor.options.get('monitor.taintMode')) {
                        return Label_1.bot;
                    }
                    return this.retLbl;
                },
                set: function (l) {
                    this.retLbl = l;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(class_1.prototype, "pc", {
                get: function () {
                    if (monitor.options.get('monitor.taintMode')) {
                        return Label_1.bot;
                    }
                    return this.outer.pcStack.peek();
                },
                set: function (l) {
                    this.outer.pcStack.pop();
                    this.outer.pcStack.push(l);
                },
                enumerable: true,
                configurable: true
            });
            return class_1;
        }())(this);
        this.thisValue = thisValue;
        this.variableEnv = variableEnv;
        this.lexicalEnv = lexicalEnv;
        this.pcStack = new Stack_1.Stack();
        this.pcStack.push(Label_1.bot);
        this.workList = new WorkList();
        this.result = new Result_1.Result();
        this.valueStack = new Stack_1.Stack();
        this.codeStack = new Stack_1.Stack();
    }
    Object.defineProperty(Context.prototype, "effectivePC", {
        // ---
        get: function () {
            if (monitor.options.get('monitor.taintMode')) {
                return Label_1.bot;
            }
            return Label_1.lub(this.labels.pc, this.labels.exc, this.labels.ret);
        },
        enumerable: true,
        configurable: true
    });
    // ---
    Context.prototype.clone = function (thisValue, variableEnv, lexicalEnv) {
        var tV = thisValue || this.thisValue;
        var lE = lexicalEnv || this.lexicalEnv;
        var vE = variableEnv || this.variableEnv;
        var newCtx = new Context(tV, vE, lE);
        newCtx.labels.pc = this.effectivePC;
        newCtx.labels.exc = this.labels.exc;
        newCtx.labels.ret = this.labels.ret;
        return newCtx;
    };
    // ---
    Context.prototype.pushPC = function (l) {
        this.pcStack.push(Label_1.lub(l, this.labels.pc));
    };
    // ---
    Context.prototype.raisePC = function (l) {
        this.labels.pc = Label_1.lub(this.labels.pc, l);
    };
    // ---
    Context.prototype.popPC = function () {
        return this.pcStack.pop();
    };
    return Context;
}());
exports.Context = Context;

},{"./Label":123,"./PP":155,"./Result":174,"./Stack":175}],81:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
// -------------------------------------------------------------
// ToBoolean, 9.2
function ToBoolean(x) {
    return new Value_1.Value(Boolean(x.value), x.label);
}
exports.ToBoolean = ToBoolean;

},{"../Value":184}],82:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToInt32, 9.5
function ToInt32(x) {
    return ToNumber_1.ToNumber(x);
}
exports.ToInt32 = ToInt32;

},{"./ToNumber":84}],83:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToInteger, 9.4
//        Using ToNumber to capture the ToPrimitive
//        and rely on the internal conversion at the point of use
//        should suffice.
function ToInteger(x) {
    var number = ToNumber_1.ToNumber(x);
    if (isNaN(number.value)) {
        return new Value_1.Value(0, number.label);
    }
    else if (number.value === 0 ||
        number.value === Number.POSITIVE_INFINITY ||
        number.value === Number.NEGATIVE_INFINITY) {
        return number;
    }
    else {
        return new Value_1.Value(sign(number.value) * Math.floor(Math.abs(number.value)), number.label);
    }
}
exports.ToInteger = ToInteger;
function sign(n) {
    if (n > 0) {
        return 1;
    }
    else if (n < 0) {
        return -1;
    }
    return 0;
}

},{"../Value":184,"./ToNumber":84}],84:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var ToPrimitive_1 = require("./ToPrimitive");
// -------------------------------------------------------------
// ToNumber, 9.3
function ToNumber(x) {
    if (typeof x.value !== 'object') {
        return new Value_1.Value(Number(x.value), x.label);
    }
    monitor.context.pushPC(x.label);
    var primValue = ToPrimitive_1.ToPrimitive(x, 'number');
    monitor.context.popPC();
    return new Value_1.Value(Number(primValue.value), primValue.label);
}
exports.ToNumber = ToNumber;

},{"../Value":184,"./ToPrimitive":86}],85:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var Label_1 = require("../Label");
var BooleanObject_1 = require("../Objects/BooleanObject");
var NumberObject_1 = require("../Objects/NumberObject");
var StringObject_1 = require("../Objects/StringObject");
// -------------------------------------------------------------
// ToObject, 9.9
function ToObject(x) {
    // null or undefined, hence ==
    var value = x.value;
    if (value === null || value === undefined) {
        monitor.context.pushPC(x.label);
        monitor.Throw("TypeError", 'cannot convert ' + String(x.value) + ' to object', Label_1.bot);
    }
    monitor.context.pushPC(x.label);
    var res = undefined;
    switch (typeof x.value) {
        case 'boolean':
            res = new Value_1.Value(new BooleanObject_1.BooleanObject(x.value, x.label), x.label);
            break;
        case 'number':
            res = new Value_1.Value(new NumberObject_1.NumberObject(x.value, x.label), x.label);
            break;
        case 'string':
            //@ts-ignore
            res = new Value_1.Value(new StringObject_1.StringObject(x.value, x.label), x.label);
            break;
    }
    monitor.context.popPC();
    if (res !== undefined) {
        return res;
    }
    else {
        //@ts-ignore
        return new Value_1.Value(x.value, x.label);
    }
}
exports.ToObject = ToObject;

},{"../Label":123,"../Objects/BooleanObject":133,"../Objects/NumberObject":145,"../Objects/StringObject":150,"../Value":184}],86:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// ToPrimitive, 9.1  
function ToPrimitive(x, PreferredType) {
    if (x.value === null || typeof x.value !== 'object') {
        // @ts-ignore
        return x;
    }
    // will run int the context of x due to value lifting
    var res = x.DefaultValue(PreferredType);
    return res;
}
exports.ToPrimitive = ToPrimitive;

},{}],87:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var ToPrimitive_1 = require("./ToPrimitive");
// -------------------------------------------------------------
// ToString, 9.8
function ToString(x) {
    if (typeof x.value !== 'object')
        return new Value_1.Value(String(x.value), x.label);
    monitor.context.pushPC(x.label);
    var primValue = ToPrimitive_1.ToPrimitive(x, 'string');
    monitor.context.popPC();
    return new Value_1.Value(String(primValue.value), primValue.label);
}
exports.ToString = ToString;

},{"../Value":184,"./ToPrimitive":86}],88:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToUInt16, 9.7
function ToUInt16(x) {
    var number = ToNumber_1.ToNumber(x);
    if (isNaN(number.value) ||
        number.value === 0 ||
        number.value === Number.POSITIVE_INFINITY ||
        number.value === Number.NEGATIVE_INFINITY) {
        return new Value_1.Value(0, number.label);
    }
    var posInt = sign(number.value) * Math.floor(Math.abs(number.value));
    var int16bit = posInt % Math.pow(2, 16);
    return new Value_1.Value(int16bit, number.label);
}
exports.ToUInt16 = ToUInt16;
function sign(n) {
    if (n > 0) {
        return 1;
    }
    else if (n < 0) {
        return -1;
    }
    return 0;
}
;

},{"../Value":184,"./ToNumber":84}],89:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var ToNumber_1 = require("./ToNumber");
// -------------------------------------------------------------
// ToUInt32, 9.6
function ToUInt32(x) {
    return ToNumber_1.ToNumber(x);
}
exports.ToUInt32 = ToUInt32;

},{"./ToNumber":84}],90:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Value_1 = require("./Value");
var EcmaObject_1 = require("./Objects/EcmaObject");
var LexicalEnvironment_1 = require("./LexicalEnvironment");
// ------------------------------------------------------------
// 10.2.2.2
function NewDeclarativeEnvironment(e) {
    var envRec = new DeclarativeEnvironmentRecord();
    var env = new LexicalEnvironment_1.LexicalEnvironment(envRec, e);
    return env;
}
exports.NewDeclarativeEnvironment = NewDeclarativeEnvironment;
// ------------------------------------------------------------
// Declarative Environment Record, 10.2.1.1
var DeclarativeEnvironmentRecord = /** @class */ (function (_super) {
    __extends(DeclarativeEnvironmentRecord, _super);
    function DeclarativeEnvironmentRecord() {
        return _super.call(this) || this;
    }
    // HasBinding, 10.2.1.1.1
    DeclarativeEnvironmentRecord.prototype.HasBinding = function (s) {
        return this.HasProperty(s);
    };
    // CreateMutableBinding, 10.2.1.1.2
    DeclarativeEnvironmentRecord.prototype.CreateMutableBinding = function (p, d) {
        var desc = {
            value: undefined,
            label: monitor.context.effectivePC,
            writable: true,
            enumerable: true,
            configurable: d
        };
        this.DefineOwnProperty(p, desc, true);
    };
    // GetBindingValue 10.2.1.1.4
    DeclarativeEnvironmentRecord.prototype.GetBindingValue = function (p, s) {
        return this.Get(p);
    };
    // SetMutableBinding, 10.2.1.1.3
    DeclarativeEnvironmentRecord.prototype.SetMutableBinding = function (p, v, s) {
        this.Put(p, v, s === true);
    };
    // DeleteBinding, 10.2.1.1.5
    DeclarativeEnvironmentRecord.prototype.DeleteBinding = function (p) {
        return this.Delete(p);
    };
    // ImplicitThisValie. 10.2.1.1.6
    DeclarativeEnvironmentRecord.prototype.ImplicitThisValue = function () {
        return new Value_1.Value(undefined, Label_1.bot);
    };
    // CreateImmutableBinding, 10.2.1.1.7
    DeclarativeEnvironmentRecord.prototype.CreateImmutableBinding = function (p) {
        var desc = {
            value: undefined,
            label: Label_1.bot,
            writable: false,
            enumerable: true,
            configurable: true
        };
        this.DefineOwnProperty(p, desc, false);
    };
    // InitializeImmutableBinding, 10.2.1.1.8
    DeclarativeEnvironmentRecord.prototype.InitializeImmutableBinding = function (p, v) {
        var desc = this.GetOwnProperty(p).value;
        if (desc === undefined) {
            monitor.fatal("InitializeImmutableBinding: no bindinging for {p.value}");
        }
        else {
            desc.value = v.value;
            desc.label = v.label;
            // @ts-ignore desc should be a data descriptor created by CreateImmutableBinding
            this.DefineOwnProperty(p, desc, false);
        }
    };
    return DeclarativeEnvironmentRecord;
}(EcmaObject_1.EcmaObject));
exports.DeclarativeEnvironmentRecord = DeclarativeEnvironmentRecord;

},{"./Label":123,"./LexicalEnvironment":124,"./Objects/EcmaObject":137,"./Value":184}],91:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
// TODO: label of name not used; only Value to be compatible with constants - reasonable?
function Define(_this, name, v, opts) {
    opts = opts || {};
    var pd = {
        value: v,
        writable: opts.writable === true,
        enumerable: opts.enumerable === true,
        configurable: opts.configurable === true
    };
    Object.defineProperty(_this.properties, name.value, pd);
    _this.labels[name.value] = { value: opts.label || Label_1.bot, existence: opts.existence || Label_1.bot };
}
exports.Define = Define;
// ---
function DefineFFT(_this, name, v, opts) {
    opts = opts || {};
    Object.defineProperty(_this.properties, name.value, {
        value: v,
        configurable: true
    });
    _this.labels[name.value] = { value: opts.label || Label_1.bot, existence: opts.existence || Label_1.bot };
}
exports.DefineFFT = DefineFFT;
// ---
function DefineFFF(_this, name, v, opts) {
    opts = opts || {};
    Object.defineProperty(_this.properties, name.value, { value: v });
    _this.labels[name.value] = { value: opts.label || Label_1.bot, existence: opts.existence || Label_1.bot };
}
exports.DefineFFF = DefineFFF;
// ---
function DefineTFF(_this, name, v, opts) {
    opts = opts || {};
    Object.defineProperty(_this.properties, name.value, {
        value: v,
        writable: true
    });
    _this.labels[name.value] = { value: opts.label || Label_1.bot, existence: opts.existence || Label_1.bot };
}
exports.DefineTFF = DefineTFF;
// ---
function DefineTFT(_this, name, v, opts) {
    opts = opts || {};
    Object.defineProperty(_this.properties, name.value, {
        value: v,
        writable: true,
        configurable: true
    });
    _this.labels[name.value] = { value: opts.label || Label_1.bot, existence: opts.existence || Label_1.bot };
}
exports.DefineTFT = DefineTFT;
// ------------------------------------------------------------

},{"./Label":123}],92:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var Label_1 = require("../Label");
var ToNumber_1 = require("../Conversion/ToNumber");
var ToPrimitive_1 = require("../Conversion/ToPrimitive");
var ToUInt32_1 = require("../Conversion/ToUInt32");
var ToInt32_1 = require("../Conversion/ToInt32");
var ToString_1 = require("../Conversion/ToString");
var GetValue_1 = require("../GetValue");
var ToBoolean_1 = require("../Conversion/ToBoolean");
// -------------------------------------------------------------
// Equality Operators, 11.9
function binaryEqs(op, wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var res;
    while (true) {
        var lt = typeof lval.value;
        var rt = typeof rval.value;
        lt = lval.value === undefined ? 'undefined' : lt;
        rt = rval.value === undefined ? 'undefined' : rt;
        lt = lval.value === null ? 'null' : lt;
        rt = rval.value === null ? 'null' : rt;
        // must use strict in order not to trigger conversion
        //   but then null and undefined must be handled separately
        if (lt === rt) {
            res = new Value_1.Value(lval.value === rval.value, Label_1.lub(lval.label, rval.label));
            break;
        }
        if ((lval.value === null && rval.value === undefined) ||
            (lval.value === undefined && rval.value === null)) {
            res = new Value_1.Value(true, Label_1.lub(lval.label, rval.label));
            break;
        }
        if (lt === 'number' && rt === 'string') {
            rval = ToNumber_1.ToNumber(rval);
            continue;
        }
        if (lt === 'string' && rt === 'number') {
            lval = ToNumber_1.ToNumber(lval);
            continue;
        }
        if (lt === 'boolean') {
            lval = ToNumber_1.ToNumber(lval);
            continue;
        }
        if (rt === 'boolean') {
            rval = ToNumber_1.ToNumber(rval);
            continue;
        }
        if ((lt === 'string' || lt === 'number') &&
            rt === 'object') {
            rval = ToPrimitive_1.ToPrimitive(rval);
            continue;
        }
        if (lt === 'object' &&
            (rt === 'string' || rt === 'number')) {
            lval = ToPrimitive_1.ToPrimitive(lval);
            continue;
        }
        res = new Value_1.Value(false, Label_1.lub(lval.label, rval.label));
        break;
    }
    if (op === '!=') {
        res.value = !res.value;
    }
    vs.push(res);
}
// -------------------------------------------------------------
// Strict Equality Operators, 11.9.4, 11.9.5
function binaryStrictEqs(op, wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var res = new Value_1.Value(lval.value === rval.value, Label_1.lub(lval.label, rval.label));
    if (op === '!==') {
        res.value = !res.value;
    }
    vs.push(res);
}
exports.binaryStrictEqs = binaryStrictEqs;
// -------------------------------------------------------------
// Relational Operators, 11.8
//  The evaluation order is important, 11.8.5
function binaryOrds(op, wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var lprim, rprim;
    if (op.charAt(0) === '<' || op.charAt(0) === '>') {
        lprim = ToPrimitive_1.ToPrimitive(lval, 'number');
        rprim = ToPrimitive_1.ToPrimitive(rval, 'number');
    }
    else {
        lprim = ToPrimitive_1.ToPrimitive(lval);
        rprim = ToPrimitive_1.ToPrimitive(rval);
    }
    var res;
    if (typeof lprim.value !== 'string' &&
        typeof rprim.value !== 'string') {
        var lnum = ToNumber_1.ToNumber(lprim);
        var rnum = ToNumber_1.ToNumber(rprim);
        var val = eval('lnum.value ' + op + ' rnum.value');
        res = new Value_1.Value(val, Label_1.lub(lnum.label, rnum.label));
    }
    else {
        var val = eval('lprim.value ' + op + ' rprim.value');
        res = new Value_1.Value(val, Label_1.lub(lprim.label, rprim.label));
    }
    vs.push(res);
}
// -------------------------------------------------------------
// Bitwise Shift Operators, 11.7
function binaryShifts(op, wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var lnum = (op === '>>>') ? ToUInt32_1.ToUInt32(lval) : ToInt32_1.ToInt32(lval);
    var rnum = ToUInt32_1.ToUInt32(rval);
    var val = eval('lnum.value ' + op + ' rnum.value');
    vs.push(new Value_1.Value(val, Label_1.lub(lnum.label, rnum.label)));
}
// -------------------------------------------------------------
// Binary Bitwise Operators, 11.10
function binaryBitwiseOps(op, wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var lnum = ToInt32_1.ToInt32(lval);
    var rnum = ToInt32_1.ToInt32(rval);
    var val = eval('lnum.value ' + op + ' rnum.value');
    vs.push(new Value_1.Value(val, Label_1.lub(lnum.label, rnum.label)));
}
// -------------------------------------------------------------
// Plus, 11.6
function binaryPlus(wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var lprim = ToPrimitive_1.ToPrimitive(lval);
    var rprim = ToPrimitive_1.ToPrimitive(rval);
    var res;
    if ((typeof lprim.value) === 'string' ||
        (typeof rprim.value) === 'string') {
        var lstr = ToString_1.ToString(lprim);
        var rstr = ToString_1.ToString(rprim);
        res = new Value_1.Value(lstr.value + rstr.value, Label_1.lub(lprim.label, rprim.label));
    }
    else {
        var lnum = ToNumber_1.ToNumber(lprim);
        var rnum = ToNumber_1.ToNumber(rprim);
        res = new Value_1.Value(lnum.value + rnum.value, Label_1.lub(lnum.label, rnum.label));
    }
    vs.push(res);
}
// -------------------------------------------------------------
// Multiplicative operators, 11.5, and minus, 11.6
function binaryArithmeticOps(op, wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    var leftNum = ToNumber_1.ToNumber(lval);
    var rightNum = ToNumber_1.ToNumber(rval);
    var val = eval('leftNum.value ' + op + ' rightNum.value');
    vs.push(new Value_1.Value(val, Label_1.lub(leftNum.label, rightNum.label)));
}
// -------------------------------------------------------------
// The in operator, 11.8.7
function binaryIn(wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    if (typeof rval.value !== 'object') {
        if (false) { // SILENT ERROR
            vs.push(new Value_1.Value(false, Label_1.lub(lval.label, rval.label)));
            return;
        }
        monitor.Throw("TypeError", "invalid 'in' parameter", rval.label);
    }
    vs.push(rval.HasProperty(ToString_1.ToString(lval)));
}
// -------------------------------------------------------------
// The instanceof operator, 11.8.6
function binaryInstanceof(wl, vs) {
    // @ts-ignore
    var rval = vs.pop();
    // @ts-ignore
    var lval = vs.pop();
    if (rval.value === null || typeof rval.value !== 'object') {
        if (false) { // SILENT ERROR
            vs.push(new Value_1.Value(false, Label_1.lub(lval.label, rval.label)));
        }
        monitor.Throw("TypeError", "invalid 'instanceof' parameter", rval.label);
        throw 'TypeScript';
    }
    if (!('HasInstance' in rval.value)) {
        if (false) { // SILENT ERROR
            vs.push(new Value_1.Value(false, Label_1.lub(lval.label, rval.label)));
        }
        monitor.Throw("TypeError", "invalid 'instanceof' parameter", rval.label);
    }
    vs.push(rval.HasInstance(lval));
}
// -------------------------------------------------------------
exports.binarytbl = {
    '==': binaryEqs.bind(null, '=='),
    '!=': binaryEqs.bind(null, '!='),
    '===': binaryStrictEqs.bind(null, '==='),
    '!==': binaryStrictEqs.bind(null, '!=='),
    '<': binaryOrds.bind(null, '<'),
    '<=': binaryOrds.bind(null, '<='),
    '>': binaryOrds.bind(null, '>'),
    '>=': binaryOrds.bind(null, '>='),
    '<<': binaryShifts.bind(null, '<<'),
    '>>': binaryShifts.bind(null, '>>'),
    '>>>': binaryShifts.bind(null, '>>>'),
    '+': binaryPlus,
    '-': binaryArithmeticOps.bind(null, '-'),
    '*': binaryArithmeticOps.bind(null, '*'),
    '/': binaryArithmeticOps.bind(null, '/'),
    '%': binaryArithmeticOps.bind(null, '%'),
    '|': binaryBitwiseOps.bind(null, '|'),
    '&': binaryBitwiseOps.bind(null, '&'),
    '^': binaryBitwiseOps.bind(null, '^'),
    'in': binaryIn,
    'instanceof': binaryInstanceof
};
// -------------------------------------------------------------
// Binary Logical ||, 11.11
function binaryLogicalOr(wl, vs) {
    //@ts-ignore STACK
    var lval = GetValue_1.GetValue(vs.pop());
    vs.push(lval);
    var lb = ToBoolean_1.ToBoolean(lval);
    var right = wl.pop();
    if (lb.value) {
        return;
    }
    monitor.context.pushPC(lb.label);
    var ip = wl.top();
    ip.then(right);
    ip.then(binaryLogicalOr_end);
}
// ---
function binaryLogicalOr_end(wl, vs) {
    //@ts-ignore STACK
    var rval = GetValue_1.GetValue(vs.pop());
    //@ts-ignore
    var lval = vs.pop();
    monitor.context.popPC();
    vs.push(new Value_1.Value(rval.value, Label_1.lub(rval.label, lval.label)));
}
// -------------------------------------------------------------
// Binary Logical &&, 11.11
function binaryLogicalAnd(wl, vs) {
    //@ts-ignore STACK
    var lval = GetValue_1.GetValue(vs.pop());
    vs.push(lval);
    var lb = ToBoolean_1.ToBoolean(lval);
    var right = wl.pop();
    if (!lb.value) {
        return;
    }
    monitor.context.pushPC(lb.label);
    var ip = wl.top();
    ip.then(right);
    ip.then(binaryLogicalAnd_end);
}
// ---
function binaryLogicalAnd_end(wl, vs) {
    //@ts-ignore STACK
    var rval = GetValue_1.GetValue(vs.pop());
    //@ts-ignore STACK
    var lval = vs.pop();
    monitor.context.popPC();
    vs.push(new Value_1.Value(rval.value, Label_1.lub(rval.label, lval.label)));
}
// -------------------------------------------------------------
exports.logicaltbl = {
    '||': binaryLogicalOr,
    '&&': binaryLogicalAnd
};
// -------------------------------------------------------------
function assignmentOps(op, wl, vs) {
    //@ts-ignore STACK
    var rval = GetValue_1.GetValue(vs.pop());
    var lref = vs.pop();
    if (op !== null) {
        vs.push(lref);
        //@ts-ignore STACK
        vs.push(GetValue_1.GetValue(lref));
        vs.push(rval);
        exports.binarytbl[op](wl, vs);
    }
    else {
        vs.push(lref);
        vs.push(rval);
    }
}
exports.assignmenttbl = {
    '=': assignmentOps.bind(null, null),
    '+=': assignmentOps.bind(null, '+'),
    '-=': assignmentOps.bind(null, '-'),
    '*=': assignmentOps.bind(null, '*'),
    '/=': assignmentOps.bind(null, '/'),
    '%=': assignmentOps.bind(null, '%'),
    '>>=': assignmentOps.bind(null, '>>'),
    '<<=': assignmentOps.bind(null, '<<'),
    '>>>=': assignmentOps.bind(null, '>>>'),
    '|=': assignmentOps.bind(null, '|'),
    '&=': assignmentOps.bind(null, '&'),
    '^=': assignmentOps.bind(null, '^')
};

},{"../Conversion/ToBoolean":81,"../Conversion/ToInt32":82,"../Conversion/ToNumber":84,"../Conversion/ToPrimitive":86,"../Conversion/ToString":87,"../Conversion/ToUInt32":89,"../GetValue":119,"../Label":123,"../Value":184}],93:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var FunctionObject_1 = require("../Objects/FunctionObject");
var ArgumentsObject_1 = require("../Objects/ArgumentsObject");
var Value_1 = require("../Value");
var Label_1 = require("../Label");
var constants = require("../Constants");
var estraverse = require("estraverse");
// ------------------------------------------------------------
// 10.5 - strict ignored
function DeclarationBindingInstantiation(context, F, args) {
    var isFunctionCode, isEvalCode, code;
    if (F instanceof FunctionObject_1.FunctionObject) {
        isFunctionCode = true;
        isEvalCode = false;
        code = F.Code;
    }
    else {
        isFunctionCode = false;
        isEvalCode = true;
        code = F;
    }
    var env = context.variableEnv;
    var configurableBindings = isEvalCode;
    if (isFunctionCode) {
        BindArguments(env, F.FormalParameters, args);
    }
    var pc = context.effectivePC;
    HoistFunctions(env, code, configurableBindings, pc);
    var argumentsAlreadyDeclared = env.HasBinding(constants['arguments']);
    if (isFunctionCode && !argumentsAlreadyDeclared.value) {
        // make sure it returns a Value
        var argsObj = ArgumentsObject_1.CreateArgumentsObject(env, F, args);
        // Should no longer be supported
        // F.DefineOwnProperty(constants['arguments'], argsObj, false);
        env.CreateMutableBinding(constants['arguments']);
        env.SetMutableBinding(constants['arguments'], argsObj, false);
    }
    HoistVariables(env, code, configurableBindings, pc);
}
exports.DeclarationBindingInstantiation = DeclarationBindingInstantiation;
// ------------------------------------------------------------
// Function hoisting, part of 10.5
function HoistFunctions(env, script, configurableBinding, pc) {
    if (!script.functionDeclarations) {
        // 
        script.functionDeclarations = [];
        var visitor = {};
        //@ts-ignore SYNTAX
        visitor.leave = function () { };
        //@ts-ignore SYNTAX
        visitor.enter = function (node) {
            if (node.type === 'FunctionDeclaration') {
                script.functionDeclarations.push(node);
            }
            // Do not hoist inside functions
            if (node.type === 'FunctionDeclaration' ||
                node.type === 'FunctionExpression') {
                this.skip();
            }
        };
        estraverse.traverse(script, visitor);
    }
    var ds = script.functionDeclarations;
    var i;
    var len = ds.length;
    for (i = 0; i < len; i++) {
        var fn = new Value_1.Value(ds[i].id.name, Label_1.bot);
        var fo = new FunctionObject_1.FunctionObject(ds[i].params, ds[i].body, env);
        fo.Name = ds[i].id.name;
        fo.Source = ds[i];
        var funcAlreadyDeclared = env.HasBinding(fn);
        if (!funcAlreadyDeclared.value) {
            env.CreateMutableBinding(fn, configurableBinding);
        }
        env.SetMutableBinding(fn, new Value_1.Value(fo, pc));
    }
}
exports.HoistFunctions = HoistFunctions;
// ------------------------------------------------------------
// Variable hoisting, part of 10.5
function HoistVariables(env, script, configurableBindings, pc) {
    if (!script.variableDeclarations) {
        script.variableDeclarations = [];
        var visitor = {};
        //@ts-ignore SYNTAX
        visitor.leave = function () { };
        //@ts-ignore SYNTAX
        visitor.enter = function (node) {
            // Do not hoist inside functions
            if (node.type === 'FunctionDeclaration' ||
                node.type === 'FunctionExpression') {
                this.skip();
            }
            if (node.type === 'VariableDeclaration') {
                for (var i = 0, len = node.declarations.length; i < len; i++) {
                    var declarator = node.declarations[i];
                    var pattern = declarator.id;
                    script.variableDeclarations.push(pattern);
                }
            }
        };
        estraverse.traverse(script, visitor);
    }
    var ds = script.variableDeclarations;
    var i;
    var len = ds.length;
    for (i = 0; i < len; i++) {
        if (ds[i].type !== 'Identifier') {
            monitor.fatal('Patters is variable declarations not supported');
        }
        // declarations are indentifiers, not general patterns
        var dn = new Value_1.Value(ds[i].name, Label_1.bot);
        var varAlreadyDeclared = env.HasBinding(dn);
        if (!varAlreadyDeclared.value) {
            env.CreateMutableBinding(dn, configurableBindings);
            env.SetMutableBinding(dn, new Value_1.Value(undefined, pc));
        }
    }
}
exports.HoistVariables = HoistVariables;
// ------------------------------------------------------------
// Bind Arguments, 
function BindArguments(env, names, args) {
    if (args == undefined)
        return;
    var argCount = args.length;
    var nameCount = names.length;
    monitor.context.pushPC(Label_1.bot);
    for (var n = 0; n < nameCount; n++) {
        var v;
        if (n >= argCount)
            v = new Value_1.Value(undefined, Label_1.bot);
        else
            v = args[n];
        var id = names[n];
        if (id.type !== 'Identifier') {
            monitor.fatal(id.type + ' is not supported in BindArguments');
        }
        var argName = new Value_1.Value(id.name, Label_1.bot);
        var argAlreadyDeclared = env.HasBinding(argName);
        monitor.context.raisePC(argAlreadyDeclared.label);
        if (!argAlreadyDeclared.value) {
            env.CreateMutableBinding(argName);
        }
        env.SetMutableBinding(argName, v);
    }
    monitor.context.popPC();
}
exports.BindArguments = BindArguments;

},{"../Constants":64,"../Label":123,"../Objects/ArgumentsObject":131,"../Objects/FunctionObject":140,"../Value":184,"estraverse":19}],94:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var JSFlowDebugError = /** @class */ (function (_super) {
    __extends(JSFlowDebugError, _super);
    function JSFlowDebugError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, __spread(args)) || this;
    }
    return JSFlowDebugError;
}(Error));
exports.JSFlowDebugError = JSFlowDebugError;
function AssertValueStackSize(expectedSize, vs) {
    if (vs.size() !== expectedSize) {
        throw new JSFlowDebugError("Expected size of value stack to be " + expectedSize + " but it is " + vs.size());
    }
}
exports.AssertValueStackSize = AssertValueStackSize;
function CheckValueStackSize(expectedSize, msg) {
    var exc = new JSFlowDebugError();
    return function (wl, vs) {
        if (vs.size() !== expectedSize) {
            exc.message = "Expected size of value stack to be " + expectedSize + " but it is " + vs.size();
            throw exc;
        }
    };
}
exports.CheckValueStackSize = CheckValueStackSize;
function IsCanary(x) {
    return typeof x === 'object' && x !== null && x.token !== undefined && x.vssize !== undefined;
}
function PushCanary(vs, owner) {
    var canary = { token: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), owner: owner, vssize: vs.size() };
    //@ts-ignore CANARY
    vs.push(canary);
    return canary;
}
exports.PushCanary = PushCanary;
function AssertValidCanary(vs, expected) {
    var x = vs.pop();
    if (!IsCanary(x) || x.token !== expected.token) {
        vs.push(x);
        console.log('[JSFlow FATAL] Canary verification failed:', Error().stack);
        throw new JSFlowDebugError("Cannot verify canary");
    }
}
exports.AssertValidCanary = AssertValidCanary;

},{}],95:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Result_1 = require("../Result");
var Value_1 = require("../Value");
var Label_1 = require("../Label");
var SyntaxErrorObject_1 = require("../Objects/SyntaxErrorObject");
var Context_1 = require("../Context");
var Expression_1 = require("./Expression");
var Statement_1 = require("./Statement");
var esprima = require("esprima");
var Binding_1 = require("./Binding");
var DeclarativeEnvironmentRecord_1 = require("../DeclarativeEnvironmentRecord");
var ObjectEnvironmentRecord_1 = require("../ObjectEnvironmentRecord");
var Task_1 = require("./Task");
var CrawlerUtil_1 = require("../Toplevel/crawler/CrawlerUtil");
// ------------------------------------------------------------
function running() {
    return !monitor.context.workList.empty();
}
exports.running = running;
// ------------------------------------------------------------
function execute(ast, debugEnabled) {
    monitor.context.workList.push(ast);
    monitor.context.result = new Result_1.Result();
    if (debugEnabled === undefined) {
        debugEnabled = true;
    }
    var cont = true;
    do {
        if (debugEnabled && monitor.debug.active) {
            return monitor.context.result;
        }
        cont = step();
        monitor.executionInfo.step();
    } while (cont);
    // #CRAWLER
    if (CrawlerUtil_1.IsCrawler(monitor)) {
        monitor.CrawlerData.DumpToCrawler();
    }
    return monitor.context.result;
}
exports.execute = execute;
// ------------------------------------------------------------
function resume() {
    var cont = true;
    do {
        cont = step();
        if (monitor.debug.active) {
            return monitor.context.result;
        }
    } while (cont);
    return monitor.context.result;
}
exports.resume = resume;
// ------------------------------------------------------------
function executeGlobalCode(code, origin, options) {
    try {
        /* convert code to es5, using sourceType 'unambigious', meaning it will be
         * interpreted as script in a browser and _not_ add "use strict", and
         * either a script or module in nodejs (and add "use strict" if it is a
         * module) */
        var transformed = monitor.transform(code);
        monitor.code = code;
        monitor.ast = esprima.parse(transformed, { loc: true, range: true, tolerant: true });
    }
    catch (e) {
        var msg = new Value_1.Value(e.description + " in " + origin + " : " + e.lineNumber + " : " + e.column, Label_1.bot);
        var obj = new SyntaxErrorObject_1.SyntaxErrorObject(msg);
        var result_1 = new Result_1.Result();
        result_1.type = 'throw';
        result_1.value = new Value_1.Value(obj, Label_1.bot);
        return result_1;
    }
    var debugEnabled = true;
    if (options && typeof options.debugEnabled !== 'undefined') {
        debugEnabled = options.debugEnabled;
    }
    enterGlobalCode(monitor.ast);
    var result = execute(monitor.ast, debugEnabled);
    monitor.executionInfo.report();
    return result;
}
exports.executeGlobalCode = executeGlobalCode;
// ------------------------------------------------------------
//   contains the declaration binding (10.5) of global code
function enterGlobalCode(ast) {
    var c = monitor.context;
    // 10.5 - hoisting
    Binding_1.HoistFunctions(c.variableEnv, ast, false, Label_1.bot);
    Binding_1.HoistVariables(c.variableEnv, ast, false, Label_1.bot);
}
exports.enterGlobalCode = enterGlobalCode;
// ---
function enterEvalCode(code, _eval) {
    var c = monitor.context;
    // 15.1.2.1.1, is direct call
    var isDirect;
    //@ts-ignore TYPES
    isDirect = c.currentCall.reference.base.value instanceof ObjectEnvironmentRecord_1.ObjectEnvironmentRecord ||
        //@ts-ignore TYPES
        c.currentCall.reference.base.value instanceof DeclarativeEnvironmentRecord_1.DeclarativeEnvironmentRecord;
    //@ts-ignore TYPES
    isDirect = isDirect && c.currentCall.reference.propertyName.value === 'eval';
    //@ts-ignore TYPES
    isDirect = isDirect && c.currentCall.target.actualFunction === _eval;
    var context = c.clone();
    // 10.4.2 - no calling context or not direct call
    if (!isDirect) {
        var global = monitor.GlobalObject;
        var globalEnv = monitor.GlobalEnvironment;
        context.thisValue = new Value_1.Value(global, Label_1.bot);
        context.lexicalEnv = new Value_1.Value(globalEnv, Label_1.bot);
        context.variableEnv = new Value_1.Value(globalEnv, Label_1.bot);
    }
    //@ts-ignore TYPES
    Binding_1.DeclarationBindingInstantiation(context, code);
    // for stack trace 
    context.owner = 'eval';
    return context;
}
exports.enterEvalCode = enterEvalCode;
// -------------------------------------------------------------
function step() {
    //@ts-ignore .LAST
    if (monitor.last === undefined)
        monitor.last = [];
    var c = monitor.context;
    var wl = c.workList;
    var vs = c.valueStack;
    var result = c.result;
    if (wl.empty()) {
        return false;
    }
    var task = wl.pop();
    //@ts-ignore .LAST
    if (monitor.last.length > 100) {
        //@ts-ignore .LAST
        monitor.last.shift();
    }
    //@ts-ignore .LAST
    monitor.last.push(task);
    try {
        // throw, continue, or break state
        if (result.type !== 'normal') {
            while (true) {
                if (task instanceof Task_1.Task && task.RunFor(result.type)) {
                    task.Execute(wl, vs);
                    return true;
                }
                if (Context_1.isGuardedFunction(task) && task.runfor !== undefined && result.type in task.runfor) {
                    //console.log(task.name);
                    task(wl, vs);
                    return true;
                }
                if (Context_1.isClosure(task) && task.func.runfor !== undefined && result.type in task.func.runfor) {
                    //console.log(task.func.name);
                    task.func.call(task.data, wl, vs);
                    return true;
                }
                if (wl.empty()) {
                    break;
                }
                //      console.log('skipping', task);
                task = wl.pop();
                //@ts-ignore .LAST
                if (monitor.last.length > 100) {
                    //@ts-ignore .LAST
                    monitor.last.shift();
                }
                //@ts-ignore .LAST
                monitor.last.push(task);
            }
            return false;
        }
        if (task instanceof Task_1.Task) {
            task.Execute(wl, vs);
            return true;
        }
        // function?
        if (typeof task === 'function') {
            //console.log(task.name);
            task(wl, vs);
            return true;
        }
        // closure?
        if ('func' in task && 'data' in task) {
            //console.log(task.func.name);
            task.func.call(task.data, wl, vs);
            return true;
        }
        // otherwise, syntax
        var node = task;
        // expressions
        if (node.type in Expression_1.expressiontbl) {
            //console.log('expression', node.type);
            Expression_1.expressiontbl[node.type](node, wl, vs);
            return true;
        }
        // statement 
        // for stack trace
        c.codeStack.push(node);
        wl.top().then(PopCodeStack.Instance);
        if (node.type in Statement_1.statementtbl) {
            //   console.log('statement', node.type);
            Statement_1.statementtbl[node.type](node, wl, vs);
            return true;
        }
        monitor.fatal(node.type + ' not implemented');
    }
    catch (e) {
        if (e instanceof Value_1.Value) {
            // Verfiy that the exception is allowed 
            monitor.assert(Label_1.le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
            // For observable flows
            c.labels.exc = Label_1.lub(c.labels.exc, c.effectivePC);
            result.type = 'throw';
            result.value = e;
            return true;
        }
        throw e;
    }
    return true;
}
var PopCodeStack = /** @class */ (function (_super) {
    __extends(PopCodeStack, _super);
    function PopCodeStack() {
        return _super.call(this, Task_1.Task.runfor_all) || this;
    }
    PopCodeStack.prototype.Execute = function (wl, vs) {
        monitor.context.codeStack.pop();
    };
    PopCodeStack.Instance = new PopCodeStack();
    return PopCodeStack;
}(Task_1.Task));

},{"../Context":80,"../DeclarativeEnvironmentRecord":90,"../Label":123,"../ObjectEnvironmentRecord":130,"../Objects/SyntaxErrorObject":151,"../Result":174,"../Toplevel/crawler/CrawlerUtil":178,"../Value":184,"./Binding":93,"./Expression":96,"./Statement":97,"./Task":98,"esprima":18}],96:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var Reference_1 = require("../Reference");
var ArrayObject_1 = require("../Objects/ArrayObject");
var Label_1 = require("../Label");
var GetValue_1 = require("../GetValue");
var ObjectObject_1 = require("../Objects/ObjectObject");
var PropertyDescriptor_1 = require("../PropertyDescriptor");
var FunctionObject_1 = require("../Objects/FunctionObject");
var DeclarativeEnvironmentRecord_1 = require("../DeclarativeEnvironmentRecord");
var UnaryOperators_1 = require("./UnaryOperators");
var BinaryOperators_1 = require("./BinaryOperators");
var PutValue_1 = require("../PutValue");
var ToBoolean_1 = require("../Conversion/ToBoolean");
var IsCallable_1 = require("../Utility/IsCallable");
var CheckObjectCoercible_1 = require("../Utility/CheckObjectCoercible");
var ToString_1 = require("../Conversion/ToString");
var GetIdentifierReference_1 = require("../GetIdentifierReference");
var RegExpObject_1 = require("../Objects/RegExpObject");
var pp = require("../PP");
var constants = require("../Constants");
var Debug_1 = require("./Debug");
// -------------------------------------------------------------
function _GetValue() {
    var vs = monitor.context.valueStack;
    // @ts-ignore
    var val = vs.pop();
    vs.push(GetValue_1.GetValue(val));
}
// expression handler functions 
exports.expressiontbl = {
    'ThisExpression': thisExpression,
    'ArrayExpression': arrayExpression,
    'ObjectExpression': objectExpression,
    'FunctionExpression': functionExpression,
    'SequenceExpression': sequenceExpression,
    'UnaryExpression': unaryExpression,
    'BinaryExpression': binaryExpression,
    'UpdateExpression': updateExpression,
    'LogicalExpression': logicalExpression,
    'AssignmentExpression': assignmentExpression,
    'ConditionalExpression': conditionalExpression,
    'NewExpression': newExpression,
    'CallExpression': callExpression,
    'MemberExpression': memberExpression,
    'Identifier': identifierExpression,
    'Literal': literalExpression
};
function CheckCanary(wl, vs, canary) {
    var result = vs.pop();
    Debug_1.AssertValidCanary(vs, canary);
    vs.push(result);
}
// This, 11.1.1 -------------------------------------------- 
function thisExpression(node, wl, vs) {
    var c = monitor.context;
    vs.push(c.thisValue.clone());
}
// Array Initializer, 11.1.4 -------------------------------
function arrayExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "arrayExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    var arr = new Value_1.Value(new ArrayObject_1.ArrayObject(), Label_1.bot);
    var es = node.elements;
    var len = es.length;
    arr.Put(constants.length, new Value_1.Value(len, Label_1.bot));
    vs.push(arr);
    var _loop_1 = function (i) {
        if (es[i]) {
            ip.then(es[i]);
            ip.then(function (wl, vs) { return arrayExpressionUpdate(arr, i, wl, vs); });
        }
    };
    for (var i = 0; i < len; i++) {
        _loop_1(i);
    }
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function arrayExpressionUpdate(array, index, wl, vs) {
    //@ts-ignore STACK
    var initValue = GetValue_1.GetValue(vs.pop());
    array.Put(new Value_1.Value(index, Label_1.bot), initValue);
}
// Object Initializer, 11.1.5 ------------------------------
function objectExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "objectExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    var obj = new Value_1.Value(new ObjectObject_1.ObjectObject(), Label_1.bot);
    vs.push(obj);
    var ps = node.properties;
    var _loop_2 = function (i, len) {
        ip.then(ps[i].value);
        ip.then(function (wl, vs) { return objectExpressionUpdate(ps, obj, i, wl, vs); });
    };
    for (var i = 0, len = ps.length; i < len; i++) {
        _loop_2(i, len);
    }
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function objectExpressionUpdate(properties, object, index, wl, vs) {
    var prop = properties[index];
    var propName;
    switch (prop.key.type) {
        case 'Identifier':
            propName = new Value_1.Value(prop.key.name, Label_1.bot);
            break;
        case 'Literal':
            // can only be string or number; conversion will occur once assigned to the object
            // TODO: fix
            //@ts-ignore SYNTAX
            propName = new Value_1.Value(prop.key.value, Label_1.bot);
            break;
    }
    //@ts-ignore STACK
    var propValue = GetValue_1.GetValue(vs.pop());
    var propDesc = { enumerable: true, configurable: true, label: Label_1.bot };
    switch (prop.kind) {
        case 'init':
            propDesc.value = propValue.value;
            propDesc.label = propValue.label;
            propDesc.writable = true;
            break;
        case 'get':
            // TODO: fix 
            //@ts-ignore DESC HELL
            propDesc.get = propValue.value;
            propDesc.label = propValue.label;
            break;
        case 'set':
            // TODO: fix 
            //@ts-ignore DESC HELL
            propDesc.set = propValue.value;
            propDesc.label = propValue.label;
            break;
    }
    var previous = object.GetOwnProperty(propName);
    monitor.context.pushPC(previous.label);
    if (previous.value !== undefined) {
        if ((PropertyDescriptor_1.IsDataDescriptor(previous) && PropertyDescriptor_1.IsAccessorDescriptor(propDesc)) ||
            (PropertyDescriptor_1.IsAccessorDescriptor(previous) && PropertyDescriptor_1.IsDataDescriptor(propDesc)) ||
            (PropertyDescriptor_1.IsAccessorDescriptor(previous) && PropertyDescriptor_1.IsAccessorDescriptor(propDesc) &&
                //@ts-ignore DESC HELL
                ((previous.get && propDesc.get) || (previous.set && propDesc.set)))) {
            monitor.Throw("SyntaxError", 'Object initializer: illegal redefine of property', Label_1.bot);
        }
    }
    monitor.context.popPC();
    var obj = object;
    //@ts-ignore TYPES
    obj.DefineOwnProperty(propName, propDesc);
}
// Function Definition, 13 ----------------------------------------------
function functionExpression(node, wl, vs) {
    var fun;
    if (node.id) {
        var funcEnv = DeclarativeEnvironmentRecord_1.NewDeclarativeEnvironment(monitor.context.lexicalEnv);
        var identifier = new Value_1.Value(node.id.name, Label_1.bot);
        funcEnv.CreateImmutableBinding(identifier);
        fun = new FunctionObject_1.FunctionObject(node.params, node.body, new Value_1.Value(funcEnv, Label_1.bot));
        fun.Name = node.id.name;
        fun.Source = node;
        funcEnv.InitializeImmutableBinding(identifier, new Value_1.Value(fun, Label_1.bot));
    }
    else {
        fun = new FunctionObject_1.FunctionObject(node.params, node.body, monitor.context.lexicalEnv);
        fun.Source = node;
    }
    vs.push(new Value_1.Value(fun, Label_1.bot));
}
// Comma Operator, 11.14 ------------------------------------------------
function sequenceExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "sequenceExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    var es = node.expressions;
    var len = es.length;
    var i = 0;
    for (; i < len - 1; i++) {
        ip.then(es[i]);
    }
    if (i < len) {
        ip.then(es[i]);
        ip.then(function (wl, vs) { return sequenceExpressionEnd(len, wl, vs); });
    }
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function sequenceExpressionEnd(length, wl, vs) {
    var result = vs.pop();
    // Pop all but last and execute GetValue on result for eventual side effects.
    for (var i = 0; i < length - 1; i++) {
        //@ts-ignore STACK
        GetValue_1.GetValue(vs.pop());
    }
    vs.push(result);
}
// Unary Operators, 11.4 ------------------------------------------------
function unaryExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "unaryExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.argument);
    ip.then(UnaryOperators_1.unarytbl[node.operator]);
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// Binary Operators, 11.5-11.9 -----------------------------------
function binaryExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "binaryExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.left);
    ip.then(_GetValue);
    ip.then(node.right);
    ip.then(_GetValue);
    ip.then(BinaryOperators_1.binarytbl[node.operator]);
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// Prefix, and Postfix Expressions, 11.3, 11.4.4, 11.4.5 -----------------
function updateExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "updateExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.argument);
    if (node.prefix) {
        ip.then(UnaryOperators_1.prefixtbl[node.operator]);
    }
    else {
        ip.then(UnaryOperators_1.postfixtbl[node.operator]);
    }
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// Binary Operators, 11.5-11.9 -----------------------------------
function logicalExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "logicalExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.left);
    ip.then(BinaryOperators_1.logicaltbl[node.operator]);
    ip.then(node.right);
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// Assignment, 11.13 -----------------------------------------------------
function assignmentExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "assignmentExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.left);
    ip.then(node.right);
    ip.then(BinaryOperators_1.assignmenttbl[node.operator]);
    ip.then(assignmentExpressionEnd);
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function assignmentExpressionEnd(wl, vs) {
    //@ts-ignore
    var rval = vs.pop();
    //@ts-ignore
    var lref = vs.pop();
    PutValue_1.PutValue(lref, rval);
    vs.push(rval);
}
// Conditional Operator, 11.12 ------------------------------------------
function conditionalExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "conditionalExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.test);
    ip.then(function (wl, vs) { return conditionalExpressionChoose(node, wl, vs); });
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function conditionalExpressionChoose(node, wl, vs) {
    var ip = wl.top();
    //@ts-ignore STACK
    var lval = GetValue_1.GetValue(vs.pop());
    var lb = ToBoolean_1.ToBoolean(lval);
    monitor.context.pushPC(lb.label);
    if (lb.value) {
        ip.then(node.consequent);
    }
    else {
        ip.then(node.alternate);
    }
    ip.then(function (wl, vs) { return conditionalExpressionEnd(lval, wl, vs); });
}
// ---
function conditionalExpressionEnd(test, wl, vs) {
    //@ts-ignore STACK
    var val = GetValue_1.GetValue(vs.pop());
    monitor.context.popPC();
    vs.push(new Value_1.Value(val.value, Label_1.lub(val.label, test.label)));
}
// The new Operator, 11.2.2 ---------------------------------------------
function newExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "newExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.callee);
    var as = node.arguments;
    var len = as.length;
    for (var i = 0; i < len; i++) {
        ip.then(as[i]);
    }
    ip.then(function (wl, vs) { return newExpressionExecute(len, wl, vs, pp.pretty(node)); });
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function newExpressionExecute(length, wl, vs, data) {
    var c = monitor.context;
    var ip = wl.top();
    var argList = [];
    for (var i = length - 1; i >= 0; i--) {
        //@ts-ignore STACK
        argList[i] = GetValue_1.GetValue(vs.pop());
    }
    //@ts-ignore STACK
    var constructor = GetValue_1.GetValue(vs.pop());
    if (constructor.value === null || typeof constructor.value !== 'object') {
        if (false) { // SILENT ERROR
            var v = new Value_1.Value(undefined, constructor.label);
            return;
        }
        monitor.Throw("TypeError", "invalid 'new' parameter: not a constructor", constructor.label);
        throw 'TypeScript';
    }
    if (!('Construct' in constructor.value)) {
        if (false) { // SILENT ERROR
            var v = new Value_1.Value(undefined, constructor.label);
            return;
        }
        monitor.Throw("TypeError", "invalid 'new' parameter: not a constructor", constructor.label);
        throw 'TypeScript';
    }
    if (constructor.value.AsyncConstruct) {
        c.pushPC(constructor.label);
        ip = constructor.value.AsyncConstruct(argList);
        ip.then(function (wl, vs) { return callExpressionEnd(constructor.label, wl, vs, data); });
    }
    else {
        try {
            var retval = constructor.Construct(argList);
            retval.raise(constructor.label);
            vs.push(retval);
        }
        catch (e) {
            if (!(e instanceof Value_1.Value)) {
                throw e;
            }
            var result = c.result;
            // Verfiy that the exception is allowed 
            monitor.assert(Label_1.le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
            // For observable flows
            c.labels.exc = Label_1.lub(c.labels.exc, c.effectivePC);
            result.type = 'throw';
            result.value = e;
        }
    }
}
// Function Calls, 11.2.3 -----------------------------------------------
function callExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "callExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    var as = node.arguments;
    var len = as.length;
    ip.then(node.callee);
    for (var i = 0; i < len; i++) {
        ip.then(as[i]);
    }
    ip.then(function (wl, vs) { return callExpressionExecute(len, node, wl, vs, pp.pretty(node)); });
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// callExpressionExecute
function callExpressionExecute(length, node, wl, vs, data) {
    var c = monitor.context;
    var ip = wl.top();
    var argList = [];
    for (var i = length - 1; i >= 0; i--) {
        var arg = vs.pop();
        //@ts-ignore STACK
        argList[i] = GetValue_1.GetValue(arg);
    }
    var ref = vs.pop();
    //@ts-ignore STACK
    var func = GetValue_1.GetValue(ref);
    if (!IsCallable_1.IsCallable(func)) {
        if (false) { // SILENT ERRORS
            var v = new Value_1.Value(undefined, func.label);
            return;
        }
        monitor.Throw("TypeError", 'Invalid call target; ' + pp.pretty(node.callee) + ' evaluates to ' + func.value + ' in ' + pp.pretty(node), func.label);
        throw 'TypeScript';
    }
    // used to decide if eval is a direct call in function.enterEvalCode
    //@ts-ignore TYPES
    c.currentCall = { reference: ref, target: func.value, source: node };
    // for eval
    //@ts-ignore TYPES
    c.call = { ref: ref, func: func };
    var thisValue;
    if (ref instanceof Reference_1.Reference) {
        if (ref.IsPropertyReference()) {
            thisValue = ref.base;
        }
        else {
            //@ts-ignore TYPES
            thisValue = ref.base.ImplicitThisValue();
        }
    }
    else {
        //@ts-ignore TYPES
        thisValue = new Value_1.Value(undefined, ref.label);
    }
    if (func.value.AsyncCall) {
        monitor.context.pushPC(func.label);
        func.value.AsyncCall(thisValue, argList);
        ip.then(function (wl, vs) { return callExpressionEnd(func.label, wl, vs, data); });
    }
    else {
        try {
            var retval = func.Call(thisValue, argList);
            retval.raise(func.label);
            vs.push(retval);
        }
        catch (e) {
            if (!(e instanceof Value_1.Value)) {
                throw e;
            }
            var result = c.result;
            // Verfiy that the exception is allowed 
            monitor.assert(Label_1.le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
            // For observable flows
            c.labels.exc = Label_1.lub(c.labels.exc, c.effectivePC);
            result.type = 'throw';
            result.value = e;
        }
    }
}
// callExpressionEnd 
function callExpressionEnd(label, wl, vs, data) {
    // @ts-ignore
    var callResult = vs.pop();
    var c = monitor.context;
    var result = c.result;
    if (callResult === undefined || callResult.value === undefined) {
        monitor.error(data);
        monitor.error(callResult);
    }
    callResult.value.raise(label);
    if (callResult.type === 'throw') {
        result.type = 'throw';
        result.value = callResult.value;
        return;
    }
    c.popPC();
    vs.push(callResult.value);
}
// Property Accessors, 11.2.1 -------------------------------------------
function memberExpression(node, wl, vs) {
    var canary;
    if (JSFLOW_STACK_CHECK) {
        canary = Debug_1.PushCanary(vs, "memberExpression : " + pp.pretty(node));
    }
    var ip = wl.top();
    ip.then(node.object);
    ip.then(_GetValue);
    if (node.computed) {
        ip.then(node.property);
        ip.then(_GetValue);
    }
    ip.then(function (wl, vs) { return memberExpressionExecute(node, wl, vs); });
    if (JSFLOW_STACK_CHECK) {
        ip.then(function (wl, vs) { return CheckCanary(wl, vs, canary); });
    }
}
// ---
function memberExpressionExecute(node, wl, vs) {
    var propertyNameValue;
    if (node.computed) {
        propertyNameValue = vs.pop();
    }
    else {
        //@ts-ignore TYPES
        propertyNameValue = new Value_1.Value(node.property.name, Label_1.bot);
    }
    // @ts-ignore
    var baseValue = vs.pop();
    /*
    if (baseValue.value === undefined || baseValue.value === null) {
      monitor.warn(pp.pretty(node.object) + ' evaluates to ' + String(baseValue.value) + ' in ' + pp.pretty(node), node);
    }
    */
    CheckObjectCoercible_1.CheckObjectCoercible(baseValue);
    //@ts-ignore TYPES
    vs.push(new Reference_1.Reference(baseValue, ToString_1.ToString(propertyNameValue)));
}
// Identifier, 11.1.2 -> 10.3.1 -----------------------------------------
function identifierExpression(node, wl, vs) {
    vs.push(GetIdentifierReference_1.GetIdentifierReference(monitor.context.lexicalEnv, node.name));
}
// Literals, 11.1.3 -> 7.8 ----------------------------------------------
function literalExpression(node, wl, vs) {
    // @ts-ignore
    var res = new Value_1.Value(node.value, Label_1.bot);
    if (node.value instanceof RegExp) {
        res.value = new RegExpObject_1.RegExpObject(node.value, Label_1.bot);
    }
    vs.push(res);
}

},{"../Constants":64,"../Conversion/ToBoolean":81,"../Conversion/ToString":87,"../DeclarativeEnvironmentRecord":90,"../GetIdentifierReference":118,"../GetValue":119,"../Label":123,"../Objects/ArrayObject":132,"../Objects/FunctionObject":140,"../Objects/ObjectObject":146,"../Objects/RegExpObject":149,"../PP":155,"../PropertyDescriptor":156,"../PutValue":172,"../Reference":173,"../Utility/CheckObjectCoercible":181,"../Utility/IsCallable":182,"../Value":184,"./BinaryOperators":92,"./Debug":94,"./UnaryOperators":116}],97:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var SwitchStatement_1 = require("./Tracing/SwitchStatement");
var BlockStatement_1 = require("./Tracing/BlockStatement");
var EmptyStatement_1 = require("./Tracing/EmptyStatement");
var ExpressionStatement_1 = require("./Tracing/ExpressionStatement");
var IfStatement_1 = require("./Tracing/IfStatement");
var LabeledStatement_1 = require("./Tracing/LabeledStatement");
var BreakStatement_1 = require("./Tracing/BreakStatement");
var ContinueStatement_1 = require("./Tracing/ContinueStatement");
var WithStatement_1 = require("./Tracing/WithStatement");
var ReturnStatement_1 = require("./Tracing/ReturnStatement");
var ThrowStatement_1 = require("./Tracing/ThrowStatement");
var WhileStatement_1 = require("./Tracing/WhileStatement");
var ForStatement_1 = require("./Tracing/ForStatement");
var ForInStatement_1 = require("./Tracing/ForInStatement");
var VariableDeclaration_1 = require("./Tracing/VariableDeclaration");
var DebuggerStatement_1 = require("./Tracing/DebuggerStatement");
var TryCatchStatement_1 = require("./Tracing/TryCatchStatement");
// ------------------------------------------------------------
function ExecuteStatement(statement, wl, vs) {
    switch (statement.type) {
        case "BlockStatement":
            BlockStatement_1.blockStatement(statement, wl, vs);
            break;
        case "BreakStatement":
            BreakStatement_1.breakStatement(statement, wl, vs);
            break;
        case "ClassDeclaration": throw "TODO";
        case "ContinueStatement":
            ContinueStatement_1.continueStatement(statement, wl, vs);
            break;
        case "DebuggerStatement":
            DebuggerStatement_1.debuggerStatement(statement, wl, vs);
            break;
        case "DoWhileStatement":
            WhileStatement_1.doWhileStatement(statement, wl, vs);
            break;
        case "EmptyStatement":
            EmptyStatement_1.emptyStatement(statement, wl, vs);
            break;
        case 'ExpressionStatement':
            ExpressionStatement_1.expressionStatement(statement, wl, vs);
            break;
        case "ForInStatement":
            ForInStatement_1.forInStatement(statement, wl, vs);
            break;
        case "ForOfStatement": throw "TODO";
        case "ForStatement":
            ForStatement_1.forStatement(statement, wl, vs);
            break;
        case "FunctionDeclaration":
            // handled via function hoisting
            break;
        case "IfStatement":
            IfStatement_1.ifStatement(statement, wl, vs);
            break;
        case "LabeledStatement":
            LabeledStatement_1.labeledStatement(statement, wl, vs);
            break;
        case "ReturnStatement":
            ReturnStatement_1.returnStatement(statement, wl, vs);
            break;
        case "SwitchStatement":
            SwitchStatement_1.switchStatement(statement, wl, vs);
            break;
        case "ThrowStatement":
            ThrowStatement_1.throwStatement(statement, wl, vs);
            break;
        case "TryStatement":
            TryCatchStatement_1.tryStatement(statement, wl, vs);
            break;
        case "VariableDeclaration":
            VariableDeclaration_1.variableDeclaration(statement, wl, vs);
            break;
        case "WhileStatement":
            WhileStatement_1.whileStatement(statement, wl, vs);
            break;
        case "WithStatement":
            WithStatement_1.withStatement(statement, wl, vs);
            break;
    }
    monitor.fatal(statement.type + ' not implemented');
}
exports.ExecuteStatement = ExecuteStatement;
// statement handler functions
exports.statementtbl = {
    'Program': BlockStatement_1.blockStatement,
    'BlockStatement': BlockStatement_1.blockStatement,
    'EmptyStatement': EmptyStatement_1.emptyStatement,
    'ExpressionStatement': ExpressionStatement_1.expressionStatement,
    'IfStatement': IfStatement_1.ifStatement,
    'SwitchStatement': SwitchStatement_1.switchStatement,
    'LabeledStatement': LabeledStatement_1.labeledStatement,
    'BreakStatement': BreakStatement_1.breakStatement,
    'ContinueStatement': ContinueStatement_1.continueStatement,
    'WithStatement': WithStatement_1.withStatement,
    'ReturnStatement': ReturnStatement_1.returnStatement,
    'ThrowStatement': ThrowStatement_1.throwStatement,
    'TryStatement': TryCatchStatement_1.tryStatement,
    'WhileStatement': WhileStatement_1.whileStatement,
    'DoWhileStatement': WhileStatement_1.doWhileStatement,
    'ForStatement': ForStatement_1.forStatement,
    'ForInStatement': ForInStatement_1.forInStatement,
    'VariableDeclaration': VariableDeclaration_1.variableDeclaration,
    'FunctionDeclaration': EmptyStatement_1.emptyStatement,
    'DebuggerStatement': DebuggerStatement_1.debuggerStatement
};
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 

},{"./Tracing/BlockStatement":99,"./Tracing/BreakStatement":100,"./Tracing/ContinueStatement":101,"./Tracing/DebuggerStatement":102,"./Tracing/EmptyStatement":103,"./Tracing/ExpressionStatement":104,"./Tracing/ForInStatement":105,"./Tracing/ForStatement":106,"./Tracing/IfStatement":107,"./Tracing/LabeledStatement":108,"./Tracing/ReturnStatement":109,"./Tracing/SwitchStatement":110,"./Tracing/ThrowStatement":111,"./Tracing/TryCatchStatement":112,"./Tracing/VariableDeclaration":113,"./Tracing/WhileStatement":114,"./Tracing/WithStatement":115}],98:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Debug_1 = require("./Debug");
var Task = /** @class */ (function () {
    function Task(runfor) {
        this.runfor = runfor || {};
    }
    Task.prototype.RunFor = function (x) {
        return x in this.runfor;
    };
    Task.runfor_all = { 'throw': true, 'continue': true, 'break': true, 'return': true };
    Task.runfor_throw = { 'throw': true };
    Task.runfor_continue = { 'continue': true };
    Task.runfor_break = { 'break': true };
    Task.runfor_continue_break = { 'break': true, 'continue': true };
    return Task;
}());
exports.Task = Task;
// ---
function CheckCanary(wl, vs, canary) {
    Debug_1.AssertValidCanary(vs, canary);
}

},{"./Debug":94}],99:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
function blockStatement(node, wl, vs) {
    wl.prepend(node.body);
}
exports.blockStatement = blockStatement;

},{}],100:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../../Label");
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
// 12.8 ----------------------------------------------------------------------
function breakStatement(node, wl, vs) {
    var c = monitor.context;
    var result = monitor.context.result;
    var name = node.label ? node.label.name : emptyLabel;
    var lblcontext = c.labels.labelmap[name].label;
    var displayName = node.label ? '(' + name + ')' : '';
    monitor.assert(Label_1.le(c.effectivePC, lblcontext), 'write context ' + c.effectivePC + ' not below ' +
        'label context ' + lblcontext + ' ' + displayName);
    // For observable flows
    c.labels.labelmap[name].label = Label_1.lub(lblcontext, c.effectivePC);
    result.type = 'break';
    result.target = name;
}
exports.breakStatement = breakStatement;

},{"../../Label":123}],101:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../../Label");
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
// 12.7 ----------------------------------------------------------------------
function continueStatement(node, wl, vs) {
    var c = monitor.context;
    var result = monitor.context.result;
    var name = node.label ? node.label.name : emptyLabel;
    var lblcontext = c.labels.labelmap[name].label;
    var displayName = node.label ? '(' + name + ')' : '';
    monitor.assert(Label_1.le(c.effectivePC, lblcontext), 'write context ' + c.effectivePC + ' not below ' +
        'label context ' + lblcontext + displayName);
    // For observable flows
    c.labels.labelmap[name].label = Label_1.lub(lblcontext, c.effectivePC);
    result.type = 'continue';
    result.target = name;
}
exports.continueStatement = continueStatement;

},{"../../Label":123}],102:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// ------------------------------------------------------------
function debuggerStatement(node, wl, vs) {
    monitor.debug.active = true;
}
exports.debuggerStatement = debuggerStatement;

},{}],103:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
function emptyStatement(node, wl, vs) {
}
exports.emptyStatement = emptyStatement;

},{}],104:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GetValue_1 = require("../../GetValue");
var Task_1 = require("../Task");
function expressionStatement(node, wl, vs) {
    var ip = wl.top();
    ip.then(node.expression);
    ip.then(ExpressionStatementEnd.Instance);
}
exports.expressionStatement = expressionStatement;
var ExpressionStatementEnd = /** @class */ (function (_super) {
    __extends(ExpressionStatementEnd, _super);
    function ExpressionStatementEnd() {
        return _super.call(this) || this;
    }
    ExpressionStatementEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        // @ts-ignore
        var val = vs.pop();
        c.result.value = GetValue_1.GetValue(val);
    };
    ExpressionStatementEnd.Instance = new ExpressionStatementEnd();
    return ExpressionStatementEnd;
}(Task_1.Task));

},{"../../GetValue":119,"../Task":98}],105:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var GetValue_1 = require("../../GetValue");
var ToObject_1 = require("../../Conversion/ToObject");
var PutValue_1 = require("../../PutValue");
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
var MySet = Set;
// ------------------------------------------------------------
function forInStatement(node, wl, vs) {
    var ip = wl.top();
    var left;
    if (node.left.type === 'VariableDeclaration') {
        ip.then(node.left);
        // the standard only allows for one declaration, get the name
        left = node.left.declarations[0].id;
    }
    else {
        left = node.left;
    }
    ip.then(node.right);
    ip.then(new ForInStatementSetup(node, left));
}
exports.forInStatement = forInStatement;
// ---
var ForInStatementSetup = /** @class */ (function (_super) {
    __extends(ForInStatementSetup, _super);
    function ForInStatementSetup(node, left) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.left = left;
        return _this;
    }
    ForInStatementSetup.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        var ip = wl.top();
        var lmap = c.labels.labelmap;
        var node = this.node;
        if (!node.labelset) {
            node.labelset = new MySet();
        }
        node.labelset.add(emptyLabel);
        var outerEmptyLabelData = lmap[emptyLabel];
        lmap[emptyLabel] = {
            label: c.effectivePC,
            pcmarker: c.pcStack.marker()
        };
        var contextLabel = lmap[emptyLabel].label;
        c.pushPC(contextLabel);
        //@ts-ignore STACK
        var val = GetValue_1.GetValue(vs.pop());
        if (val.value === null || val.value === undefined) {
            return;
        }
        var obj = ToObject_1.ToObject(val);
        var maxProperty = obj.value.getEnumerablePropertyNames(obj.label).length;
        // monitor.context.pushPC(obj.label);
        ip.then(new ForInExecute(node, this.left, obj, maxProperty, outerEmptyLabelData));
    };
    return ForInStatementSetup;
}(Task_1.Task));
// ---
var ForInExecute = /** @class */ (function (_super) {
    __extends(ForInExecute, _super);
    function ForInExecute(node, left, obj, maxProperty, outerEmptyLabelData) {
        var _this = _super.call(this, Task_1.Task.runfor_continue_break) || this;
        _this.node = node;
        _this.left = left;
        _this.obj = obj;
        _this.maxProperty = maxProperty;
        _this.outerEmptyLabelData = outerEmptyLabelData;
        _this.nextProperty = 0;
        _this.update = new ForInUpdate(node, _this);
        return _this;
    }
    ForInExecute.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        if (result.type === 'break' && this.node.labelset.has(result.target)) {
            result.type = 'normal';
            result.target = null;
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
            c.popPC(); // contextLabel
            return;
        }
        if (result.type !== 'continue' || !this.node.labelset.has(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        // continue gets us here
        result.type = 'normal';
        result.target = null;
        var properties = this.obj.value.getEnumerablePropertyNames(this.obj.label);
        if (this.nextProperty >= properties.length || this.nextProperty >= this.maxProperty) {
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
            c.popPC(); // contextLabel
            return;
        }
        var propName = properties[this.nextProperty];
        this.nextProperty++;
        vs.push(propName);
        ip.then(this.left);
        ip.then(this.update);
    };
    return ForInExecute;
}(Task_1.Task));
// ---
var ForInUpdate = /** @class */ (function (_super) {
    __extends(ForInUpdate, _super);
    function ForInUpdate(node, execute) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.execute = execute;
        return _this;
    }
    ForInUpdate.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        // @ts-ignore
        var lhs = vs.pop();
        // @ts-ignore
        var propName = vs.pop();
        PutValue_1.PutValue(lhs, propName);
        monitor.context.pushPC(propName.label);
        ip.then(this.node.body);
        ip.then(ForInSecurityContextEnd.Instance);
        ip.then(this.execute);
    };
    return ForInUpdate;
}(Task_1.Task));
// ---
var ForInSecurityContextEnd = /** @class */ (function (_super) {
    __extends(ForInSecurityContextEnd, _super);
    function ForInSecurityContextEnd() {
        return _super.call(this) || this;
    }
    ForInSecurityContextEnd.prototype.Execute = function (wl, vs) {
        monitor.context.popPC();
    };
    ForInSecurityContextEnd.Instance = new ForInSecurityContextEnd();
    return ForInSecurityContextEnd;
}(Task_1.Task));

},{"../../Conversion/ToObject":85,"../../GetValue":119,"../../PutValue":172,"../Task":98}],106:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var Label_1 = require("../../Label");
var GetValue_1 = require("../../GetValue");
var ToBoolean_1 = require("../../Conversion/ToBoolean");
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
var ResetValueStack = /** @class */ (function (_super) {
    __extends(ResetValueStack, _super);
    function ResetValueStack(targetSize) {
        return _super.call(this) || this;
    }
    ResetValueStack.prototype.Execute = function (wl, vs) {
        while (vs.size() > this.targetSize) {
            vs.pop();
        }
    };
    return ResetValueStack;
}(Task_1.Task));
var MySet = Set;
// ------------------------------------------------------------
function forStatement(node, wl, vs) {
    var c = monitor.context;
    var ip = wl.top();
    var lmap = c.labels.labelmap;
    if (node.init) {
        ip.then(node.init);
        ip.then(new ResetValueStack(vs.size()));
    }
    if (!node.labelset) {
        node.labelset = new MySet([]);
    }
    node.labelset.add(emptyLabel);
    var outerEmptyLabelData = lmap[emptyLabel];
    lmap[emptyLabel] = {
        label: c.effectivePC,
        pcmarker: c.pcStack.marker()
    };
    var contextLabel = lmap[emptyLabel].label;
    c.pushPC(contextLabel);
    ip.then(new ForStatementMain(node));
    ip.then(new ForStatementEnd(outerEmptyLabelData));
}
exports.forStatement = forStatement;
// ---
var ForStatementMain = /** @class */ (function (_super) {
    __extends(ForStatementMain, _super);
    function ForStatementMain(node) {
        var _this = _super.call(this, Task_1.Task.runfor_continue_break) || this;
        _this.node = node;
        _this.execute = new ForStatementExecute(node, _this);
        _this.choose = new ForStatementChoose(node, _this);
        _this.update = new ForStatementUpdate(node);
        return _this;
    }
    ForStatementMain.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        var ip = wl.top();
        var result = c.result;
        if (result.type === 'break' && this.node.labelset.has(result.target)) {
            result.type = 'normal';
            result.target = null;
            return;
        }
        if (result.type !== 'continue' || !this.node.labelset.has(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        result.type = 'normal';
        result.target = null;
        if (this.node.test) {
            ip.then(this.node.test);
            ip.then(this.choose);
        }
        else {
            ip.then(this.execute);
        }
    };
    return ForStatementMain;
}(Task_1.Task));
// ---
var ForStatementChoose = /** @class */ (function (_super) {
    __extends(ForStatementChoose, _super);
    function ForStatementChoose(node, main) {
        var _this = _super.call(this, Task_1.Task.runfor_continue) || this;
        _this.node = node;
        _this.main = main;
        return _this;
    }
    ForStatementChoose.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        //@ts-ignore STACK
        var cond = GetValue_1.GetValue(vs.pop());
        var condb = ToBoolean_1.ToBoolean(cond);
        c.labels.pc = Label_1.lub(c.labels.pc, condb.label);
        if (!condb.value) {
            result.type = 'normal';
            result.target = null;
            return;
        }
        ip.then(this.main.execute);
    };
    return ForStatementChoose;
}(Task_1.Task));
var ForStatementExecute = /** @class */ (function (_super) {
    __extends(ForStatementExecute, _super);
    function ForStatementExecute(node, main) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.main = main;
        return _this;
    }
    ForStatementExecute.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        ip.then(this.node.body);
        ip.then(this.main.update);
        ip.then(this.main);
    };
    return ForStatementExecute;
}(Task_1.Task));
var ForStatementUpdate = /** @class */ (function (_super) {
    __extends(ForStatementUpdate, _super);
    function ForStatementUpdate(node) {
        var _this = _super.call(this, Task_1.Task.runfor_continue) || this;
        _this.node = node;
        return _this;
    }
    ForStatementUpdate.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        if (result.type !== 'continue' || !this.node.labelset.has(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        result.type = 'normal';
        result.target = null;
        if (this.node.update) {
            ip.then(this.node.update);
            ip.then(new ResetValueStack(vs.size()));
        }
    };
    return ForStatementUpdate;
}(Task_1.Task));
// forStatementeEnd
var ForStatementEnd = /** @class */ (function (_super) {
    __extends(ForStatementEnd, _super);
    function ForStatementEnd(outerEmptyLabelData) {
        var _this = _super.call(this) || this;
        _this.outerEmptyLabelData = outerEmptyLabelData;
        return _this;
    }
    ForStatementEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
        c.popPC();
    };
    return ForStatementEnd;
}(Task_1.Task));

},{"../../Conversion/ToBoolean":81,"../../GetValue":119,"../../Label":123,"../Task":98}],107:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var GetValue_1 = require("../../GetValue");
var ToBoolean_1 = require("../../Conversion/ToBoolean");
// ------------------------------------------------------------
function ifStatement(node, wl, vs) {
    var ip = wl.top();
    ip.then(node.test);
    ip.then(new IfStatementChoose(node));
}
exports.ifStatement = ifStatement;
// ---
var IfStatementChoose = /** @class */ (function (_super) {
    __extends(IfStatementChoose, _super);
    function IfStatementChoose(node) {
        var _this = _super.call(this) || this;
        _this.node = node;
        return _this;
    }
    IfStatementChoose.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        //@ts-ignore STACK
        var cond = GetValue_1.GetValue(vs.pop());
        cond = ToBoolean_1.ToBoolean(cond);
        monitor.context.pushPC(cond.label);
        if (cond.value) {
            ip.then(this.node.consequent);
        }
        else {
            this.node.alternate && ip.then(this.node.alternate);
        }
        ip.then(new IfStatementEnd(cond.label));
    };
    return IfStatementChoose;
}(Task_1.Task));
// ---
var IfStatementEnd = /** @class */ (function (_super) {
    __extends(IfStatementEnd, _super);
    function IfStatementEnd(label) {
        var _this = _super.call(this, Task_1.Task.runfor_continue_break) || this;
        _this.label = label;
        return _this;
    }
    IfStatementEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        c.popPC();
        if (c.result.value) {
            c.result.value.raise(this.label);
        }
    };
    return IfStatementEnd;
}(Task_1.Task));

},{"../../Conversion/ToBoolean":81,"../../GetValue":119,"../Task":98}],108:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var Label_1 = require("../../Label");
var MySet = Set;
// 12.12 ---------------------------------------------------------------------
function labeledStatement(node, wl, vs) {
    var ip = wl.top();
    var c = monitor.context;
    var pcmarker = c.pcStack.marker();
    var vsmarker = c.valueStack.marker();
    //@ts-ignore LABELSET
    if (!node.body.labelset) {
        //@ts-ignore LABELSET
        node.body.labelset = new MySet([node.label.name]);
        //@ts-ignore LABELSET
        if (node.labelset) {
            //@ts-ignore LABELSET
            node.body.labelset.union(node.labelset);
        }
    }
    var name = node.label.name;
    var outerlabel = setupStatementLabel(name);
    var labeldata = c.labels.labelmap[name];
    labeldata.pcmarker = c.pcStack.marker();
    c.pushPC(labeldata.label);
    ip.then(node.body);
    ip.then(new LabeledStatementEnd(name, labeldata.label, pcmarker, vsmarker));
}
exports.labeledStatement = labeledStatement;
// labeledStatementEnd
var LabeledStatementEnd = /** @class */ (function (_super) {
    __extends(LabeledStatementEnd, _super);
    function LabeledStatementEnd(name, outerlabel, pcmarker, vsmarker) {
        var _this = _super.call(this, Task_1.Task.runfor_continue_break) || this;
        _this.name = name;
        _this.outerlabel = outerlabel;
        _this.pcmarker = pcmarker;
        _this.vsmarker = vsmarker;
        return _this;
    }
    LabeledStatementEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        var result = c.result;
        // reset the outer label - no need to reset pcmarker since
        // statement labels with the same name cannot be nested
        c.labels.labelmap[this.name].label = this.outerlabel;
        c.pcStack.reset(this.pcmarker);
        c.valueStack.reset(this.vsmarker);
        if (result.type === 'break' && result.target === this.name) {
            result = c.result;
            result.type = 'normal';
            result.target = null;
        }
    };
    return LabeledStatementEnd;
}(Task_1.Task));
function setupStatementLabel(name) {
    var c = monitor.context;
    var lmap = c.labels.labelmap;
    if (!lmap[name]) {
        lmap[name] = { label: Label_1.bot, pcmarker: undefined };
    }
    var labeldata = lmap[name];
    var outerlabel = labeldata.label;
    // raise to effective pc
    labeldata.label = Label_1.lub(labeldata.label, c.effectivePC);
    return outerlabel;
}

},{"../../Label":123,"../Task":98}],109:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var GetValue_1 = require("../../GetValue");
var Value_1 = require("../../Value");
var Label_1 = require("../../Label");
//---------------------------------------------------------------------------- 
function returnStatement(node, wl, vs) {
    var c = monitor.context;
    var ip = wl.top();
    monitor.assert(Label_1.le(c.effectivePC, c.labels.ret), 'write context ' + c.effectivePC + ' not below ' +
        'return context ' + c.labels.ret);
    // This is for the new mode of operation, for observable flows
    c.labels.ret = Label_1.lub(c.labels.ret, c.effectivePC);
    if (node.argument) {
        ip.then(node.argument);
    }
    else {
        c.valueStack.push(new Value_1.Value(undefined, Label_1.bot));
    }
    ip.then(ReturnStatementEnd.Instance);
}
exports.returnStatement = returnStatement;
// returnStatementEnd
var ReturnStatementEnd = /** @class */ (function (_super) {
    __extends(ReturnStatementEnd, _super);
    function ReturnStatementEnd() {
        return _super.call(this) || this;
    }
    ReturnStatementEnd.prototype.Execute = function (wl, vs) {
        var result = monitor.context.result;
        result.type = 'return';
        //@ts-ignore STACK
        result.value = GetValue_1.GetValue(vs.pop());
        result.target = null;
    };
    ReturnStatementEnd.Instance = new ReturnStatementEnd();
    return ReturnStatementEnd;
}(Task_1.Task));

},{"../../GetValue":119,"../../Label":123,"../../Value":184,"../Task":98}],110:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var Label_1 = require("../../Label");
var BinaryOperators_1 = require("../BinaryOperators");
var GetValue_1 = require("../../GetValue");
function _GetValue() {
    var vs = monitor.context.valueStack;
    // @ts-ignore
    var val = vs.pop();
    vs.push(GetValue_1.GetValue(val));
}
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
var MySet = Set;
function switchStatement(node, wl, vs) {
    var c = monitor.context;
    var lmap = monitor.context.labels.labelmap;
    if (!node.labelset) {
        node.labelset = new MySet([]);
    }
    node.labelset.add(emptyLabel);
    var outerEmptyLabelData = lmap[emptyLabel];
    lmap[emptyLabel] = {
        label: c.effectivePC,
        pcmarker: c.pcStack.marker()
    };
    var contextLabel = lmap[emptyLabel].label;
    c.pushPC(contextLabel);
    var switchState = {
        defaultCaseIndex: null,
        nextCase: 0
    };
    if (node.cases) {
        for (var i = 0; i < node.cases.length; i++) {
            if (node.cases[i].test === null) {
                switchState.defaultCaseIndex = i;
                break;
            }
        }
    }
    var ip = wl.top();
    // Store the discriminant value on the value stack.
    // It is later popped by switchStatementEnd.
    ip.then(node.discriminant);
    ip.then(_GetValue);
    // Set up statement labels
    ip.then(new SwitchStatementUpgradeLabels(node));
    // Kick off the first case
    ip.then(new SwitchStatementCase(node, switchState));
    // Clean up and handle breaks
    ip.then(new SwitchStatementEnd(node, outerEmptyLabelData));
}
exports.switchStatement = switchStatement;
// ---
var SwitchStatementUpgradeLabels = /** @class */ (function (_super) {
    __extends(SwitchStatementUpgradeLabels, _super);
    function SwitchStatementUpgradeLabels(node) {
        var _this = _super.call(this) || this;
        _this.node = node;
        return _this;
    }
    SwitchStatementUpgradeLabels.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        //@ts-ignore STACK
        var discriminantLabel = vs.peek().label;
        var lblmap = c.labels.labelmap;
        c.labels.pc = Label_1.lub(c.labels.pc, discriminantLabel);
        for (var name in this.node.labelset) {
            lblmap[name].label = Label_1.lub(lblmap[name].label, discriminantLabel);
        }
    };
    return SwitchStatementUpgradeLabels;
}(Task_1.Task));
// ---
var SwitchStatementCase = /** @class */ (function (_super) {
    __extends(SwitchStatementCase, _super);
    function SwitchStatementCase(node, switchState) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.switchState = switchState;
        return _this;
    }
    SwitchStatementCase.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        var idx = this.switchState.nextCase;
        if (this.node.cases === undefined || idx >= this.node.cases.length) {
            // No more cases to try, schedule the default 
            // case if there is one
            if (this.switchState.defaultCaseIndex !== null) {
                for (var i = this.switchState.defaultCaseIndex; i < this.node.cases.length; i++) {
                    for (var j = 0; j < this.node.cases[i].consequent.length; j++) {
                        ip.then(this.node.cases[i].consequent[j]);
                    }
                }
            }
            return;
        }
        if (idx === this.switchState.defaultCaseIndex) {
            // Skip the default case during matching
            this.switchState.nextCase += 1;
            ip.then(new SwitchStatementCase(this.node, this.switchState));
            return;
        }
        vs.dup(); // Duplicate the discriminant value
        // Push the test value
        ip.then(this.node.cases[idx].test);
        ip.then(_GetValue);
        // Test for equality and decide what to do next
        ip.then(new SwitchStatementTest(this.node, this.switchState));
    };
    return SwitchStatementCase;
}(Task_1.Task));
// ---
var SwitchStatementTest = /** @class */ (function (_super) {
    __extends(SwitchStatementTest, _super);
    function SwitchStatementTest(node, switchState) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.switchState = switchState;
        return _this;
    }
    SwitchStatementTest.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        BinaryOperators_1.binaryStrictEqs('===', wl, vs);
        // @ts-ignore
        var bresult = vs.pop();
        monitor.context.labels.pc = Label_1.lub(monitor.context.labels.pc, bresult.label);
        if (bresult.value) {
            // Found a match, schedule all statements from here down
            for (var i = this.switchState.nextCase; i < this.node.cases.length; i++) {
                for (var j = 0; j < this.node.cases[i].consequent.length; j++) {
                    ip.then(this.node.cases[i].consequent[j]);
                }
            }
        }
        else {
            this.switchState.nextCase += 1;
            ip.then(new SwitchStatementCase(this.node, this.switchState));
        }
    };
    return SwitchStatementTest;
}(Task_1.Task));
// ---
var SwitchStatementEnd = /** @class */ (function (_super) {
    __extends(SwitchStatementEnd, _super);
    function SwitchStatementEnd(node, outerEmptyLabelData) {
        var _this = _super.call(this, Task_1.Task.runfor_break) || this;
        _this.node = node;
        _this.outerEmptyLabelData = outerEmptyLabelData;
        return _this;
    }
    SwitchStatementEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        vs.pop(); // pop the discriminant value
        c.popPC(); // pop the labelContext
        if (c.result.type === 'break' && this.node.labelset.has(c.result.target)) {
            c.result.type = 'normal';
            c.result.target = null;
            c.labels.labelmap['empty'] = this.outerEmptyLabelData;
        }
    };
    return SwitchStatementEnd;
}(Task_1.Task));

},{"../../GetValue":119,"../../Label":123,"../BinaryOperators":92,"../Task":98}],111:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var GetValue_1 = require("../../GetValue");
var Label_1 = require("../../Label");
//---------------------------------------------------------------------------- 
function throwStatement(node, wl, vs) {
    var ip = wl.top();
    ip.then(node.argument);
    ip.then(ThrowStatementEnd.Instance);
}
exports.throwStatement = throwStatement;
// ---
var ThrowStatementEnd = /** @class */ (function (_super) {
    __extends(ThrowStatementEnd, _super);
    function ThrowStatementEnd() {
        return _super.call(this) || this;
    }
    ThrowStatementEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        var result = c.result;
        //@ts-ignore
        var exprRef = vs.pop();
        // Verfiy that the exception is allowed 
        monitor.assert(Label_1.le(c.effectivePC, c.labels.exc), "exception in " + c.effectivePC + " not allowed with exception label " + c.labels.exc);
        // For observable flows
        c.labels.exc = Label_1.lub(c.labels.exc, c.effectivePC);
        result.type = 'throw';
        result.value = GetValue_1.GetValue(exprRef);
        monitor.offendingTrace = monitor.stackTrace();
    };
    ThrowStatementEnd.Instance = new ThrowStatementEnd();
    return ThrowStatementEnd;
}(Task_1.Task));

},{"../../GetValue":119,"../../Label":123,"../Task":98}],112:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var Label_1 = require("../../Label");
var Value_1 = require("../../Value");
var DeclarativeEnvironmentRecord_1 = require("../../DeclarativeEnvironmentRecord");
var Result_1 = require("../../Result");
//---------------------------------------------------------------------------- 
function tryStatement(node, wl, vs) {
    var ip = wl.top();
    var c = monitor.context;
    ip.then(node.block);
    // Expression evaluation might cause exceptions; if so the state of
    // the context might need some cleaning up.
    // The result stack and the worklist are not affected by expression so their
    // states are fine.
    // The ret label cannot be affected by exceptions.
    // The stacks needs to be reset. 
    var pcmarker = c.pcStack.marker();
    var vsmarker = c.valueStack.marker();
    var exc = c.labels.exc;
    // esprima seems to generate a list of handlers --- standard only supports one
    //@ts-ignore SYNTAX
    ip.then(new TryStatementCatch(node.handlers[0], pcmarker, vsmarker, exc));
    // The finalizer 
    var lexicalEnv = c.lexicalEnv;
    ip.then(new TryStatementFinally(node.finalizer, pcmarker, vsmarker, lexicalEnv));
}
exports.tryStatement = tryStatement;
// ---
var TryStatementCatch = /** @class */ (function (_super) {
    __extends(TryStatementCatch, _super);
    function TryStatementCatch(handler, pcmarker, vsmarker, exc) {
        var _this = _super.call(this, Task_1.Task.runfor_throw) || this;
        _this.handler = handler;
        _this.pcmarker = pcmarker;
        _this.vsmarker = vsmarker;
        _this.exc = exc;
        return _this;
    }
    TryStatementCatch.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        var result = c.result;
        // We are in charge of resetting the exc label, the finally does the rest 
        // of the cleaning.
        // The pc of the catch block is pc + exc of body
        var handlerPC = Label_1.lub(c.labels.pc, c.labels.exc);
        // The exc of the catch block is the exc of _catch, that resets the exc
        c.labels.exc = this.exc;
        // if there is no handler or no exception was thrown, there's nothing more to do
        if (!this.handler || result.type !== 'throw') {
            return;
        }
        c.pcStack.reset(this.pcmarker);
        c.valueStack.reset(this.vsmarker);
        c.pcStack.push(handlerPC);
        var catchEnv = DeclarativeEnvironmentRecord_1.NewDeclarativeEnvironment(c.lexicalEnv);
        // ECMA-262 allows only idenfifiers, but the parser allows patterns;
        if (this.handler.param.type !== 'Identifier') {
            monitor.fatal('Pattern in catch not supported');
        }
        //@ts-ignore SYNTAX
        var identifier = new Value_1.Value(this.handler.param.name, Label_1.bot);
        catchEnv.CreateMutableBinding(identifier);
        catchEnv.SetMutableBinding(identifier, result.value);
        c.lexicalEnv = new Value_1.Value(catchEnv, c.effectivePC);
        result.type = 'normal';
        result.value = null;
        wl.push(this.handler.body);
    };
    return TryStatementCatch;
}(Task_1.Task));
// ---
var TryStatementFinally = /** @class */ (function (_super) {
    __extends(TryStatementFinally, _super);
    function TryStatementFinally(body, pcmarker, vsmarker, lexicalEnv) {
        var _this = _super.call(this, Task_1.Task.runfor_all) || this;
        _this.body = body;
        _this.pcmarker = pcmarker;
        _this.vsmarker = vsmarker;
        _this.lexicalEnv = lexicalEnv;
        return _this;
    }
    TryStatementFinally.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        // The pc of the finally is the pc of the try.
        // The exc of the finally is the exc of the _catch, which is either
        // the exc of theee try, unless it was raised by a handler, in which
        // case it escapes the try, and should affect the finally too.
        // We are in charge of resetting the pcStack, and the lexicalEnv 
        c.pcStack.reset(this.pcmarker);
        c.valueStack.reset(this.vsmarker);
        c.lexicalEnv = this.lexicalEnv;
        // if there is no finally block, we're done
        if (!this.body) {
            return;
        }
        // Allocate a new result --- _finally env choses between the result
        // of the body/handler, and the result of the finally
        var result = c.result;
        c.result = new Result_1.Result();
        var ip = c.workList.top();
        ip.then(this.body);
        ip.then(new TryStatementFinallyEnd(result));
    };
    return TryStatementFinally;
}(Task_1.Task));
// ---
var TryStatementFinallyEnd = /** @class */ (function (_super) {
    __extends(TryStatementFinallyEnd, _super);
    function TryStatementFinallyEnd(result) {
        var _this = _super.call(this, Task_1.Task.runfor_all) || this;
        _this.result = result;
        return _this;
    }
    TryStatementFinallyEnd.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        if (c.result.type === 'normal') {
            c.result = this.result;
        }
    };
    return TryStatementFinallyEnd;
}(Task_1.Task));

},{"../../DeclarativeEnvironmentRecord":90,"../../Label":123,"../../Result":174,"../../Value":184,"../Task":98}],113:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GetValue_1 = require("../../GetValue");
var PutValue_1 = require("../../PutValue");
var GetIdentifierReference_1 = require("../../GetIdentifierReference");
var Task_1 = require("../Task");
function variableDeclaration(node, wl, vs) {
    var ip = wl.top();
    for (var i = 0, len = node.declarations.length; i < len; i++) {
        var vd = node.declarations[i];
        if (vd.init) {
            if (vd.id.type !== 'Identifier') {
                monitor.fatal(vd.id.type + ' not supported in variable declarations');
            }
            //@ts-ignore SYNTAX
            var lhs = GetIdentifierReference_1.GetIdentifierReference(monitor.context.lexicalEnv, vd.id.name);
            ip.then(vd.init);
            ip.then(new VariableDeclarationUpdate(lhs));
        }
    }
}
exports.variableDeclaration = variableDeclaration;
// ---
var VariableDeclarationUpdate = /** @class */ (function (_super) {
    __extends(VariableDeclarationUpdate, _super);
    function VariableDeclarationUpdate(lhs) {
        var _this = _super.call(this) || this;
        _this.lhs = lhs;
        return _this;
    }
    VariableDeclarationUpdate.prototype.Execute = function (wl, vs) {
        //@ts-ignore STACK
        var rhs = GetValue_1.GetValue(vs.pop());
        PutValue_1.PutValue(this.lhs, rhs);
    };
    return VariableDeclarationUpdate;
}(Task_1.Task));

},{"../../GetIdentifierReference":118,"../../GetValue":119,"../../PutValue":172,"../Task":98}],114:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var Label_1 = require("../../Label");
var GetValue_1 = require("../../GetValue");
var ToBoolean_1 = require("../../Conversion/ToBoolean");
var emptyLabel = 'default'; // default is a reserved word so no actual label can be named default 
var MySet = Set;
// ------------------------------------------------------------
function whileStatement(node, wl, vs) {
    var c = monitor.context;
    var ip = wl.top();
    var lmap = c.labels.labelmap;
    if (!node.labelset) {
        node.labelset = new MySet([]);
    }
    node.labelset.add(emptyLabel);
    var outerEmptyLabelData = lmap[emptyLabel];
    lmap[emptyLabel] = {
        label: c.effectivePC,
        pcmarker: c.pcStack.marker()
    };
    var contextLabel = lmap[emptyLabel].label;
    c.pushPC(contextLabel);
    ip.then(new WhileStatementShared(node, outerEmptyLabelData));
}
exports.whileStatement = whileStatement;
// ------------------------------------------------------------
function doWhileStatement(node, wl, vs) {
    var c = monitor.context;
    var ip = wl.top();
    var lmap = c.labels.labelmap;
    if (!node.labelset) {
        node.labelset = new MySet([]);
    }
    node.labelset.add(emptyLabel);
    var outerEmptyLabelData = lmap[emptyLabel];
    lmap[emptyLabel] = {
        label: c.effectivePC,
        pcmarker: c.pcStack.marker()
    };
    // used for both statement label security labels and control security label
    var contextLabel = lmap[emptyLabel].label;
    c.pushPC(contextLabel);
    ip.then(node.body);
    ip.then(new WhileStatementShared(node, outerEmptyLabelData));
}
exports.doWhileStatement = doWhileStatement;
// ------------------------------------------------------------
var WhileStatementShared = /** @class */ (function (_super) {
    __extends(WhileStatementShared, _super);
    function WhileStatementShared(node, outerEmptyLabelData) {
        var _this = _super.call(this, Task_1.Task.runfor_continue_break) || this;
        _this.node = node;
        _this.outerEmptyLabelData = outerEmptyLabelData;
        _this.choser = new WhileStatementSharedChoose(_this);
        return _this;
    }
    WhileStatementShared.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        var result = c.result;
        if (result.type === 'break' && this.node.labelset.has(result.target)) {
            result.type = 'normal';
            result.target = null;
            c.labels.labelmap[emptyLabel] = this.outerEmptyLabelData;
            c.popPC(); // contextLabel
            return;
        }
        if (result.type !== 'continue' || !this.node.labelset.has(result.target)) {
            if (result.type !== 'normal') {
                return;
            }
        }
        // continue gets us here
        result.type = 'normal';
        result.target = null;
        ip.then(this.node.test);
        ip.then(this.choser);
    };
    return WhileStatementShared;
}(Task_1.Task));
// ---
var WhileStatementSharedChoose = /** @class */ (function (_super) {
    __extends(WhileStatementSharedChoose, _super);
    function WhileStatementSharedChoose(controller) {
        var _this = _super.call(this, Task_1.Task.runfor_continue) || this;
        _this.controller = controller;
        return _this;
    }
    WhileStatementSharedChoose.prototype.Execute = function (wl, vs) {
        var c = monitor.context;
        //@ts-ignore STACK
        var cond = GetValue_1.GetValue(vs.pop());
        var condb = ToBoolean_1.ToBoolean(cond);
        c.labels.pc = Label_1.lub(c.labels.pc, condb.label);
        if (condb.value) {
            var ip = wl.top();
            ip.then(this.controller.node.body);
            ip.then(this.controller);
        }
        else {
            c.labels.labelmap[emptyLabel] = this.controller.outerEmptyLabelData;
            c.popPC(); // contextLabel
        }
    };
    return WhileStatementSharedChoose;
}(Task_1.Task));

},{"../../Conversion/ToBoolean":81,"../../GetValue":119,"../../Label":123,"../Task":98}],115:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("../Task");
var GetValue_1 = require("../../GetValue");
var ToObject_1 = require("../../Conversion/ToObject");
var ObjectEnvironmentRecord_1 = require("../../ObjectEnvironmentRecord");
var Value_1 = require("../../Value");
// 12.10 ---------------------------------------------------------------------
function withStatement(node, wl, vs) {
    var ip = wl.top();
    ip.then(node.object);
    ip.then(new WithStatementBody(node));
}
exports.withStatement = withStatement;
// ---
var WithStatementBody = /** @class */ (function (_super) {
    __extends(WithStatementBody, _super);
    function WithStatementBody(node) {
        var _this = _super.call(this) || this;
        _this.node = node;
        return _this;
    }
    WithStatementBody.prototype.Execute = function (wl, vs) {
        var ip = wl.top();
        var c = monitor.context;
        //@ts-ignore STACK
        var val = GetValue_1.GetValue(vs.pop());
        var obj = ToObject_1.ToObject(val);
        var oldEnv = c.lexicalEnv;
        var newEnv = ObjectEnvironmentRecord_1.NewObjectEnvironment(obj, oldEnv);
        newEnv.provideThis();
        c.lexicalEnv = new Value_1.Value(newEnv, obj.label);
        ip.then(this.node.body);
        ip.then(new WithStatementEnd(oldEnv));
    };
    return WithStatementBody;
}(Task_1.Task));
// withStatementEnd
var WithStatementEnd = /** @class */ (function (_super) {
    __extends(WithStatementEnd, _super);
    function WithStatementEnd(lexicalEnv) {
        var _this = _super.call(this, Task_1.Task.runfor_continue_break) || this;
        _this.lexicalEnv = lexicalEnv;
        return _this;
    }
    WithStatementEnd.prototype.Execute = function (wl, vs) {
        monitor.context.lexicalEnv = this.lexicalEnv;
    };
    return WithStatementEnd;
}(Task_1.Task));

},{"../../Conversion/ToObject":85,"../../GetValue":119,"../../ObjectEnvironmentRecord":130,"../../Value":184,"../Task":98}],116:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var Reference_1 = require("../Reference");
var ToNumber_1 = require("../Conversion/ToNumber");
var GetValue_1 = require("../GetValue");
var ToBoolean_1 = require("../Conversion/ToBoolean");
var ToInt32_1 = require("../Conversion/ToInt32");
var Label_1 = require("../Label");
var ToObject_1 = require("../Conversion/ToObject");
var PutValue_1 = require("../PutValue");
// -------------------------------------------------------------
// Unary operators
// -------------------------------------------------------------
// Unary -, 11.4.7
function unaryMinus(wl, vs) {
    var ref = vs.pop();
    //@ts-ignore STACK
    var n = ToNumber_1.ToNumber(GetValue_1.GetValue(ref));
    n.value = -n.value;
    vs.push(n);
}
// -------------------------------------------------------------
// Unary +, 11.4.6
function unaryPlus(wl, vs) {
    var ref = vs.pop();
    //@ts-ignore STACK
    var n = ToNumber_1.ToNumber(GetValue_1.GetValue(ref));
    vs.push(n);
}
// -------------------------------------------------------------
// Logical NOT, 11.4.9
function unaryLogicalNot(wl, vs) {
    var ref = vs.pop();
    //@ts-ignore STACK
    var b = ToBoolean_1.ToBoolean(GetValue_1.GetValue(ref));
    b.value = !b.value;
    vs.push(b);
}
// -------------------------------------------------------------
// Bitwise NOT, 11.4.8
function unaryBitwiseNot(wl, vs) {
    var ref = vs.pop();
    //@ts-ignore STACK
    var n = ToInt32_1.ToInt32(GetValue_1.GetValue(ref));
    n.value = ~n.value;
    vs.push(n);
}
// -------------------------------------------------------------
// The typeof Operator, 11.4.3
function unaryTypeof(wl, vs) {
    var ref = vs.pop();
    if (ref instanceof Reference_1.Reference && ref.IsUnresolvableReference()) {
        vs.push(new Value_1.Value('undefined', ref.base.label));
    }
    else {
        var val = void 0;
        if (ref instanceof Reference_1.Reference) {
            val = GetValue_1.GetValue(ref);
        }
        else {
            //@ts-ignore TYPES
            val = ref;
        }
        if (val.value === null) {
            vs.push(new Value_1.Value('object', val.label));
            return;
        }
        if (typeof val.value === 'object') {
            // TODO: use type predicate
            if ('Call' in val.value) {
                vs.push(new Value_1.Value('function', val.label));
            }
            else {
                vs.push(new Value_1.Value('object', val.label));
            }
        }
        else {
            vs.push(new Value_1.Value(typeof val.value, val.label));
        }
    }
}
// -------------------------------------------------------------
// The void Operator, 11.4.2
function unaryVoid(wl, vs) {
    var ref = vs.pop();
    //@ts-ignore STACK
    var _ignore = GetValue_1.GetValue(ref);
    vs.push(new Value_1.Value(undefined, Label_1.bot));
}
// -------------------------------------------------------------
// The delete Operator, 11.4.1
function unaryDelete(wl, vs) {
    var ref = vs.pop();
    if (ref instanceof Reference_1.Reference) {
        if (ref.IsUnresolvableReference()) {
            vs.push(new Value_1.Value(true, ref.base.label));
        }
        else {
            if (ref.IsPropertyReference()) {
                var object = ToObject_1.ToObject(ref.base);
                vs.push(object.Delete(ref.propertyName));
            }
            else {
                vs.push(ref.base.DeleteBinding(ref.propertyName));
            }
        }
    }
    else {
        //@ts-ignore TYPES
        vs.push(new Value_1.Value(true, ref.label));
    }
}
// -------------------------------------------------------------
exports.unarytbl = {
    '-': unaryMinus,
    '+': unaryPlus,
    '!': unaryLogicalNot,
    '~': unaryBitwiseNot,
    'typeof': unaryTypeof,
    'void': unaryVoid,
    'delete': unaryDelete
};
// ------------------------------------------------------------- 
// Prefix, and Postfix Expressions, 11.3, 11.4.4, 11.4.5
function prefixOps(op, wl, vs) {
    //@ts-ignore
    var ref = vs.pop();
    var oldValue = ToNumber_1.ToNumber(GetValue_1.GetValue(ref));
    var val = op === '++' ? oldValue.value + 1 : oldValue.value - 1;
    var newValue = new Value_1.Value(val, oldValue.label);
    PutValue_1.PutValue(ref, newValue);
    vs.push(newValue);
}
function postfixOps(op, wl, vs) {
    //@ts-ignore
    var ref = vs.pop();
    var oldValue = ToNumber_1.ToNumber(GetValue_1.GetValue(ref));
    var val = op === '++' ? oldValue.value + 1 : oldValue.value - 1;
    var newValue = new Value_1.Value(val, oldValue.label);
    PutValue_1.PutValue(ref, newValue);
    vs.push(oldValue);
}
// -------------------------------------------------------------
exports.prefixtbl = {
    '++': prefixOps.bind(null, '++'),
    '--': prefixOps.bind(null, '--')
};
exports.postfixtbl = {
    '++': postfixOps.bind(null, '++'),
    '--': postfixOps.bind(null, '--')
};

},{"../Conversion/ToBoolean":81,"../Conversion/ToInt32":82,"../Conversion/ToNumber":84,"../Conversion/ToObject":85,"../GetValue":119,"../Label":123,"../PutValue":172,"../Reference":173,"../Value":184}],117:[function(require,module,exports){
// --------------------------------------------------------------------------
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
function isJSFlowError(e) {
    return e !== undefined && e !== null && e.type !== undefined;
}
exports.isJSFlowError = isJSFlowError;
// --------------------------------------------------------------------------
var SecurityError = /** @class */ (function (_super) {
    __extends(SecurityError, _super);
    function SecurityError(msg) {
        var _this = _super.call(this, msg) || this;
        _this.type = 'SecurityError';
        return _this;
    }
    return SecurityError;
}(Error));
exports.SecurityError = SecurityError;
// --------------------------------------------------------------------------
var FatalError = /** @class */ (function (_super) {
    __extends(FatalError, _super);
    function FatalError(msg) {
        var _this = _super.call(this, msg) || this;
        _this.type = 'FatalError';
        return _this;
    }
    return FatalError;
}(Error));
exports.FatalError = FatalError;

},{}],118:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Reference_1 = require("./Reference");
var Value_1 = require("./Value");
// ------------------------------------------------------------
// GetIdentifierReference, 10.2.2.1
function GetIdentifierReference(p, x) {
    if (!p) {
        monitor.fatal('GetIdentifierReference: p undefined or null for ' + x);
    }
    if (p.value == null) {
        return new Reference_1.Reference(new Value_1.Value(undefined, p.label), new Value_1.Value(x, Label_1.bot));
    }
    var erp = new Value_1.Value(p.value.EnvironmentRecord, p.label);
    var b = erp.HasBinding(new Value_1.Value(x, Label_1.bot));
    if (b.value) {
        erp.label = b.label;
        return new Reference_1.Reference(erp, new Value_1.Value(x, Label_1.bot));
    }
    else {
        var res = GetIdentifierReference(p.value.OuterLexicalEnvironment, x);
        res.base.raise(b.label);
        return res;
    }
}
exports.GetIdentifierReference = GetIdentifierReference;

},{"./Label":123,"./Reference":173,"./Value":184}],119:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Reference_1 = require("./Reference");
var Value_1 = require("./Value");
var ToObject_1 = require("./Conversion/ToObject");
var Label_1 = require("./Label");
var PropertyDescriptor_1 = require("./PropertyDescriptor");
function GetValue(v) {
    if (!v || !(v instanceof Reference_1.Reference)) {
        //@ts-ignore TYPES
        return v;
    }
    if (v.base.label === undefined)
        monitor.fatal('GetValue, base.label undefined');
    if (v.IsUnresolvableReference()) {
        monitor.Throw("ReferenceError", v.propertyName.value + ' not defined', v.base.label);
    }
    var p = v.base;
    var s = v.propertyName;
    if (v.IsPropertyReference()) {
        if (!v.HasPrimitiveBase()) {
            return p.Get(s);
        }
        else {
            var o = ToObject_1.ToObject(p);
            var ldesc = o.GetProperty(s);
            if (ldesc.value === undefined) {
                //@ts-ignore TYPES
                return ldesc;
            }
            var lbl = Label_1.lub(ldesc.label, ldesc.value.label);
            var desc = ldesc.value;
            if (PropertyDescriptor_1.IsDataDescriptor(desc)) {
                return new Value_1.Value(desc.value, lbl);
            }
            var get = desc.get;
            if (get === undefined) {
                new Value_1.Value(undefined, lbl);
            }
            // TODO: this must be wrong! part of old handling of getter/setters?
            monitor.context.pushPC(lbl);
            //@ts-ignore TYPES
            var res = get.Call(get, v.base);
            monitor.context.popPC();
            res.raise(lbl);
            return res;
        }
    }
    return p.GetBindingValue(s);
}
exports.GetValue = GetValue;

},{"./Conversion/ToObject":85,"./Label":123,"./PropertyDescriptor":156,"./Reference":173,"./Value":184}],120:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Value_1 = require("./Value");
var constants = require("./Constants");
var Interfaces_1 = require("./Interfaces");
// ------------------------------------------------------------
function HasInstance(X) {
    var F = this;
    var l = X.label;
    if (Interfaces_1.IsIEcmaObject(X)) {
        // needed to make typechecking work, otherwise V gets type Value<ValueTypes> in while below
        var V = X;
        var O = F.Get(constants.prototype);
        if (!Interfaces_1.IsIEcmaObject(O)) {
            monitor.Throw("TypeError", 'HasInstance', Label_1.bot);
            throw "TypeScript";
        }
        while (V.value !== null) {
            V = V.value.Prototype;
            l = Label_1.lub(l, V.label);
            if (O.value === V.value)
                return new Value_1.Value(true, l);
        }
    }
    return new Value_1.Value(false, l);
}
exports.HasInstance = HasInstance;

},{"./Constants":64,"./Interfaces":122,"./Label":123,"./Value":184}],121:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var FunctionPrototype_1 = require("./Prototypes/FunctionPrototype");
var FunctionConstructor_1 = require("./Constructors/FunctionConstructor");
var ObjectConstructor_1 = require("./Constructors/ObjectConstructor");
var ObjectPrototype_1 = require("./Prototypes/ObjectPrototype");
var ErrorPrototype_1 = require("./Prototypes/ErrorPrototype");
var ErrorConstructor_1 = require("./Constructors/ErrorConstructor");
var EvalErrorPrototype_1 = require("./Prototypes/EvalErrorPrototype");
var EvalErrorConstructor_1 = require("./Constructors/EvalErrorConstructor");
var RangeErrorPrototype_1 = require("./Prototypes/RangeErrorPrototype");
var RangeErrorConstructor_1 = require("./Constructors/RangeErrorConstructor");
var ReferenceErrorPrototype_1 = require("./Prototypes/ReferenceErrorPrototype");
var ReferenceErrorConstructor_1 = require("./Constructors/ReferenceErrorConstructor");
var SyntaxErrorPrototype_1 = require("./Prototypes/SyntaxErrorPrototype");
var SyntaxErrorConstructor_1 = require("./Constructors/SyntaxErrorConstructor");
var TypeErrorPrototype_1 = require("./Prototypes/TypeErrorPrototype");
var TypeErrorConstructor_1 = require("./Constructors/TypeErrorConstructor");
var URIErrorPrototype_1 = require("./Prototypes/URIErrorPrototype");
var URIErrorConstructor_1 = require("./Constructors/URIErrorConstructor");
var BooleanConstructor_1 = require("./Constructors/BooleanConstructor");
var BooleanPrototype_1 = require("./Prototypes/BooleanPrototype");
var ArrayPrototype_1 = require("./Prototypes/ArrayPrototype");
var ArrayConstructor_1 = require("./Constructors/ArrayConstructor");
var NumberPrototype_1 = require("./Prototypes/NumberPrototype");
var NumberConstructor_1 = require("./Constructors/NumberConstructor");
var StringPrototype_1 = require("./Prototypes/StringPrototype");
var StringConstructor_1 = require("./Constructors/StringConstructor");
var RegExpPrototype_1 = require("./Prototypes/RegExpPrototype");
var RegExpConstructor_1 = require("./Constructors/RegExpConstructor");
var DatePrototype_1 = require("./Prototypes/DatePrototype");
var DateConstructor_1 = require("./Constructors/DateConstructor");
var MathObject_1 = require("./Objects/MathObject");
var JSONObject_1 = require("./Objects/JSONObject");
var Instances = /** @class */ (function () {
    function Instances(global) {
        // pre-allocates instances, without setting them up due to circularity
        this.FunctionConstructor = new FunctionConstructor_1.FunctionConstructor(global.Function);
        this.FunctionPrototype = new FunctionPrototype_1.FunctionPrototype(global.Function.prototype);
        this.ObjectConstructor = new ObjectConstructor_1.ObjectConstructor(global.Object);
        this.ObjectPrototype = new ObjectPrototype_1.ObjectPrototype(global.Object.prototype);
        this.ErrorConstructor = new ErrorConstructor_1.ErrorConstructor(global.Error);
        this.ErrorPrototype = new ErrorPrototype_1.ErrorPrototype(global.Error.prototype);
        this.EvalErrorConstructor = new EvalErrorConstructor_1.EvalErrorConstructor(global.EvalError);
        this.EvalErrorPrototype = new EvalErrorPrototype_1.EvalErrorPrototype(global.EvalError.prototype);
        this.RangeErrorConstructor = new RangeErrorConstructor_1.RangeErrorConstructor(global.RangeError);
        this.RangeErrorPrototype = new RangeErrorPrototype_1.RangeErrorPrototype(global.RangeError.prototype);
        this.ReferenceErrorConstructor = new ReferenceErrorConstructor_1.ReferenceErrorConstructor(global.ReferenceError);
        this.ReferenceErrorPrototype = new ReferenceErrorPrototype_1.ReferenceErrorPrototype(global.ReferenceError.prototype);
        this.SyntaxErrorConstructor = new SyntaxErrorConstructor_1.SyntaxErrorConstructor(global.SyntaxError);
        this.SyntaxErrorPrototype = new SyntaxErrorPrototype_1.SyntaxErrorPrototype(global.SyntaxError.prototype);
        this.TypeErrorConstructor = new TypeErrorConstructor_1.TypeErrorConstructor(global.TypeError);
        this.TypeErrorPrototype = new TypeErrorPrototype_1.TypeErrorPrototype(global.TypeError.prototype);
        this.URIErrorConstructor = new URIErrorConstructor_1.URIErrorConstructor(global.URIError);
        this.URIErrorPrototype = new URIErrorPrototype_1.URIErrorPrototype(global.URIError.prototype);
        this.BooleanConstructor = new BooleanConstructor_1.BooleanConstructor(global.Boolean);
        this.BooleanPrototype = new BooleanPrototype_1.BooleanPrototype(global.Boolean.prototype);
        this.ArrayConstructor = new ArrayConstructor_1.ArrayConstructor(global.Array);
        this.ArrayPrototype = new ArrayPrototype_1.ArrayPrototype(global.Array.prototype);
        this.NumberConstructor = new NumberConstructor_1.NumberConstructor(global.Number);
        this.NumberPrototype = new NumberPrototype_1.NumberPrototype(global.Number.prototype);
        this.StringConstructor = new StringConstructor_1.StringConstructor(global.String);
        this.StringPrototype = new StringPrototype_1.StringPrototype(global.String.prototype);
        this.RegExpConstructor = new RegExpConstructor_1.RegExpConstructor(global.RegExp);
        this.RegExpPrototype = new RegExpPrototype_1.RegExpPrototype(global.RegExp.prototype);
        this.DateConstructor = new DateConstructor_1.DateConstructor(global.Date);
        this.DatePrototype = new DatePrototype_1.DatePrototype(global.Date.prototype);
        this.MathObject = new MathObject_1.MathObject(global.Math);
        this.JSONObject = new JSONObject_1.JSONObject(global.JSON);
    }
    Instances.prototype.Setup = function () {
        this.FunctionConstructor.Setup();
        this.FunctionPrototype.Setup();
        this.ObjectConstructor.Setup();
        this.ObjectPrototype.Setup();
        this.ErrorConstructor.Setup();
        this.ErrorPrototype.Setup();
        this.EvalErrorConstructor.Setup();
        this.EvalErrorPrototype.Setup();
        this.RangeErrorConstructor.Setup();
        this.RangeErrorPrototype.Setup();
        this.ReferenceErrorConstructor.Setup();
        this.ReferenceErrorPrototype.Setup();
        this.SyntaxErrorConstructor.Setup();
        this.SyntaxErrorPrototype.Setup();
        this.TypeErrorConstructor.Setup();
        this.TypeErrorPrototype.Setup();
        this.URIErrorConstructor.Setup();
        this.URIErrorPrototype.Setup();
        this.BooleanConstructor.Setup();
        this.BooleanPrototype.Setup();
        this.ArrayConstructor.Setup();
        this.ArrayPrototype.Setup();
        this.NumberConstructor.Setup();
        this.NumberPrototype.Setup();
        this.StringConstructor.Setup();
        this.StringPrototype.Setup();
        this.RegExpConstructor.Setup();
        this.RegExpPrototype.Setup();
        this.DateConstructor.Setup();
        this.DatePrototype.Setup();
        this.MathObject.Setup();
        this.JSONObject.Setup();
    };
    return Instances;
}());
exports.Instances = Instances;

},{"./Constructors/ArrayConstructor":65,"./Constructors/BooleanConstructor":66,"./Constructors/DateConstructor":67,"./Constructors/ErrorConstructor":68,"./Constructors/EvalErrorConstructor":69,"./Constructors/FunctionConstructor":70,"./Constructors/NumberConstructor":71,"./Constructors/ObjectConstructor":72,"./Constructors/RangeErrorConstructor":73,"./Constructors/ReferenceErrorConstructor":74,"./Constructors/RegExpConstructor":75,"./Constructors/StringConstructor":76,"./Constructors/SyntaxErrorConstructor":77,"./Constructors/TypeErrorConstructor":78,"./Constructors/URIErrorConstructor":79,"./Objects/JSONObject":142,"./Objects/MathObject":143,"./Prototypes/ArrayPrototype":157,"./Prototypes/BooleanPrototype":158,"./Prototypes/DatePrototype":159,"./Prototypes/ErrorPrototype":160,"./Prototypes/EvalErrorPrototype":161,"./Prototypes/FunctionPrototype":162,"./Prototypes/NumberPrototype":163,"./Prototypes/ObjectPrototype":164,"./Prototypes/RangeErrorPrototype":165,"./Prototypes/ReferenceErrorPrototype":166,"./Prototypes/RegExpPrototype":167,"./Prototypes/StringPrototype":168,"./Prototypes/SyntaxErrorPrototype":169,"./Prototypes/TypeErrorPrototype":170,"./Prototypes/URIErrorPrototype":171}],122:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
function IsIEcmaObject(x) {
    return typeof x.value === 'object' && x.value !== null && "Class" in x.value;
}
exports.IsIEcmaObject = IsIEcmaObject;

},{}],123:[function(require,module,exports){
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var CrawlerUtil_1 = require("./Toplevel/crawler/CrawlerUtil");
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
// -------------------------------------------------------------------------- 
// #CRAWLER
var include = {
    'global.AudioContext.destination.channelCount': true,
    'global.AudioContext.destination.channelCountMode': true,
    'global.AudioContext.destination.channelInterpretation': true,
    'global.AudioContext.destination.maxChannelCount': true,
    'global.AudioContext.destination.numberOfInputs': true,
    'global.AudioContext.destination.numberOfOutputs': true,
    'global.AudioContext.sampleRate': true,
    'global.HTMLFormElement.addBehavior': true,
    'global.HTMLFormElement.clientHeight': true,
    'global.HTMLFormElement.clientWidth': true,
    'global.HTMLFormElement.offsetHeight': true,
    'global.HTMLFormElement.offsetWidth': true,
    'global.Int8Array.reduce': true,
    'global.Int8Array.slice.reduce': true,
    'global.Intl.DateTimeFormat.resolvedOptions.timeZone': true,
    'global.OfflineAudioContext.oncomplete[0][0].renderedBuffer.getChannelData.reduce': true,
    'global.OfflineAudioContext.oncomplete[0][0].renderedBuffer.getChannelData.slice': true,
    'global.Plugin.description': true,
    'global.Plugin.length': true,
    'global.Plugin.name': true,
    'global.PluginArray.length': true,
    'global.RTCPeerConnection.onicecandidate[0][0].candidate.candidate': true,
    'global.WebGLRenderingContext': true,
    'global.XMLHttpRequest.readyState': true,
    'global.XMLHttpRequest.responseText': true,
    'global.XMLHttpRequest.status': true,
    'global.addBehavior': true,
    'global.devicePixelRatio': true,
    'global.doNotTrack': true,
    'global.document.appendChild': true,
    'global.document.body.addBehavior': true,
    'global.document.createElement.clientHeight': true,
    'global.document.createElement.clientWidth': true,
    'global.document.createElement.getContext.canvas': true,
    'global.document.createElement.getContext.getContextAttributes.antialias': true,
    'global.document.createElement.getContext.getExtension': true,
    'global.document.createElement.getContext.getParameter': true,
    'global.document.createElement.getContext.getParameter.0': true,
    'global.document.createElement.getContext.getParameter.1': true,
    'global.document.createElement.getContext.getShaderPrecisionFormat.precision': true,
    'global.document.createElement.getContext.getShaderPrecisionFormat.rangeMax': true,
    'global.document.createElement.getContext.getShaderPrecisionFormat.rangeMin': true,
    'global.document.createElement.getContext.getSupportedExtensions': true,
    'global.document.createElement.getContext.getSupportedExtensions.0': true,
    'global.document.createElement.getContext.getSupportedExtensions.1': true,
    'global.document.createElement.getContext.getSupportedExtensions.10': true,
    'global.document.createElement.getContext.getSupportedExtensions.11': true,
    'global.document.createElement.getContext.getSupportedExtensions.12': true,
    'global.document.createElement.getContext.getSupportedExtensions.13': true,
    'global.document.createElement.getContext.getSupportedExtensions.14': true,
    'global.document.createElement.getContext.getSupportedExtensions.15': true,
    'global.document.createElement.getContext.getSupportedExtensions.16': true,
    'global.document.createElement.getContext.getSupportedExtensions.17': true,
    'global.document.createElement.getContext.getSupportedExtensions.18': true,
    'global.document.createElement.getContext.getSupportedExtensions.19': true,
    'global.document.createElement.getContext.getSupportedExtensions.2': true,
    'global.document.createElement.getContext.getSupportedExtensions.20': true,
    'global.document.createElement.getContext.getSupportedExtensions.21': true,
    'global.document.createElement.getContext.getSupportedExtensions.22': true,
    'global.document.createElement.getContext.getSupportedExtensions.23': true,
    'global.document.createElement.getContext.getSupportedExtensions.24': true,
    'global.document.createElement.getContext.getSupportedExtensions.25': true,
    'global.document.createElement.getContext.getSupportedExtensions.3': true,
    'global.document.createElement.getContext.getSupportedExtensions.4': true,
    'global.document.createElement.getContext.getSupportedExtensions.5': true,
    'global.document.createElement.getContext.getSupportedExtensions.6': true,
    'global.document.createElement.getContext.getSupportedExtensions.7': true,
    'global.document.createElement.getContext.getSupportedExtensions.8': true,
    'global.document.createElement.getContext.getSupportedExtensions.9': true,
    'global.document.createElement.getContext.getSupportedExtensions.join': true,
    'global.document.createElement.getContext.getSupportedExtensions.length': true,
    'global.document.createElement.getContext.isPointInPath': true,
    'global.document.createElement.offsetHeight': true,
    'global.document.createElement.offsetWidth': true,
    'global.document.createElement.toDataURL': true,
    'global.document.createEvent': true,
    'global.document.getElementById': true,
    'global.document.getElementsByClassName': true,
    'global.document.getElementsByClassName.0': true,
    'global.document.getElementsByTagName': true,
    'global.document.getElementsByTagName.0.appendChild': true,
    'global.document.getElementsByTagName.0.offsetHeight': true,
    'global.document.getElementsByTagName.0.offsetWidth': true,
    'global.document.getElementsByTagName.appendChild': true,
    'global.document.getElementsByTagName.offsetHeight': true,
    'global.document.getElementsByTagName.offsetWidth': true,
    'global.indexedDB': true,
    'global.localStorage': true,
    'global.navigator.cookieEnabled': true,
    'global.navigator.cpuClass': true,
    'global.navigator.deviceMemory': true,
    'global.navigator.doNotTrack': true,
    'global.navigator.hardwareConcurrency': true,
    'global.navigator.language': true,
    'global.navigator.maxTouchPoints': true,
    'global.navigator.mediaDevices': true,
    'global.navigator.msDoNotTrack': true,
    'global.navigator.platform': true,
    'global.navigator.plugins': true,
    'global.navigator.plugins.0.0.suffixes': true,
    'global.navigator.plugins.0.0.type': true,
    'global.navigator.plugins.0.description': true,
    'global.navigator.plugins.0.forEach': true,
    'global.navigator.plugins.0.length': true,
    'global.navigator.plugins.0.name': true,
    'global.navigator.plugins.1.0.suffixes': true,
    'global.navigator.plugins.1.0.type': true,
    'global.navigator.plugins.1.description': true,
    'global.navigator.plugins.1.forEach': true,
    'global.navigator.plugins.1.length': true,
    'global.navigator.plugins.1.name': true,
    'global.navigator.plugins.2.0.suffixes': true,
    'global.navigator.plugins.2.0.type': true,
    'global.navigator.plugins.2.1.suffixes': true,
    'global.navigator.plugins.2.1.type': true,
    'global.navigator.plugins.2.description': true,
    'global.navigator.plugins.2.forEach': true,
    'global.navigator.plugins.2.length': true,
    'global.navigator.plugins.2.name': true,
    'global.navigator.plugins.description': true,
    'global.navigator.plugins.forEach': true,
    'global.navigator.plugins.length': true,
    'global.navigator.plugins.name': true,
    'global.navigator.plugins.suffixes': true,
    'global.navigator.plugins.type': true,
    'global.navigator.systemLanguage': true,
    'global.navigator.userAgent': true,
    'global.navigator.webdriver': true,
    'global.ontouchstart': true,
    'global.openDatabase': true,
    'global.screen.availHeight': true,
    'global.screen.availWidth': true,
    'global.screen.colorDepth': true,
    'global.screen.deviceXDPI': true,
    'global.screen.deviceYDPI': true,
    'global.screen.height': true,
    'global.screen.width': true,
    'global.sessionStorage': true,
    'global.swfobject': true
};
// 
var Top;
(function (Top) {
    Top[Top["Top"] = 0] = "Top";
})(Top || (Top = {}));
;
var MySet = Set;
var Label = /** @class */ (function () {
    function Label(p) {
        var e_1, _a;
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (p === Top.Top) {
            this.principals = Top.Top;
            return;
        }
        this.principals = new MySet(rest);
        if (typeof p === "string") {
            // #CRAWLER - if not in the interesting label set, become bot
            if (!include[p]) {
                return;
            }
            this.principals.add(p);
            return;
        }
        if (typeof p !== 'undefined') {
            try {
                for (var p_1 = __values(p), p_1_1 = p_1.next(); !p_1_1.done; p_1_1 = p_1.next()) {
                    var x = p_1_1.value;
                    // #CRAWLER - if not in the interesting label set don't add
                    if (include[x]) {
                        this.principals.add(x);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (p_1_1 && !p_1_1.done && (_a = p_1.return)) _a.call(p_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    // -------------------------------------------------------------------------- 
    Label.fromString = function (l) {
        return new Label(l.split(','));
    };
    // -------------------------------------------------------------------------- 
    Label.fromURL = function (l) {
        var re = new RegExp('http://[^/]*/');
        var res = re.exec(l);
        if (res === null) {
            return new Label(l.split(','));
        }
        else {
            return new Label([res[0]]);
        }
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.equals = function (l) {
        var e_2, _a, e_3, _b;
        var A = this.principals;
        var B = l.principals;
        if (A === Top.Top || B === Top.Top) {
            return A === B;
        }
        try {
            for (var A_1 = __values(A), A_1_1 = A_1.next(); !A_1_1.done; A_1_1 = A_1.next()) {
                var p = A_1_1.value;
                if (!B.has(p)) {
                    return false;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (A_1_1 && !A_1_1.done && (_a = A_1.return)) _a.call(A_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var B_1 = __values(B), B_1_1 = B_1.next(); !B_1_1.done; B_1_1 = B_1.next()) {
                var p = B_1_1.value;
                if (!A.has(p)) {
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (B_1_1 && !B_1_1.done && (_b = B_1.return)) _b.call(B_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return true;
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.le = function (l) {
        var e_4, _a;
        var A = this.principals;
        var B = l.principals;
        if (B === Top.Top) {
            return true;
        }
        if (A === Top.Top) {
            return false;
        }
        try {
            for (var A_2 = __values(A), A_2_1 = A_2.next(); !A_2_1.done; A_2_1 = A_2.next()) {
                var p = A_2_1.value;
                if (!B.has(p)) {
                    return false;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (A_2_1 && !A_2_1.done && (_a = A_2.return)) _a.call(A_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return true;
    };
    // -------------------------------------------------------------------------- 
    Label.prototype.toString = function () {
        var str = 'T';
        if (this.principals !== Top.Top) {
            str = Array.from(this.principals).join(', ');
        }
        return "<" + str + ">";
    };
    // ---
    Label.prototype.ToArray = function () {
        if (this.principals === Top.Top) {
            return ["T"];
        }
        return Array.from(this.principals).sort();
    };
    return Label;
}());
exports.Label = Label;
// -------------------------------------------------------------------------- 
exports.top = new Label(Top.Top);
exports.bot = new Label();
// -------------------------------------------------------------------------- 
function le(l1, l2) {
    return (l1.le(l2));
}
exports.le = le;
function ge(l1, l2) {
    return !l1.le(l2) || l1.equals(l2);
}
exports.ge = ge;
function lub() {
    var e_5, _a, e_6, _b;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 0) {
        return exports.bot;
    }
    var combinedPrincipals = new MySet();
    try {
        for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
            var l = args_1_1.value;
            if (l.principals === Top.Top) {
                return exports.top;
            }
            try {
                for (var _c = (e_6 = void 0, __values(l.principals)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var p = _d.value;
                    combinedPrincipals.add(p);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    var ret = new Label();
    ret.principals = combinedPrincipals;
    // #CRAWLER
    if (CrawlerUtil_1.IsCrawler(monitor)) {
        monitor.CrawlerData.AddGenerated(ret);
    }
    return ret;
}
exports.lub = lub;
function glb() {
    var e_7, _a, e_8, _b, e_9, _c;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 0) {
        return exports.bot;
    }
    var intersectedPrincipals = new MySet();
    var allIsTop = true;
    try {
        for (var args_2 = __values(args), args_2_1 = args_2.next(); !args_2_1.done; args_2_1 = args_2.next()) {
            var l = args_2_1.value;
            if (l.principals !== Top.Top) {
                intersectedPrincipals = l.principals;
                allIsTop = false;
                break;
            }
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (args_2_1 && !args_2_1.done && (_a = args_2.return)) _a.call(args_2);
        }
        finally { if (e_7) throw e_7.error; }
    }
    if (allIsTop) {
        // All is Top!
        return exports.top;
    }
    try {
        for (var args_3 = __values(args), args_3_1 = args_3.next(); !args_3_1.done; args_3_1 = args_3.next()) {
            var l = args_3_1.value;
            if (l.principals === Top.Top) {
                continue;
            }
            try {
                for (var intersectedPrincipals_1 = (e_9 = void 0, __values(intersectedPrincipals)), intersectedPrincipals_1_1 = intersectedPrincipals_1.next(); !intersectedPrincipals_1_1.done; intersectedPrincipals_1_1 = intersectedPrincipals_1.next()) {
                    var p = intersectedPrincipals_1_1.value;
                    if (!l.principals.has(p)) {
                        intersectedPrincipals.delete(p);
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (intersectedPrincipals_1_1 && !intersectedPrincipals_1_1.done && (_c = intersectedPrincipals_1.return)) _c.call(intersectedPrincipals_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (args_3_1 && !args_3_1.done && (_b = args_3.return)) _b.call(args_3);
        }
        finally { if (e_8) throw e_8.error; }
    }
    var ret = new Label();
    ret.principals = intersectedPrincipals;
    return ret;
}
exports.glb = glb;

},{"./Toplevel/crawler/CrawlerUtil":178}],124:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var ObjectEnvironmentRecord_1 = require("./ObjectEnvironmentRecord");
// ---
var LexicalEnvironment = /** @class */ (function () {
    function LexicalEnvironment(er, le) {
        this.EnvironmentRecord = er;
        this.OuterLexicalEnvironment = le;
    }
    LexicalEnvironment.prototype.provideThis = function () {
        if (this.EnvironmentRecord instanceof ObjectEnvironmentRecord_1.ObjectEnvironmentRecord) {
            this.EnvironmentRecord.provideThis = true;
        }
    };
    LexicalEnvironment.prototype.HasBinding = function (s) {
        return this.EnvironmentRecord.HasBinding(s);
    };
    LexicalEnvironment.prototype.CreateMutableBinding = function (p, d) {
        return this.EnvironmentRecord.CreateMutableBinding(p, d);
    };
    LexicalEnvironment.prototype.SetMutableBinding = function (p, v, s) {
        return this.EnvironmentRecord.SetMutableBinding(p, v, s);
    };
    LexicalEnvironment.prototype.GetBindingValue = function (p, s) {
        return this.EnvironmentRecord.GetBindingValue(p, s);
    };
    LexicalEnvironment.prototype.DeleteBinding = function (p) {
        return this.EnvironmentRecord.DeleteBinding(p);
    };
    LexicalEnvironment.prototype.ImplicitThisValue = function () {
        return this.EnvironmentRecord.ImplicitThisValue();
    };
    // TODO: fix
    // Only meaningful if the underlying environment record is 
    //  a declarative environment record
    LexicalEnvironment.prototype.CreateImmutableBinding = function (p, s) {
        //@ts-ignore TYPES
        this.EnvironmentRecord.CreateImmutableBinding(p);
    };
    LexicalEnvironment.prototype.InitializeImmutableBinding = function (p, v) {
        //@ts-ignore TYPES
        this.EnvironmentRecord.InitializeImmutableBinding(p, v);
    };
    return LexicalEnvironment;
}());
exports.LexicalEnvironment = LexicalEnvironment;

},{"./ObjectEnvironmentRecord":130}],125:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../../Value");
var Label_1 = require("../../Label");
var Require_1 = require("../Require");
var Module_1 = require("../Module");
var fs_1 = require("fs");
var path_1 = require("path");
var Require_2 = require("./Require");
//---
var CommonJSModule = /** @class */ (function (_super) {
    __extends(CommonJSModule, _super);
    function CommonJSModule(filename, parent) {
        var _this = _super.call(this, filename, parent) || this;
        _this.parent = parent;
        _this.require = new Require_2.CommonJSRequire(_this);
        _this.Put(new Value_1.Value('require', Label_1.bot), new Value_1.Value(_this.require, Label_1.bot), false);
        return _this;
    }
    CommonJSModule.LoadModule = function (path, parent) {
        var script = fs_1.readFileSync(path.value).toString();
        var moduleFunction = monitor.instances.FunctionConstructor.Construct([
            new Value_1.Value('require', Label_1.bot),
            new Value_1.Value('module', Label_1.bot),
            new Value_1.Value('exports', Label_1.bot),
            new Value_1.Value('__filename', Label_1.bot),
            new Value_1.Value('__dirname', Label_1.bot),
            new Value_1.Value(script, path.label)
        ]);
        var module = new CommonJSModule(path, parent);
        var exportsObject = module.Get(new Value_1.Value('exports', Label_1.bot));
        Require_1.Require.cache.set(path.value, exportsObject);
        moduleFunction.Call(new Value_1.Value(undefined, Label_1.bot), [
            new Value_1.Value(module.require, Label_1.bot),
            new Value_1.Value(module, Label_1.bot),
            exportsObject,
            new Value_1.Value(path_1.basename(path.value), path.label),
            new Value_1.Value(path_1.dirname(path.value), path.label)
        ]);
        return module.Get(new Value_1.Value('exports', Label_1.bot));
    };
    return CommonJSModule;
}(Module_1.Module));
exports.CommonJSModule = CommonJSModule;

},{"../../Label":123,"../../Value":184,"../Module":127,"../Require":128,"./Require":126,"fs":2,"path":50}],126:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var fs_1 = require("fs");
var Require_1 = require("../Require");
var Value_1 = require("../../Value");
var Label_1 = require("../../Label");
var Module_1 = require("./Module");
var CommonJSRequire = /** @class */ (function (_super) {
    __extends(CommonJSRequire, _super);
    function CommonJSRequire(module) {
        return _super.call(this, module) || this;
    }
    CommonJSRequire.prototype.TryLoad = function (labeledID) {
        var e_1, _a;
        var id = labeledID.value;
        try {
            for (var _b = __values(this.module.paths), _c = _b.next(); !_c.done; _c = _b.next()) {
                var parentPath = _c.value;
                if (id.startsWith('/')) {
                    parentPath = '/';
                }
                if (id.startsWith('./') || id.startsWith('/') || id.startsWith('../')) {
                    var modulePath = path_1.resolve(path_1.join(parentPath, id));
                    if (fs_1.existsSync(modulePath)) {
                        if (Require_1.Require.cache.get(modulePath)) {
                            var module_1 = Require_1.Require.cache.get(modulePath);
                            module_1.raise(Label_1.lub(this.label, labeledID.label));
                            return module_1;
                        }
                        return Module_1.CommonJSModule.LoadModule(new Value_1.Value(modulePath, labeledID.label), this.module);
                    }
                    modulePath = path_1.resolve(path_1.join(parentPath, id + '.js'));
                    if (fs_1.existsSync(modulePath)) {
                        if (Require_1.Require.cache.get(modulePath)) {
                            var module_2 = Require_1.Require.cache.get(modulePath);
                            module_2.raise(Label_1.lub(this.label, labeledID.label));
                            return module_2;
                        }
                        return Module_1.CommonJSModule.LoadModule(new Value_1.Value(modulePath, labeledID.label), this.module);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    return CommonJSRequire;
}(Require_1.Require));
exports.CommonJSRequire = CommonJSRequire;

},{"../../Label":123,"../../Value":184,"../Require":128,"./Module":125,"fs":2,"path":50}],127:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var ObjectObject_1 = require("../Objects/ObjectObject");
var path_1 = require("path");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var process_1 = require("process");
// ---
var Module = /** @class */ (function (_super) {
    __extends(Module, _super);
    function Module(filename, parent) {
        var _this = _super.call(this) || this;
        _this.Class = 'Module';
        if (filename !== undefined) {
            _this.label = Label_1.lub(filename.label, monitor.context.effectivePC);
            _this.filename = filename.value;
            _this.paths = _this.computePaths(path_1.dirname(_this.filename));
            _this.Put(new Value_1.Value('filename', Label_1.bot), filename, false);
            _this.Put(new Value_1.Value('id', Label_1.bot), filename, false);
        }
        else {
            _this.label = monitor.context.effectivePC;
            _this.paths = _this.computePaths(process_1.cwd());
            _this.Put(new Value_1.Value('filename', Label_1.bot), new Value_1.Value(undefined, Label_1.bot), false);
            _this.Put(new Value_1.Value('id', Label_1.bot), new Value_1.Value("<repl>", Label_1.bot), false);
        }
        var exportsObject = new ObjectObject_1.ObjectObject();
        _this.Put(new Value_1.Value('exports', Label_1.bot), new Value_1.Value(exportsObject, Label_1.bot), false);
        return _this;
    }
    Module.prototype.computePaths = function (dirname) {
        return [dirname];
    };
    return Module;
}(EcmaObject_1.EcmaObject));
exports.Module = Module;

},{"../Label":123,"../Objects/EcmaObject":137,"../Objects/ObjectObject":146,"../Value":184,"path":50,"process":51}],128:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
// ---
var Require = /** @class */ (function (_super) {
    __extends(Require, _super);
    function Require(module) {
        var _this = _super.call(this) || this;
        _this.Class = 'Require';
        _this.module = module;
        // this is the topmost require
        if (module.parent === undefined) {
            _this.label = monitor.context.effectivePC;
        }
        else {
            _this.main = module.parent.require.main;
            _this.label = Label_1.lub(module.label, monitor.context.effectivePC);
        }
        return _this;
    }
    // ---
    Require.prototype.Call = function (thisArg, args) {
        var labeledID = args[0];
        if (typeof labeledID.value !== 'string') {
            monitor.Throw("TypeError", 'require expects a string', thisArg.label);
            throw 'TypeScript';
        }
        var module = this.TryLoad(labeledID);
        if (module === undefined) {
            monitor.Throw("Error", labeledID.value + " not found", thisArg.label);
            throw 'TypeScript';
        }
        return module;
    };
    Require.prototype.Construct = function (args) {
        monitor.fatal('Cannot use require as a constructor');
        throw 'TypeScript';
    };
    Require.cache = new Map();
    return Require;
}(EcmaObject_1.EcmaObject));
exports.Require = Require;

},{"../Label":123,"../Objects/EcmaObject":137}],129:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Value_1 = require("./Value");
var Context_1 = require("./Context");
var Options_1 = require("./Options");
var Stack_1 = require("./Stack");
var ErrorObject_1 = require("./Objects/ErrorObject");
var EvalErrorObject_1 = require("./Objects/EvalErrorObject");
var RangeErrorObject_1 = require("./Objects/RangeErrorObject");
var ReferenceErrorObject_1 = require("./Objects/ReferenceErrorObject");
var SyntaxErrorObject_1 = require("./Objects/SyntaxErrorObject");
var TypeErrorObject_1 = require("./Objects/TypeErrorObject");
var URIErrorObject_1 = require("./Objects/URIErrorObject");
var StackTrace_1 = require("./StackTrace");
var Execute_1 = require("./Engine/Execute");
var Error_1 = require("./Error");
var beautify = require("js-beautify");
// --------------------------------------------------------------------------
var ExecutionInfo = /** @class */ (function () {
    function ExecutionInfo() {
        this.delta = 100000;
        this.steps = 0;
        this.time = Date.now();
    }
    ExecutionInfo.prototype.step = function () {
        this.steps++;
        if (this.steps % this.delta === 0) {
            this.report();
        }
    };
    ExecutionInfo.prototype.report = function () {
        if (!monitor.options.get('monitor.progress')) {
            return;
        }
        var currentTime = Date.now();
        var elapsed = (currentTime - this.time) / 1000;
        monitor.info("Executed a total of " + this.steps + " steps in " + elapsed + " seconds at an average rate of " + Math.floor(this.steps / elapsed) + " steps/second");
    };
    return ExecutionInfo;
}());
exports.ExecutionInfo = ExecutionInfo;
//
var MonitorBase = /** @class */ (function () {
    // ---
    // constructor
    function MonitorBase(global, print, log, info, warn, error) {
        this.contextStack = new Stack_1.Stack();
        global.monitor = this;
        global.JSFLOW_STACK_CHECK = true;
        this.print = print ? print : console.log;
        this.log = log ? log : console.log;
        this.warn = warn ? warn : console.warn;
        this.info = info ? info : console.info;
        this.error = error ? error : console.error;
        this.options = new Options_1.Options();
        /*
        * taintMode disables the context computation by overriding exc, ret, pc, and effectivePC
        * forcing them to return bot
        */
        this.options.declare('monitor.taintMode', 'boolean', false, 'taint mode');
        /*
        * testMode supresses label printing in output and security errors
        * to make jsflow compatible with the test harness set by the spiderflow and nodeflow commands
        */
        this.options.declare('monitor.testMode', 'boolean', false, 'test mode');
        /* observableMode supresses stop-on-security-error allowing execution to continue with
        * a printed warning message.
        */
        this.options.declare('monitor.observableMode', 'boolean', false, 'observable mode');
        /* progress causes jsflow to regularly report its execution progress.
        */
        this.options.declare('monitor.progress', 'boolean', false, 'progress mode');
        /* crawler turns on crawler specific gathering code that documents different aspects of the execution.
        */
        this.options.declare('monitor.crawler', 'boolean', false, 'crawler');
        this.debug = { active: false };
        //@ts-ignore
        var context = new Context_1.Context(null, null, null);
        this.contextStack.push(context);
        this.executionInfo = new ExecutionInfo();
    }
    Object.defineProperty(MonitorBase.prototype, "context", {
        // ---
        get: function () {
            return this.contextStack.peek();
        },
        enumerable: true,
        configurable: true
    });
    // ---
    MonitorBase.prototype.running = function () {
        return Execute_1.running();
    };
    ;
    // ---
    // ---
    // throws:
    //  Value<ValueType> or
    //  JSFlowError, when security error or fatal error
    MonitorBase.prototype.Execute = function (code, origin) {
        var result = Execute_1.executeGlobalCode(code, origin);
        if (result.type === 'throw') {
            throw result.value;
        }
        return result.value;
    };
    // ---
    // code transformation support
    MonitorBase.prototype.transform = function (code) {
        return code;
    };
    // ---
    MonitorBase.prototype.beautify = function (code) {
        return beautify.js(code);
    };
    // ---
    // ---
    MonitorBase.prototype.resume = function () {
        this.debug.active = false;
        return Execute_1.resume();
    };
    // ---
    MonitorBase.prototype.step = function () {
        return Execute_1.resume();
    };
    // ---
    MonitorBase.prototype.printWorkList = function () {
        this.log('context owner: ' + this.context.owner);
        this.log(String(this.context.workList));
    };
    // ---
    // TODO: fix proper printing
    MonitorBase.prototype.fatal = function (msg) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var exc = new Error_1.FatalError(msg + args.map(function (x) { return JSON.stringify(x); }).join(' '));
        throw exc;
    };
    // ---
    MonitorBase.prototype.stop = function (msg) {
        var exc = new Error(msg);
        //@ts-ignore TYPES
        exc.type = 'Stop';
        throw exc;
    };
    // ---
    MonitorBase.prototype.Throw = function (error, msg, lbl) {
        this.assert(Label_1.le(this.context.effectivePC, this.context.labels.exc), 'throw: effective pc ' + this.context.effectivePC +
            ' not below exception label ' + this.context.labels.exc);
        var msgValue = new Value_1.Value(msg, lbl);
        this.offendingTrace = this.stackTrace();
        switch (error) {
            case "Error": throw new Value_1.Value(new ErrorObject_1.ErrorObject(msgValue), Label_1.bot);
            case "EvalError": throw new Value_1.Value(new EvalErrorObject_1.EvalErrorObject(msgValue), Label_1.bot);
            case "RangeError": throw new Value_1.Value(new RangeErrorObject_1.RangeErrorObject(msgValue), Label_1.bot);
            case "ReferenceError": throw new Value_1.Value(new ReferenceErrorObject_1.ReferenceErrorObject(msgValue), Label_1.bot);
            case "SyntaxError": throw new Value_1.Value(new SyntaxErrorObject_1.SyntaxErrorObject(msgValue), Label_1.bot);
            case "TypeError": throw new Value_1.Value(new TypeErrorObject_1.TypeErrorObject(msgValue), Label_1.bot);
            case "URIError": throw new Value_1.Value(new URIErrorObject_1.URIErrorObject(msgValue), Label_1.bot);
        }
        this.fatal("Throw: Don't know how to deal with " + error);
    };
    // ---
    MonitorBase.prototype.stackTrace = function () {
        return new StackTrace_1.StackTrace(this.contextStack.toArray());
    };
    // ---
    MonitorBase.prototype.securityError = function (message) {
        if (this.options.get('monitor.testMode')) {
            return;
        }
        if (this.options.get('monitor.taintMode') || this.options.get('monitor.observableMode')) {
            this.warn("[JSFlow NORMAL] Security violation:", message);
        }
        else {
            var exc = new Error_1.SecurityError(message);
            throw exc;
        }
    };
    // ---
    MonitorBase.prototype.assert = function (b, msg) {
        if (!b)
            this.securityError(msg);
    };
    // lifts exceptions that 
    // 1. are not JSFlow internal exceptions 
    // 2. have a a JSFlow modeled counterpart
    // otherwise returns
    MonitorBase.prototype.tryRethrow = function (e, Throw) {
        if ((typeof e !== 'object' && typeof e !== 'function') || e === null) {
            return false;
        }
        if (Error_1.isJSFlowError(e)) {
            throw e;
        }
        if (e instanceof Value_1.Value) {
            throw e;
        }
        var isNative = e.name == "Error" ||
            e.name === "EvalError" ||
            e.name === "RangeError" ||
            e.name === "ReferenceError" ||
            e.name === "SyntaxError" ||
            e.name === "TypeError" ||
            e.name === "URIError";
        if (Throw && isNative) {
            this.Throw(e.name, e.stack, Label_1.bot);
        }
    };
    return MonitorBase;
}());
exports.MonitorBase = MonitorBase;

},{"./Context":80,"./Engine/Execute":95,"./Error":117,"./Label":123,"./Objects/ErrorObject":138,"./Objects/EvalErrorObject":139,"./Objects/RangeErrorObject":147,"./Objects/ReferenceErrorObject":148,"./Objects/SyntaxErrorObject":151,"./Objects/TypeErrorObject":152,"./Objects/URIErrorObject":153,"./Options":154,"./Stack":175,"./StackTrace":176,"./Value":184,"js-beautify":26}],130:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
var Value_1 = require("./Value");
var EcmaObject_1 = require("./Objects/EcmaObject");
var LexicalEnvironment_1 = require("./LexicalEnvironment");
// ------------------------------------------------------------
// 10.2.2.3
function NewObjectEnvironment(o, e) {
    var envRec = new ObjectEnvironmentRecord(o);
    var env = new LexicalEnvironment_1.LexicalEnvironment(envRec, e);
    return env;
}
exports.NewObjectEnvironment = NewObjectEnvironment;
// ------------------------------------------------------------
// Environment records, 10.2.1.2
var ObjectEnvironmentRecord = /** @class */ (function (_super) {
    __extends(ObjectEnvironmentRecord, _super);
    function ObjectEnvironmentRecord(p) {
        var _this = _super.call(this) || this;
        _this.provideThis = false;
        if (p.value === undefined)
            monitor.fatal('ObjectEnvironmentRecord, undefined binding object');
        _this.bindingObject = p; // Value
        return _this;
    }
    // ---
    ObjectEnvironmentRecord.prototype.raise = function (l) {
        this.bindingObject.raise(l);
    };
    // ---
    // HasBinding, 10.2.1.2.1
    ObjectEnvironmentRecord.prototype.HasBinding = function (p) {
        return this.bindingObject.HasProperty(p);
    };
    // ---
    // CreateMutableBinding, 10.2.1.2.2
    ObjectEnvironmentRecord.prototype.CreateMutableBinding = function (p, d) {
        var desc = {
            value: undefined,
            label: monitor.context.effectivePC,
            writable: true,
            enumerable: true,
            configurable: !!d
        };
        this.bindingObject.DefineOwnProperty(p, desc, true);
    };
    // ---
    // GetBindingValue, 10.2.1.2.4
    ObjectEnvironmentRecord.prototype.GetBindingValue = function (p, s) {
        return this.bindingObject.Get(p);
    };
    // SetMutableBinding, 10.2.1.2.3
    ObjectEnvironmentRecord.prototype.SetMutableBinding = function (p, v, s) {
        this.bindingObject.Put(p, v, s);
    };
    // DeleteBinding, 10.2.1.2.5
    ObjectEnvironmentRecord.prototype.DeleteBinding = function (p) {
        return this.bindingObject.Delete(p);
    };
    // ImplicitThisValue, 10.2.1.2.6
    ObjectEnvironmentRecord.prototype.ImplicitThisValue = function () {
        if (this.provideThis) {
            return this.bindingObject.clone();
        }
        else {
            return new Value_1.Value(undefined, Label_1.bot);
        }
    };
    return ObjectEnvironmentRecord;
}(EcmaObject_1.EcmaObject));
exports.ObjectEnvironmentRecord = ObjectEnvironmentRecord;

},{"./Label":123,"./LexicalEnvironment":124,"./Objects/EcmaObject":137,"./Value":184}],131:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EcmaObject_1 = require("./EcmaObject");
var Value_1 = require("../Value");
var Label_1 = require("../Label");
var ArgumentsObject = /** @class */ (function (_super) {
    __extends(ArgumentsObject, _super);
    function ArgumentsObject(F, args) {
        var _this = _super.call(this) || this;
        _this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        _this.Class = 'Arguments';
        _this.Extensible = true;
        var formalParams = F.FormalParameters;
        var args = args || [];
        for (var i = 0; i < args.length; i++) {
            _this.Put(new Value_1.Value(i, Label_1.bot), args[i], false);
        }
        for (var i = 0; i < formalParams.length; i++) {
            var id = formalParams[i];
            if (id.type !== 'Identifier') {
                monitor.fatal(id.type + ' is not supported in ArgumentsObject');
            }
            if (args[i]) {
                _this.Put(new Value_1.Value(id.name, Label_1.bot), args[i], false);
            }
        }
        _this.Put(new Value_1.Value('length', Label_1.bot), new Value_1.Value(args.length, Label_1.bot), false);
        _this.Put(new Value_1.Value('callee', Label_1.bot), new Value_1.Value(F, Label_1.bot), false);
        return _this;
    }
    return ArgumentsObject;
}(EcmaObject_1.EcmaObject));
exports.ArgumentsObject = ArgumentsObject;
// ------------------------------------------------------------
// Create Arguments Object, 10.6
function CreateArgumentsObject(env, F, args) {
    return new Value_1.Value(new ArgumentsObject(F, args), Label_1.bot);
}
exports.CreateArgumentsObject = CreateArgumentsObject;

},{"../Label":123,"../Value":184,"./EcmaObject":137}],132:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var ToUInt32_1 = require("../Conversion/ToUInt32");
var ToNumber_1 = require("../Conversion/ToNumber");
// ------------------------------------------------------------
// 15.4.2.1, and 15.4.2.2
var ArrayObject = /** @class */ (function (_super) {
    __extends(ArrayObject, _super);
    function ArrayObject(struct) {
        var _this = _super.call(this) || this;
        _this.Class = 'Array';
        _this.Prototype = new Value_1.Value(monitor.instances.ArrayPrototype, Label_1.bot);
        _this.Extensible = true;
        _this.properties = [];
        _this.labels = {};
        struct = struct || Label_1.bot;
        _this.labels.length = {
            value: struct,
            existence: Label_1.bot
        };
        _this.struct = struct;
        return _this;
    }
    // ---
    ArrayObject.fromValueArray = function (values, struct) {
        var array = new ArrayObject(struct);
        for (var i = 0, len = values.length; i < len; i++) {
            var value = values[i];
            array.properties[i] = value.value;
            array.labels[i] = {
                value: value.label,
                existence: Label_1.bot
            };
        }
        return array;
    };
    // ---
    ArrayObject.fromPropertyArray = function (values, struct) {
        var array = new ArrayObject(struct);
        for (var i = 0, len = values.length; i < len; i++) {
            var value = values[i];
            array.properties[i] = value.value;
            array.labels[i] = {
                value: value.label,
                existence: value.label
            };
        }
        return array;
    };
    // ---
    ArrayObject.fromArray = function (values, label, existence) {
        var array = new ArrayObject(existence);
        for (var i = 0, len = values.length; i < len; i++) {
            array.properties[i] = values[i];
            array.labels[i] = {
                value: label,
                existence: existence
            };
        }
        return array;
    };
    // ---
    ArrayObject.prototype.toString = function () {
        return this.properties.toString();
    };
    // ---
    ArrayObject.prototype.toLabeledString = function () {
        var strs = [];
        for (var p in this.properties) {
            strs.push(this.properties[p] + '_' + this.labels[p].value.toString() + '(' + this.labels[p].existence.toString() + ')');
        }
        return '[ ' + strs.join(', ') + ' | ' + this.struct.toString() + ', length : ' + this.labels.length.value.toString() + '(' + this.labels.length.existence.toString() + ')' + ' ]';
    };
    // ---
    // 15.4.5.1
    ArrayObject.prototype.DefineOwnProperty = function (s, desc, Throw) {
        var c = monitor.context;
        /* Instead of lengthContext = lub(c.effectivePC, s.label), push s.label to
           pc-stack, and use pc (to make taintMode easier) */
        c.pushPC(s.label);
        if (!Label_1.le(c.effectivePC, this.labels.length.value)) {
            monitor.securityError("Array.prototype.DefineOwnProperty: write context " + c.effectivePC + " not below length label " + this.labels.length.value);
            // For observable flows
            this.labels.length.value = Label_1.lub(this.labels.length.value, c.effectivePC);
        }
        c.popPC();
        var oldLenDesc = this.GetOwnProperty(new Value_1.Value('length', Label_1.bot));
        var oldLen = new Value_1.Value(oldLenDesc.value.value, oldLenDesc.label);
        if (s.value === 'length') {
            if (desc.value === undefined) {
                return _super.prototype.DefineOwnProperty.call(this, s, desc, Throw);
            }
            var newLen = ToUInt32_1.ToUInt32(new Value_1.Value(desc.value, desc.label));
            if (newLen.value !== ToNumber_1.ToNumber(new Value_1.Value(desc.value, desc.label)).value) {
                monitor.Throw('RangeError', 'Invalid length in Array.DefineOwnProperty', Label_1.bot);
            }
            if (newLen.value >= oldLen.value) {
                return _super.prototype.DefineOwnProperty.call(this, s, { value: newLen.value, label: Label_1.lub(newLen.label, desc.label) }, Throw);
            }
            if (oldLenDesc.value.writable === false) {
                if (Throw) {
                    monitor.Throw('TypeError', 'Non-writable descriptor in Array.DefineOwnProperty', Label_1.bot);
                }
                else {
                    return new Value_1.Value(false, Label_1.bot);
                }
            }
            desc.value = newLen.value;
            desc.label = Label_1.lub(desc.label, newLen.label);
        }
        return _super.prototype.DefineOwnProperty.call(this, s, desc, Throw);
    };
    return ArrayObject;
}(EcmaObject_1.EcmaObject));
exports.ArrayObject = ArrayObject;

},{"../Conversion/ToNumber":84,"../Conversion/ToUInt32":89,"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],133:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
// ------------------------------------------------------------
// Boolean Object, 15.6.5
var BooleanObject = /** @class */ (function (_super) {
    __extends(BooleanObject, _super);
    function BooleanObject(val, lbl) {
        var _this = _super.call(this) || this;
        _this.Class = 'Boolean';
        _this.PrimitiveValue = new Boolean(val);
        _this.PrimitiveLabel = lbl;
        _this.Extensible = true;
        _this.Prototype = new Value_1.Value(monitor.instances.BooleanPrototype, Label_1.bot);
        return _this;
    }
    return BooleanObject;
}(EcmaObject_1.EcmaObject));
exports.BooleanObject = BooleanObject;
// ---
function IsBooleanObject(x) {
    return typeof x.value === 'object' && x.value !== null && x.value.Class === 'Boolean';
}
exports.IsBooleanObject = IsBooleanObject;

},{"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],134:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BuiltinMethodObject_1 = require("./BuiltinMethodObject");
// ------------------------------------------------------------
var BuiltinFunctionObject = /** @class */ (function (_super) {
    __extends(BuiltinFunctionObject, _super);
    function BuiltinFunctionObject(f, n, host) {
        return _super.call(this, undefined, f, n, host) || this;
    }
    return BuiltinFunctionObject;
}(BuiltinMethodObject_1.BuiltinMethodObject));
exports.BuiltinFunctionObject = BuiltinFunctionObject;

},{"./BuiltinMethodObject":135}],135:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("./EcmaObject");
var constants = require("../Constants");
// ------------------------------------------------------------
var BuiltinMethodObject = /** @class */ (function (_super) {
    __extends(BuiltinMethodObject, _super);
    function BuiltinMethodObject(self, f, n, host) {
        var _this = _super.call(this) || this;
        _this.host = host;
        _this.actualFunction = f;
        _this.self = self || _this;
        _this.Class = 'Function';
        _this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        _this.Extensible = true;
        Define_1.DefineFFF(_this, constants.length, n);
        return _this;
    }
    BuiltinMethodObject.prototype.Call = function (thisArg, args) {
        try {
            return this.actualFunction.call(this.self, thisArg, args);
        }
        catch (e) {
            monitor.tryRethrow(e, true);
            monitor.fatal("BuiltinMethodObject.Call, unable to lift " + e + " (error is of type " + typeof e + " \noriginating from " + this.actualFunction + " \nrepresenting host " + this.host + ") \ncalled with this: " + thisArg.value + " \nand args: " + args);
            throw 'TypeScript';
        }
    };
    BuiltinMethodObject.prototype.Construct = function (args) {
        monitor.Throw("TypeError", 'cannot be used as a constructor', Label_1.bot);
        throw 'TypeScript';
    };
    BuiltinMethodObject.prototype.toString = function () {
        if (this.host) {
            return this.host.toString();
        }
        else {
            return this.actualFunction.toString();
        }
    };
    return BuiltinMethodObject;
}(EcmaObject_1.EcmaObject));
exports.BuiltinMethodObject = BuiltinMethodObject;

},{"../Constants":64,"../Define":91,"../Label":123,"../Value":184,"./EcmaObject":137}],136:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
// ------------------------------------------------------------
// Date Object, 15.9.5
var DateObject = /** @class */ (function (_super) {
    __extends(DateObject, _super);
    function DateObject(date, label) {
        var _this = _super.call(this) || this;
        _this.Class = 'Date';
        _this.PrimitiveValue = date;
        _this.PrimitiveLabel = label;
        _this.Extensible = true;
        _this.Prototype = new Value_1.Value(monitor.instances.DatePrototype, Label_1.bot);
        return _this;
    }
    return DateObject;
}(EcmaObject_1.EcmaObject));
exports.DateObject = DateObject;
function IsDateObject(x) {
    return typeof x.value === 'object' && x.value !== null && x.value.Class === 'Date';
}
exports.IsDateObject = IsDateObject;

},{"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],137:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var Label_1 = require("../Label");
var PropertyDescriptor_1 = require("../PropertyDescriptor");
var constants = require("../Constants");
var IsCallable_1 = require("../Utility/IsCallable");
// ------------------------------------------------------------
// Ecma Objects, 8.6.2
var EcmaObject = /** @class */ (function () {
    function EcmaObject() {
        this._prototype = new Value_1.Value(null, Label_1.bot);
        this.Extensible = true;
        this.properties = {};
        this.labels = {};
        this.properties = {};
        this.labels = {};
        this.struct = monitor.context.effectivePC;
        Object.defineProperty(this, 'map', {
            get: function () {
                throw new Error('Something touched Ecma.map');
            },
            configurable: true
        });
    }
    Object.defineProperty(EcmaObject.prototype, "Prototype", {
        get: function () {
            return this._prototype;
        },
        set: function (p) {
            this._prototype = p;
        },
        enumerable: true,
        configurable: true
    });
    // ---
    EcmaObject.prototype.toString = function () {
        return this.Class ? this.Class : 'EcmaObject';
    };
    // --- used by lprint
    EcmaObject.prototype.toLabeledString = function () {
        return this.toString();
    };
    // ---
    EcmaObject.prototype.getOwnPropertyNames = function (label) {
        var names = Object.getOwnPropertyNames(this.properties);
        var result = [];
        for (var i = 0, len = names.length; i < len; i++) {
            var name = names[i];
            result[i] = new Value_1.Value(name, Label_1.lub(label, this.labels[name].existence));
        }
        return result;
    };
    // ---
    EcmaObject.prototype.getOwnEnumerablePropertyNames = function (label) {
        var names = Object.getOwnPropertyNames(this.properties);
        var enumerable = [];
        var j = 0;
        for (var i = 0, len = names.length; i < len; i++) {
            var name = names[i];
            // from getOwnPropertyNames; guaranteed to be found
            var desc = Object.getOwnPropertyDescriptor(this.properties, name);
            if (desc.enumerable) {
                enumerable[j++] = new Value_1.Value(name, Label_1.lub(label, this.labels[name].existence));
            }
        }
        return enumerable;
    };
    // ---
    EcmaObject.prototype.getEnumerablePropertyNames = function (initialLabel) {
        var defined = {};
        var result = [];
        var j = 0;
        var current = this;
        var lbl = initialLabel || Label_1.bot;
        while (current) {
            var enumerable = current.getOwnEnumerablePropertyNames(lbl);
            for (var i = 0, len = enumerable.length; i < len; i++) {
                var name = enumerable[i];
                if (!defined.hasOwnProperty(name.value)) {
                    defined[name.value] = true;
                    result[j++] = name;
                }
            }
            var next = current.Prototype;
            //@ts-ignore TYPES
            current = next.value;
            lbl = Label_1.lub(lbl, next.label);
        }
        return result;
    };
    // GetOwnProperty, 8.12.1 -----------------------------------------------------
    EcmaObject.prototype.GetOwnProperty = function (s) {
        var propName = s.value;
        var propNameLabel = s.label;
        var jsdesc = Object.getOwnPropertyDescriptor(this.properties, propName);
        if (jsdesc === undefined) {
            return new Value_1.Value(undefined, Label_1.lub(this.struct, propNameLabel));
        }
        var propLabel = this.labels[propName];
        // @ts-ignore
        jsdesc.label = propLabel.value;
        var result = new Value_1.Value(jsdesc, Label_1.lub(propNameLabel, propLabel.existence));
        return result;
    };
    // GetProperty, 8.12.2 --------------------------------------------------------
    EcmaObject.prototype.GetProperty = function (s) {
        var prop = this.GetOwnProperty(s);
        if (prop.value !== undefined) {
            return prop;
        }
        var proto = this.Prototype;
        var lbl = Label_1.lub(prop.label, proto.label);
        if (proto.value === null) {
            return new Value_1.Value(undefined, lbl);
        }
        // DEBUG: remove
        if (proto.value === undefined) {
            monitor.fatal('ECMA Object with undefined Prototype');
        }
        var res = proto.GetProperty(s);
        res.label = Label_1.lub(lbl, res.label);
        return res;
    };
    // Get, 8.12.3 ----------------------------------------------------------------
    EcmaObject.prototype.Get = function (s) {
        var descValue = this.GetProperty(s);
        if (descValue.value === undefined) {
            return new Value_1.Value(undefined, descValue.label);
        }
        var v;
        var desc = descValue.value;
        monitor.context.pushPC(descValue.label);
        if ('value' in desc) {
            v = new Value_1.Value(desc.value, desc.label);
        }
        else if (desc.get) {
            monitor.context.pushPC(desc.label);
            v = desc.get.call(this);
            monitor.context.popPC();
        }
        else {
            v = new Value_1.Value(undefined, descValue.label);
        }
        monitor.context.popPC();
        v.raise(descValue.label);
        return v;
    };
    // CanPut, 8.12.4 -------------------------------------------------------------
    EcmaObject.prototype.CanPut = function (p) {
        var labeledDesc = this.GetOwnProperty(p);
        var label = labeledDesc.label;
        if (labeledDesc.value) {
            var desc = labeledDesc.value;
            label = Label_1.lub(label, desc.label);
            if (PropertyDescriptor_1.IsAccessorDescriptor(desc)) {
                return new Value_1.Value(desc.set !== undefined, label);
            }
            else {
                return new Value_1.Value(!!desc.writable, label);
            }
        }
        var proto = this.Prototype;
        if (proto.value === null) {
            return new Value_1.Value(this.Extensible, label);
        }
        var lableledPrototypeDesc = proto.GetProperty(p);
        label = Label_1.lub(label, lableledPrototypeDesc.label);
        if (lableledPrototypeDesc.value === undefined) {
            return new Value_1.Value(this.Extensible, label);
        }
        var prototypeDesc = lableledPrototypeDesc.value;
        label = Label_1.lub(label, prototypeDesc.label);
        if (PropertyDescriptor_1.IsAccessorDescriptor(prototypeDesc)) {
            return new Value_1.Value(prototypeDesc.set !== undefined, label);
        }
        else {
            if (!this.Extensible) {
                return new Value_1.Value(false, label);
            }
            else {
                return new Value_1.Value(!!prototypeDesc.writable, label);
            }
        }
    };
    // Put, 8.12.5 ----------------------------------------------------------------
    EcmaObject.prototype.Put = function (s, v, Throw) {
        var c = monitor.context;
        var canPut = this.CanPut(s);
        if (!canPut.value) {
            if (Throw) {
                c.pushPC(canPut.label);
                monitor.Throw("TypeError", 'illegal access', Label_1.bot);
            }
            return;
        }
        c.pushPC(new Label_1.Label());
        var ownDesc = this.GetOwnProperty(s);
        if (ownDesc.value && PropertyDescriptor_1.IsDataDescriptor(ownDesc.value)) {
            this.DefineOwnProperty(s, { value: v.value, label: v.label }, Throw);
            c.popPC();
            return;
        }
        var desc = this.GetProperty(s);
        if (desc.value && PropertyDescriptor_1.IsAccessorDescriptor(desc.value)) {
            this.struct = Label_1.lub(this.struct, s.label);
            if (desc.value.set) {
                c.labels.pc = Label_1.lub(c.labels.pc, desc.label);
                try {
                    desc.value.set.call(this, v);
                }
                catch (e) {
                    monitor.tryRethrow(e, Throw);
                    monitor.fatal("EcmaObject.Put, unable to lift " + e + " of type " + typeof e + " (Put(" + s.value + ", " + v.value + ") on " + this.properties + ")");
                }
            }
            c.popPC();
            return;
        }
        c.labels.pc = Label_1.lub(c.labels.pc, desc.label);
        this.DefineOwnProperty(s, {
            value: v.value,
            label: v.label,
            writable: true,
            enumerable: true,
            configurable: true
        }, Throw);
        c.popPC();
        return;
    };
    // HasProperty, 8.12.6 --------------------------------------------------------
    EcmaObject.prototype.HasProperty = function (s) {
        var desc = this.GetProperty(s);
        var val = new Value_1.Value(desc.value !== undefined, desc.label);
        return val;
    };
    // Delete, 8.12.7 -------------------------------------------------------------
    EcmaObject.prototype.Delete = function (s, Throw) {
        var c = monitor.context;
        var propertyName = s.value;
        var desc = this.GetOwnProperty(s);
        if (desc.value === undefined) {
            return new Value_1.Value(true, desc.label);
        }
        if (!Label_1.le(c.effectivePC, this.struct)) {
            var msg = "Ecma.prototype.Delete: security context " + c.effectivePC + " not below structure " + this.struct;
            monitor.securityError(msg);
            // For observable flows
            this.struct = Label_1.lub(this.struct, c.effectivePC);
        }
        var lbl = Label_1.lub(c.effectivePC, desc.label);
        var existence = this.labels[propertyName].existence;
        // use pc stack for taint mode
        c.pushPC(lbl);
        if (!Label_1.le(c.effectivePC, existence)) {
            var msg = "Ecma.prototype.Delete: security context " + lbl + " not below exstence label " + existence;
            monitor.securityError(msg);
            // For observable flows
            existence = Label_1.lub(existence, lbl);
        }
        c.popPC();
        var res;
        try {
            res = delete this.properties[propertyName];
            if (res) {
                delete this.labels[propertyName];
            }
        }
        catch (e) {
            monitor.tryRethrow(e, Throw);
            monitor.fatal("EcmaObject.Delete, unable to lift " + e + " of type " + typeof e + " (Delete(" + s.value + ") on " + this.properties + ")");
        }
        return new Value_1.Value(res, Label_1.lub(desc.label, existence));
    };
    // DefaultValue, 8.12.8 -------------------------------------------------------
    EcmaObject.prototype.DefaultValue = function (hint) {
        if (hint === undefined) {
            if (this.Class === 'Date')
                hint = 'string';
            else
                hint = 'number';
        }
        if (hint === 'string') {
            var toString_1 = this.Get(constants.toString);
            if (IsCallable_1.IsCallable(toString_1)) {
                var str = toString_1.Call(new Value_1.Value(this, Label_1.bot), []);
                if (isDefinedPrimitiveValue(str))
                    return str;
            }
            monitor.context.pushPC(toString_1.label);
            var valueOf_1 = this.Get(constants.valueOf);
            if (IsCallable_1.IsCallable(valueOf_1)) {
                var str = valueOf_1.Call(new Value_1.Value(this, Label_1.bot), []);
                if (isDefinedPrimitiveValue(str)) {
                    str.raise(toString_1.label);
                    monitor.context.popPC();
                    return str;
                }
            }
            // return new Value('DefaultValue: unable to convert', bot);
            monitor.Throw("TypeError", 'default value, unable to convert', Label_1.lub(toString_1.label, valueOf_1.label));
        }
        // hint must be 'number'
        var valueOf = this.Get(constants.valueOf);
        if (IsCallable_1.IsCallable(valueOf)) {
            var str = valueOf.Call(new Value_1.Value(this, Label_1.bot), []);
            if (isDefinedPrimitiveValue(str))
                return str;
        }
        monitor.context.pushPC(valueOf.label);
        var toString = this.Get(constants.toString);
        if (IsCallable_1.IsCallable(toString)) {
            var str = toString.Call(new Value_1.Value(this, Label_1.bot), []);
            if (isDefinedPrimitiveValue(str)) {
                str.raise(valueOf.label);
                monitor.context.popPC();
                return str;
            }
        }
        return monitor.Throw("TypeError", 'default value, unable to convert', Label_1.lub(toString.label, valueOf.label));
    };
    // DefineOwnProperty, 8.12.9 --------------------------------------------------
    EcmaObject.prototype.DefineOwnProperty = function (s, desc, Throw) {
        var c = monitor.context;
        var propName = s.value;
        var propNameLabel = s.label;
        var contextLabel = Label_1.lub(c.effectivePC, propNameLabel);
        try {
            if (Object.hasOwnProperty.call(this.properties, propName)) {
                var valueLabel = this.labels[propName].value;
                // use the pc stack to make taint mode easier
                c.pushPC(contextLabel);
                if (!Label_1.le(c.effectivePC, valueLabel)) {
                    var msg = "Ecma.prototype.DefineOwnProperty: security context " + contextLabel + " not below existing value label " + valueLabel + " for property " + propName;
                    monitor.securityError(msg);
                    // For observable flows
                    valueLabel = Label_1.lub(valueLabel, contextLabel);
                }
                c.popPC();
            }
            else {
                if (!Label_1.le(c.effectivePC, this.struct)) {
                    var msg = "Ecma.prototype.DefineOwnProperty: security context " + c.effectivePC + " not below structure " + this.struct;
                    monitor.securityError(msg);
                    // For observable flows
                    this.struct = Label_1.lub(this.struct, c.effectivePC);
                }
            }
            this.struct = Label_1.lub(this.struct, propNameLabel);
            if (desc.get) {
                var get_1 = desc.get;
                //@ts-ignore DESC HELL
                desc.get = function () { return get_1.Call(new Value_1.Value(this, Label_1.bot), []); };
                //@ts-ignore DESC HELL
                desc.get.actualFunction = get_1;
            }
            if (desc.set) {
                var set_1 = desc.set;
                //@ts-ignore DESC HELL
                desc.set = function (v) { return set_1.Call(new Value_1.Value(this, Label_1.bot), [v]); };
                //@ts-ignore DESC HELL
                desc.set.actualFunction = set_1;
            }
            //@ts-ignore DESC HELL
            Object.defineProperty(this.properties, propName, desc);
            // fix of issue #4, label of enumerable is part of desc.label and affects the existence.
            this.labels[propName] = { value: Label_1.lub(desc.label, contextLabel), existence: Label_1.lub(desc.label, contextLabel) };
        }
        catch (e) {
            //@ts-ignore TYPES
            monitor.tryRethrow(e, Throw);
            monitor.fatal("EcmaObject.DefineOwnProperty, unable to lift " + e + " of type " + typeof e + " (DefineOwnProperty(" + s.value + ", " + desc + ") on " + this.properties + ")");
        }
        return new Value_1.Value(true, Label_1.bot);
    };
    return EcmaObject;
}());
exports.EcmaObject = EcmaObject;
function isDefinedPrimitiveValue(value) {
    return typeof value.value === 'boolean' || typeof value.value === 'string' || typeof value.value === 'number';
}

},{"../Constants":64,"../Label":123,"../PropertyDescriptor":156,"../Utility/IsCallable":182,"../Value":184}],138:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var ToString_1 = require("../Conversion/ToString");
var Label_1 = require("../Label");
// ------------------------------------------------------------
var ErrorObject = /** @class */ (function (_super) {
    __extends(ErrorObject, _super);
    function ErrorObject(v) {
        var _this = _super.call(this) || this;
        _this.Prototype = new Value_1.Value(monitor.instances.ErrorPrototype, Label_1.bot);
        _this.Class = 'Error';
        _this.Extensible = true;
        var message = new Value_1.Value("", Label_1.bot);
        if (v.value !== undefined) {
            message = ToString_1.ToString(v);
        }
        _this.DefineOwnProperty(constants.message, {
            value: message.value,
            label: message.label,
            writable: true,
            enumerable: false,
            configurable: true
        });
        // for toString
        _this.message = message.value;
        _this.stack = monitor.stackTrace();
        return _this;
    }
    ErrorObject.prototype.toString = function () {
        var str = 'Error: ' + this.message + '\n' + this.stack.toString();
        return str;
    };
    return ErrorObject;
}(EcmaObject_1.EcmaObject));
exports.ErrorObject = ErrorObject;

},{"../Constants":64,"../Conversion/ToString":87,"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],139:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NativeErrorObject_1 = require("./NativeErrorObject");
// ------------------------------------------------------------
var EvalErrorObject = /** @class */ (function (_super) {
    __extends(EvalErrorObject, _super);
    function EvalErrorObject(v) {
        var _this = _super.call(this, monitor.instances.EvalErrorPrototype, v) || this;
        _this.Type = 'NativeError';
        return _this;
    }
    return EvalErrorObject;
}(NativeErrorObject_1.NativeErrorObject));
exports.EvalErrorObject = EvalErrorObject;

},{"./NativeErrorObject":144}],140:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var ObjectObject_1 = require("../Objects/ObjectObject");
var HasInstance_1 = require("../HasInstance");
var Interfaces_1 = require("../Interfaces");
var PP_1 = require("../PP");
var Execute_1 = require("../Engine/Execute");
var ToObject_1 = require("../Conversion/ToObject");
var DeclarativeEnvironmentRecord_1 = require("../DeclarativeEnvironmentRecord");
var Binding_1 = require("../Engine/Binding");
// ------------------------------------------------------------
// 10.4.3
function enterFunctionCode(F, thisArg, args) {
    var c = monitor.context;
    var thisBinding;
    if (thisArg.value === null || thisArg.value === undefined) {
        thisBinding = new Value_1.Value(monitor.GlobalObject, thisArg.label);
    }
    else if (typeof thisArg.value !== 'object' && typeof thisArg.value !== 'function') {
        thisBinding = ToObject_1.ToObject(thisArg);
    }
    else {
        //@ts-ignore TypeScript doesn't narrow generic types
        thisBinding = thisArg;
    }
    var localEnv = new Value_1.Value(DeclarativeEnvironmentRecord_1.NewDeclarativeEnvironment(F.Scope), c.effectivePC);
    var newContext = c.clone(thisBinding, localEnv, localEnv);
    newContext.labels.ret = Label_1.lub(newContext.labels.ret, newContext.labels.pc);
    newContext.owner = F.Name;
    Binding_1.DeclarationBindingInstantiation(newContext, F, args);
    return newContext;
}
// ------------------------------------------------------------
// Function objects, 13.2
var FunctionObject = /** @class */ (function (_super) {
    __extends(FunctionObject, _super);
    function FunctionObject(parms, code, scope) {
        var _this = _super.call(this) || this;
        _this.Class = 'Function';
        _this.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
        _this.Scope = scope;
        _this.FormalParameters = parms ? parms : [];
        _this.Code = code;
        _this.Extensible = true;
        Define_1.DefineFFT(_this, constants.length, _this.FormalParameters.length);
        // NOTE: will be updated when called and since we piggyback properties on native properties
        // defining as FFF will cause future updates to fail. Thus we define it as TFT even though
        // this violates the standard.
        Define_1.DefineFFF(_this, constants.arguments, null);
        Define_1.DefineFFF(_this, constants.caller, null);
        var proto = new ObjectObject_1.ObjectObject();
        Define_1.DefineTFT(proto, constants.constructor, _this);
        Define_1.DefineTFF(_this, constants.prototype, proto);
        return _this;
    }
    // ---
    FunctionObject.prototype.AsyncCall = function (thisArg, args) {
        // step 1, as in 10.4.3 embodied in enterFunctionCode
        var funcCtx = enterFunctionCode(this, thisArg, args);
        // for stack trace
        funcCtx.owner = this.Name;
        monitor.contextStack.push(funcCtx);
        var ip = funcCtx.workList.top();
        if (this.Code) {
            ip.then(this.Code);
            ip.then(AsyncCallEnd);
        }
        else {
            ip.then(AsyncCallEnd);
        }
    };
    // ---
    // 13.2.1 
    FunctionObject.prototype.Call = function (thisArg, args) {
        // step 1, as in 10.4.3 embodied in enterFunctionCode
        var funcCtx = enterFunctionCode(this, thisArg, args);
        // for stack trace
        funcCtx.owner = this.Name;
        var res;
        monitor.contextStack.push(funcCtx);
        if (this.Code) {
            res = Execute_1.execute(this.Code, false);
        }
        if (funcCtx.result.value) {
            funcCtx.result.value.raise(funcCtx.labels.ret);
        }
        monitor.contextStack.pop();
        // copy out the inner exception level
        monitor.context.labels.exc = Label_1.lub(monitor.context.labels.exc, funcCtx.labels.exc);
        if (res !== undefined) {
            switch (res.type) {
                case 'throw':
                    throw res.value;
                case 'return':
                    // TODO: should be fixed by making Result a tagged union
                    if (res.value === null) {
                        monitor.fatal('Call: malformed result');
                        throw 'TypeScript';
                    }
                    return res.value;
            }
        }
        return new Value_1.Value(undefined, funcCtx.labels.ret);
    };
    // ---
    FunctionObject.prototype.AsyncConstruct = function (args) {
        var obj = new EcmaObject_1.EcmaObject();
        obj.Class = 'Object';
        obj.Extensible = true;
        var proto = this.Get(constants.prototype);
        if (!Interfaces_1.IsIEcmaObject(proto)) {
            proto = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        }
        // @ts-ignore, we know proto is Value<EcmaObject>
        obj.Prototype = proto;
        var ip = monitor.context.workList.top();
        this.AsyncCall(new Value_1.Value(obj, Label_1.bot), args);
        // TODO: it seems that the closure data is not used
        ip.then(AsyncConstructEnd, { object: obj });
        return ip;
    };
    // ---
    // ---
    // 13.2.2
    FunctionObject.prototype.Construct = function (args) {
        var obj = new EcmaObject_1.EcmaObject();
        obj.Class = 'Object';
        obj.Extensible = true;
        var proto = this.Get(constants.prototype);
        if (!Interfaces_1.IsIEcmaObject(proto)) {
            proto = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        }
        // @ts-ignore, we know proto is Value<EcmaObject>
        obj.Prototype = proto;
        var result = this.Call(new Value_1.Value(obj, Label_1.bot), args);
        if (!Interfaces_1.IsIEcmaObject(result)) {
            result = new Value_1.Value(obj, Label_1.bot);
        }
        // @ts-ignore, we know result is Value<EcmaObject>
        return result;
    };
    FunctionObject.prototype.HasInstance = function (V) {
        return HasInstance_1.HasInstance.call(this, V);
    };
    FunctionObject.prototype.toString = function () {
        return PP_1.pretty(this.Source);
    };
    return FunctionObject;
}(EcmaObject_1.EcmaObject));
exports.FunctionObject = FunctionObject;
// ---
function AsyncCallEnd() {
    var callContext = monitor.context;
    monitor.contextStack.pop();
    var callerContext = monitor.context;
    var result = callContext.result;
    var retlabel = callContext.labels.ret;
    if (result.type !== 'normal' && result.value) {
        result.value.raise(retlabel);
    }
    else {
        result.value = new Value_1.Value(undefined, retlabel);
    }
    // copy out the inner exception level
    callerContext.labels.exc = Label_1.lub(callerContext.labels.exc, callContext.labels.exc);
    callerContext.valueStack.push(result);
}
exports.AsyncCallEnd = AsyncCallEnd;
AsyncCallEnd.runfor = { 'return': true, 'throw': true };
function AsyncConstructEnd() {
    // @ts-ignore
    var retval = monitor.context.valueStack.peek();
    // TODO: what about throw?
    // TODO: this is not a correct way of checking if returned object is an ecmaobject
    if (typeof retval.value.value !== 'object') {
        retval.value = new Value_1.Value(this.object, Label_1.bot);
    }
}
exports.AsyncConstructEnd = AsyncConstructEnd;
AsyncConstructEnd.runfor = { 'return': true, 'throw': true };

},{"../Constants":64,"../Conversion/ToObject":85,"../DeclarativeEnvironmentRecord":90,"../Define":91,"../Engine/Binding":93,"../Engine/Execute":95,"../HasInstance":120,"../Interfaces":122,"../Label":123,"../Objects/EcmaObject":137,"../Objects/ObjectObject":146,"../PP":155,"../Value":184}],141:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var esprima = require("esprima");
var BuiltinFunctionObject_1 = require("./BuiltinFunctionObject");
var ToNumber_1 = require("../Conversion/ToNumber");
var ToString_1 = require("../Conversion/ToString");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var Interfaces_1 = require("../Interfaces");
var ToInt32_1 = require("../Conversion/ToInt32");
var Execute_1 = require("../Engine/Execute");
// ------------------------------------------------------------
var GlobalObject = /** @class */ (function (_super) {
    __extends(GlobalObject, _super);
    function GlobalObject(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'global';
        if (_this.Prototype === undefined || _this.Prototype.value === null) {
            _this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        }
        _this.host = host;
        // 15.1.1
        Define_1.DefineFFF(_this, constants.NaN, NaN);
        Define_1.DefineFFF(_this, constants['Infinity'], Infinity);
        Define_1.DefineFFF(_this, constants['undefined'], undefined);
        // 15.1.2
        Define_1.DefineTFT(_this, constants['eval'], new BuiltinFunctionObject_1.BuiltinFunctionObject(__eval, 1, host.eval));
        Define_1.DefineTFT(_this, constants.parseInt, new BuiltinFunctionObject_1.BuiltinFunctionObject(__parseInt, 2, host.parseInt));
        Define_1.DefineTFT(_this, constants.parseFloat, new BuiltinFunctionObject_1.BuiltinFunctionObject(__parseFloat, 1, host.parseFloat));
        Define_1.DefineTFT(_this, constants.isNaN, new BuiltinFunctionObject_1.BuiltinFunctionObject(__isNaN, 1, host.isNaN));
        Define_1.DefineTFT(_this, constants.isFinite, new BuiltinFunctionObject_1.BuiltinFunctionObject(__isFinite, 1, host.isFinite));
        // 15.1.3
        Define_1.DefineTFT(_this, constants.decodeURI, new BuiltinFunctionObject_1.BuiltinFunctionObject(__decodeURI, 1, host.decodeURI));
        Define_1.DefineTFT(_this, constants.decodeURIComponent, new BuiltinFunctionObject_1.BuiltinFunctionObject(__decodeURIComponent, 1, host.decodeURIComponent));
        Define_1.DefineTFT(_this, constants.encodeURI, new BuiltinFunctionObject_1.BuiltinFunctionObject(__encodeURI, 1, host.encodeURI));
        Define_1.DefineTFT(_this, constants.encodeURIComponent, new BuiltinFunctionObject_1.BuiltinFunctionObject(__encodeURIComponent, 1, host.encodeURIComponent));
        // 15.1.4
        Define_1.DefineTFT(_this, constants.Object, monitor.instances.ObjectConstructor);
        Define_1.DefineTFT(_this, constants.Function, monitor.instances.FunctionConstructor);
        Define_1.DefineTFT(_this, constants.Array, monitor.instances.ArrayConstructor);
        Define_1.DefineTFT(_this, constants.String, monitor.instances.StringConstructor);
        Define_1.DefineTFT(_this, constants.Boolean, monitor.instances.BooleanConstructor);
        Define_1.DefineTFT(_this, constants.Number, monitor.instances.NumberConstructor);
        Define_1.DefineTFT(_this, constants.Date, monitor.instances.DateConstructor);
        Define_1.DefineTFT(_this, constants.RegExp, monitor.instances.RegExpConstructor);
        Define_1.DefineTFT(_this, constants.Error, monitor.instances.ErrorConstructor);
        Define_1.DefineTFT(_this, constants.EvalError, monitor.instances.EvalErrorConstructor);
        Define_1.DefineTFT(_this, constants.RangeError, monitor.instances.RangeErrorConstructor);
        Define_1.DefineTFT(_this, constants.ReferenceError, monitor.instances.ReferenceErrorConstructor);
        Define_1.DefineTFT(_this, constants.SyntaxError, monitor.instances.SyntaxErrorConstructor);
        Define_1.DefineTFT(_this, constants.TypeError, monitor.instances.TypeErrorConstructor);
        Define_1.DefineTFT(_this, constants.URIError, monitor.instances.URIErrorConstructor);
        Define_1.DefineTFT(_this, constants.Math, monitor.instances.MathObject);
        Define_1.DefineTFT(_this, constants.JSON, monitor.instances.JSONObject);
        Define_1.DefineTFT(_this, new Value_1.Value("globalThis", Label_1.bot), _this);
        // B.2
        Define_1.DefineTFT(_this, constants.escape, new BuiltinFunctionObject_1.BuiltinFunctionObject(__escape, 1, host.escape));
        Define_1.DefineTFT(_this, constants.unescape, new BuiltinFunctionObject_1.BuiltinFunctionObject(__unescape, 1, host.unescape));
        Define_1.DefineTFT(_this, new Value_1.Value('write', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__print, 0, 'write'));
        Define_1.DefineTFT(_this, new Value_1.Value('print', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__lprint, 0, 'print'));
        // legacy
        Define_1.DefineTFT(_this, new Value_1.Value('jsflog', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__lprint, 0, 'lprint'));
        Define_1.DefineFFF(_this, new Value_1.Value('upg', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__dupg, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('upgs', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__dupgs, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('upge', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__dupge, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('lbl', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__upg, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('lbls', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__upgs, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('lble', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__upge, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('lblparts', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__upgparts, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('upgl', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__upgl, 1, undefined));
        Define_1.DefineFFF(_this, new Value_1.Value('declassify', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(__declassify, 1, undefined));
        return _this;
        /*
        DefineFFF(this , new Value('upgs'   , bot) , new BuiltinFunctionObject(__upgs   , 1, undefined));
        DefineFFF(this , new Value('dupgs'  , bot) , new BuiltinFunctionObject(__dupgs  , 1, undefined));
        DefineFFF(this , new Value('getPC'  , bot) , new BuiltinFunctionObject(__getPC  , 0, undefined));
        DefineFFF(this , new Value('setPC'  , bot) , new BuiltinFunctionObject(__setPC  , 1, undefined));
        DefineFFF(this , new Value('getEXC' , bot) , new BuiltinFunctionObject(__getEXC , 0, undefined));
        DefineFFF(this , new Value('setEXC' , bot) , new BuiltinFunctionObject(__setEXC , 1, undefined));
        DefineFFF(this , new Value('getRET' , bot) , new BuiltinFunctionObject(__getRET , 0, undefined));
        DefineFFF(this , new Value('setRET' , bot) , new BuiltinFunctionObject(__setRET , 1, undefined));
        */
    }
    GlobalObject.prototype.toString = function () { return '[global object]'; };
    return GlobalObject;
}(EcmaObject_1.EcmaObject));
exports.GlobalObject = GlobalObject;
// ------------------------------------------------------------
// B.2.1
function __escape(thisArg, args) {
    var arg = args[0] !== undefined ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var str = ToString_1.ToString(arg);
    return new Value_1.Value(escape(str.value), str.label);
}
// ------------------------------------------------------------
// unescape, B.2.2
function __unescape(thisArg, args) {
    var arg = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var str = ToString_1.ToString(arg);
    return new Value_1.Value(unescape(str.value), str.label);
}
// ------------------------------------------------------------
// 15.1.2.1
function __eval(thisArg, args) {
    var arg0 = args[0];
    if (arg0 === undefined)
        return new Value_1.Value(undefined, Label_1.bot);
    if (typeof arg0.value !== 'string')
        return arg0;
    var prog;
    // raise the pc w.r.t. the program string; parsing may result in an exception
    monitor.context.pushPC(arg0.label);
    try {
        var transformed = monitor.transform(arg0.value);
        prog = esprima.parse(transformed, { loc: true });
    }
    catch (e) {
        var msg = e.description + ' in eval:' + e.lineNumber + ':' + e.column;
        monitor.Throw("SyntaxError", msg, arg0.label);
        throw 'TypeScript';
    }
    var evalCtx = Execute_1.enterEvalCode(prog, __eval);
    monitor.contextStack.push(evalCtx);
    // this is not a value, it is a result!!
    var result = Execute_1.execute(prog, false);
    // if value is 'empty' (represented by null)
    if (!result.value) {
        result.value = new Value_1.Value(undefined, Label_1.bot);
    }
    result.value.raise(arg0.label);
    // NOTE: parser should guarantee the result type is never return
    monitor.contextStack.pop();
    if (result.type === 'throw') {
        throw result.value;
    }
    monitor.context.popPC();
    return result.value;
}
// ------------------------------------------------------------
// 15.1.2.2
function __parseInt(thisArg, args) {
    var stringArg = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var string = ToString_1.ToString(stringArg);
    var radix = ToInt32_1.ToInt32(arg1);
    var value = parseInt(string.value, radix.value);
    return new Value_1.Value(value, Label_1.lub(string.label, radix.label));
}
// ------------------------------------------------------------
// 15.1.2.3
function __parseFloat(thisArg, args) {
    var stringArg = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var string = ToString_1.ToString(stringArg);
    var value = parseFloat(string.value);
    return new Value_1.Value(value, string.label);
}
// ------------------------------------------------------------
// 15.1.2.4
function __isNaN(thisArg, args) {
    var numberArg = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var number = ToNumber_1.ToNumber(numberArg);
    var value = isNaN(number.value);
    return new Value_1.Value(value, number.label);
}
// ------------------------------------------------------------
// 15.1.2.5
function __isFinite(thisArg, args) {
    var numberArg = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var number = ToNumber_1.ToNumber(numberArg);
    var value = isFinite(number.value);
    return new Value_1.Value(value, number.label);
}
// ------------------------------------------------------------
// 15.1.3.1
function __decodeURI(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var enc = ToString_1.ToString(arg0);
    var res = new Value_1.Value(decodeURI(enc.value), enc.label);
    return res;
}
// ------------------------------------------------------------
// 15.1.3.2
function __decodeURIComponent(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var enc = ToString_1.ToString(arg0);
    var res = new Value_1.Value(decodeURIComponent(enc.value), enc.label);
    return res;
}
// ------------------------------------------------------------
// 15.1.2.3
var __encodeURI = function __encodeURI(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var enc = ToString_1.ToString(arg0);
    var res = new Value_1.Value(encodeURI(enc.value), enc.label);
    return res;
};
// ------------------------------------------------------------
// 15.1.3.4
function __encodeURIComponent(thisArg, args) {
    var arg0 = args[0] !== undefined ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var componentString = ToString_1.ToString(arg0);
    return new Value_1.Value(encodeURIComponent(componentString.value), componentString.label);
}
// ------------------------------------------------------------
function __print(thisArg, args) {
    var str = '';
    for (var i = 0; i < args.length; i++)
        str += args[i].value;
    monitor.print(str);
    return new Value_1.Value(undefined, Label_1.bot);
}
function __lprint(thisArg, args) {
    if (monitor.options.get('monitor.testMode')) {
        __print(thisArg, args);
        return new Value_1.Value(undefined, Label_1.bot);
    }
    var str = '';
    for (var i = 0; i < args.length; i++)
        str += ToString_1.ToString(args[i]);
    if (monitor.options.get('monitor.taintMode')) {
        monitor.print(str);
    }
    else {
        monitor.print('(' + monitor.context.effectivePC + '):' + str);
    }
    return new Value_1.Value(undefined, Label_1.bot);
}
// ------------------------------------------------------------
function __upgl(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value('default', Label_1.bot);
    var labelName = ToString_1.ToString(arg0);
    monitor.assert(Label_1.le(labelName.label, Label_1.bot), 'upgl expected label of label string to be bot');
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        var arg = ToString_1.ToString(args[i]);
        monitor.assert(Label_1.le(arg.label, Label_1.bot), 'upgl expected label of label string to be bot');
        lbl = Label_1.lub(lbl, Label_1.Label.fromString(arg.value));
    }
    lbl = lbl.equals(Label_1.bot) ? Label_1.top : lbl;
    var lblmap = monitor.context.labels.labelmap;
    var name = labelName.value;
    if (!lblmap[name]) {
        lblmap[name] = {
            label: lbl,
            pcmarker: undefined
        };
    }
    lblmap[name].label = Label_1.lub(lblmap[name].label, lbl);
    var marker = lblmap[name].pcmarker;
    if (marker !== undefined) {
        monitor.context.pcStack.map(function (l) {
            return Label_1.lub(l, lbl);
        }, marker);
    }
    return new Value_1.Value(undefined, Label_1.bot);
}
// ------------------------------------------------------------
function __upg(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        var arg = ToString_1.ToString(args[i]);
        monitor.assert(Label_1.le(arg.label, Label_1.bot), 'upg expected label of label string to be bot');
        lbl = Label_1.lub(lbl, Label_1.Label.fromString(arg.value));
    }
    lbl = lbl.equals(Label_1.bot) ? Label_1.top : lbl;
    return new Value_1.Value(arg0.value, Label_1.lub(arg0.label, lbl));
}
// ---
function __upgparts(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        var arg = ToString_1.ToString(args[i]);
        monitor.assert(Label_1.le(arg.label, Label_1.bot), 'upg expected label of label string to be bot');
        lbl = Label_1.lub(lbl, Label_1.Label.fromString(arg.value));
    }
    lbl = lbl.equals(Label_1.bot) ? Label_1.top : lbl;
    if (Interfaces_1.IsIEcmaObject(arg0)) {
        for (var prop in arg0.value.labels) {
            var labelData = arg0.value.labels[prop];
            labelData.value = Label_1.lub(labelData.value, lbl);
            labelData.existence = Label_1.lub(labelData.existence, lbl);
        }
        arg0.value.struct = Label_1.lub(arg0.value.struct, lbl);
        return arg0;
    }
    return new Value_1.Value(arg0.value, Label_1.lub(arg0.label, lbl));
}
// ------------------------------------------------------------
function __dupg(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        lbl = Label_1.lub(lbl, args[i].label);
    }
    return new Value_1.Value(arg0.value, Label_1.lub(arg0.label, lbl));
}
// ------------------------------------------------------------
function __upgs(thisArg, args) {
    var obj = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        var arg = ToString_1.ToString(args[i]);
        monitor.assert(Label_1.le(arg.label, Label_1.bot), 'upgs expected label of label string to be bot');
        lbl = Label_1.lub(lbl, Label_1.Label.fromString(arg.value));
    }
    lbl = lbl.equals(Label_1.bot) ? Label_1.top : lbl;
    if (Interfaces_1.IsIEcmaObject(obj)) {
        obj.value.struct = Label_1.lub(obj.value.struct, lbl);
    }
    return obj;
}
// ------------------------------------------------------------
function __dupgs(thisArg, args) {
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        lbl = Label_1.lub(lbl, args[i].label);
    }
    if (Interfaces_1.IsIEcmaObject(arg0)) {
        arg0.value.struct = Label_1.lub(arg0.value.struct, lbl);
    }
    return arg0;
}
// ------------------------------------------------------------
function __upge(thisArg, args) {
    var obj = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] ? args[1] : new Value_1.Value(undefined, Label_1.bot);
    if (obj.value === undefined || obj.value === null) {
        return new Value_1.Value(undefined, Label_1.bot);
    }
    var ix = ToString_1.ToString(arg1);
    var lbl = Label_1.bot;
    for (var i = 2; i < args.length; i++) {
        var arg = ToString_1.ToString(args[i]);
        monitor.assert(Label_1.le(arg.label, Label_1.bot), 'upge expected label of label string to be bot');
        lbl = Label_1.lub(lbl, Label_1.Label.fromString(arg.value));
    }
    lbl = lbl.equals(Label_1.bot) ? Label_1.top : lbl;
    if (Interfaces_1.IsIEcmaObject(obj)) {
        var prop = obj.value.labels[ix.value];
        if (prop) {
            prop.existence = Label_1.lub(prop.existence, lbl);
        }
    }
    return new Value_1.Value(undefined, Label_1.bot);
}
// ------------------------------------------------------------
function __dupge(thisArg, args) {
    var obj = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] ? args[1] : new Value_1.Value(undefined, Label_1.bot);
    if (obj.value === undefined || obj.value === null) {
        return new Value_1.Value(undefined, Label_1.bot);
    }
    var ix = ToString_1.ToString(arg1);
    var lbl = Label_1.bot;
    for (var i = 1; i < args.length; i++) {
        lbl = Label_1.lub(lbl, args[i].label);
    }
    if (Interfaces_1.IsIEcmaObject(obj)) {
        var prop = obj.value.labels[ix.value];
        if (prop) {
            prop.existence = Label_1.lub(prop.existence, lbl);
        }
    }
    return new Value_1.Value(undefined, Label_1.bot);
}
function __declassify(thisArg, args) {
    var val = new Value_1.Value(args[0] ? args[0].value : undefined, Label_1.bot);
    return val;
}

},{"../Constants":64,"../Conversion/ToInt32":82,"../Conversion/ToNumber":84,"../Conversion/ToString":87,"../Define":91,"../Engine/Execute":95,"../Interfaces":122,"../Label":123,"../Objects/EcmaObject":137,"../Value":184,"./BuiltinFunctionObject":134,"esprima":18}],142:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("./BuiltinFunctionObject");
var ObjectObject_1 = require("../Objects/ObjectObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToNumber_1 = require("../Conversion/ToNumber");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var IsCallable_1 = require("../Utility/IsCallable");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
// ------------------------------------------------------------
// The JSON object, 15.12
var JSONObject = /** @class */ (function (_super) {
    __extends(JSONObject, _super);
    function JSONObject(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'JSON';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    JSONObject.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.ObjectPrototype);
        Define_1.DefineTFT(this, constants.parse, new BuiltinFunctionObject_1.BuiltinFunctionObject(parse, 2, this.host.parse));
        Define_1.DefineTFT(this, constants.stringify, new BuiltinFunctionObject_1.BuiltinFunctionObject(stringify, 3, this.host.stringify));
    };
    // By the standard, there should be no Call or Construct for JSON object,
    // so throw a TypeError (as SpiderMonkey seem to do)
    JSONObject.prototype.Call = function (thisArg, args) {
        monitor.Throw("TypeError", 'JSON is not a function', Label_1.bot);
        throw 'TypeScript';
    };
    JSONObject.prototype.Construct = function (args) {
        monitor.Throw("TypeError", 'JSON is not a constructor', Label_1.bot);
        throw 'TypeScript';
    };
    return JSONObject;
}(EcmaObject_1.EcmaObject));
exports.JSONObject = JSONObject;
// ------------------------------------------------------------
// parse, 15.12.2
function parse(thisArg, args) {
    if (args[0] === undefined) {
        monitor.Throw("SyntaxError", 'JSON.parse: No string to parse', Label_1.bot);
    }
    var JText = ToString_1.ToString(args[0]) || new Value_1.Value(undefined, Label_1.bot);
    var reviver = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var unfiltered = parseAndEvaluate(JText);
    // Do we have any junk characters left? If so, a bad string!
    //@ts-ignore JSON
    if (unfiltered.finalIndex <= JText.value.length) {
        monitor.Throw("SyntaxError", 'JSON.parse: String contains bad symbols in the end', Label_1.bot);
    }
    var isReviverCallable = IsCallable_1.IsCallable(reviver);
    monitor.context.pushPC(reviver.label);
    if (isReviverCallable) {
        var root = new ObjectObject_1.ObjectObject();
        root.DefineOwnProperty(new Value_1.Value("", Label_1.bot), {
            value: unfiltered.value,
            writable: true,
            enumerable: true,
            configurable: true,
            label: unfiltered.label
        }, false);
        monitor.context.popPC();
        return Walk(new Value_1.Value(root, Label_1.bot), new Value_1.Value("", Label_1.lub(unfiltered.label, Label_1.lub(JText.label, reviver.label))), reviver);
    }
    else {
        monitor.context.popPC();
        return unfiltered;
    }
}
// Walk, part of 15.12.2
function Walk(holder, name, reviver) {
    var val = holder.Get(name);
    monitor.context.pushPC(val.label);
    if (val.value && typeof val.value === 'object') {
        val = val.value;
        monitor.context.pushPC(val.label);
        if (val.value.Class === 'Array') {
            var I = new Value_1.Value(0, Label_1.bot);
            var len = val.value.Get(constants.length);
            while (I.value < len.value) {
                var newElement = Walk(val, ToString_1.ToString(I), reviver);
                if (newElement === undefined) {
                    val.Delete(ToString_1.ToString(I), false);
                }
                else {
                    val.DefineOwnProperty(ToString_1.ToString(I), {
                        value: newElement.value,
                        writable: true,
                        enumerable: true,
                        configurable: true,
                        label: val.label
                    }, false);
                }
                I.value++;
            }
        }
        else {
            var keys = [];
            var allKeys = Object.keys(val.value.properties);
            for (var i = 0; i < allKeys.length; i++) {
                var keyVal = val.GetProperty(new Value_1.Value(allKeys[i], Label_1.bot));
                if (keyVal.value && keyVal.value.enumerable) {
                    keys.push(new Value_1.Value(allKeys[i], Label_1.bot)); //keyVal.label?
                }
            }
            for (var i = 0; i < keys.length; i++) {
                var P = ToString_1.ToString(keys[i]);
                var newElement = Walk(val, P, reviver);
                if (newElement === undefined) {
                    val.Delete(P, false);
                }
                else {
                    val.DefineOwnProperty(P, {
                        value: newElement.value,
                        writable: true,
                        enumerable: true,
                        configurable: true,
                        label: val.label
                    }, false);
                }
            }
        }
        monitor.context.popPC();
    }
    monitor.context.popPC();
    return reviver.Call(holder, [name, val]);
}
// Inspiration from Douglas Crockford, https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
// This is used for the 2nd and 3rd step in parse, 15.12.2
function parseAndEvaluate(text) {
    var currentChar = ' ';
    var currentIndex = 0;
    // From 15.12.1.1, JSONEscapeCharacter :: one of " / \ b f n r t
    var escapeCharacters = {
        '"': '"',
        '/': '/',
        '\\': '\\',
        b: '\b',
        f: '\f',
        n: '\n',
        r: '\r',
        t: '\t'
    };
    // These are not allowed to have in a string!
    var invalidStringCharacters = {};
    for (var i = 0x00; i <= 0x1F; i++) {
        var s = String.fromCharCode(i);
        invalidStringCharacters[s] = s;
    }
    var mkError = function (message) {
        monitor.Throw("SyntaxError", 'JSON.parse: ' + message, Label_1.bot);
    };
    var nextChar = function (char) {
        if (char && char !== currentChar) {
            mkError('expected ' + char + ' to match ' + currentChar);
        }
        currentChar = text.charAt(currentIndex);
        currentIndex++;
        return currentChar;
    };
    //JSONWhiteSpace :: <TAB> <CR> <LF> <SP>
    var eatWhiteSpace = function () {
        while (currentChar && currentChar <= ' ') {
            //@ts-ignore JSON
            nextChar();
        }
    };
    /* JSONValue :
         JSONNullLiteral
         JSONBooleanLiteral
         JSONObject
         JSONArray
         JSONString
         JSONNumber
    */
    var jsonValue = function () {
        eatWhiteSpace();
        switch (currentChar) {
            case '{':
                // It must be an object
                return jsonObject();
            case '[':
                // It must be an array
                return jsonArray();
            case '"':
                // It must be a string
                return jsonString();
            case '-':
                // It must be a number
                return jsonNumber();
            case 'n':
                // It must be a null literal
                return jsonNull();
            case 't':
            case 'f':
                // It must be a boolean literal
                return jsonBool();
            default:
                if (currentChar >= '0' && currentChar <= '9') {
                    // It must be a number
                    return jsonNumber();
                }
                // Otherwise, something has gone wrong!
                mkError('Cannot parse the structure!');
        }
    };
    var jsonObject = function () {
        var result = new ObjectObject_1.ObjectObject();
        if (currentChar === '{') {
            nextChar('{');
            eatWhiteSpace();
            //@ts-ignore TYPESCRIPT
            if (currentChar === '}') {
                // Enter here and we have an "empty" object
                nextChar('}');
                return result;
            }
            while (currentChar) {
                var key = jsonString();
                eatWhiteSpace();
                nextChar(':');
                if (result.hasOwnProperty(key)) {
                    mkError('Bad object, duplicate key ' + key);
                }
                result.DefineOwnProperty(new Value_1.Value(key, Label_1.bot), {
                    value: jsonValue(),
                    writable: true,
                    enumerable: true,
                    configurable: true,
                    label: Label_1.bot
                }, false);
                eatWhiteSpace();
                //@ts-ignore TYPESCRIPT
                if (currentChar === '}') {
                    nextChar('}');
                    return result;
                }
                nextChar(',');
                eatWhiteSpace();
            }
        }
        mkError('Malformed object');
    };
    var jsonArray = function () {
        var result = [];
        if (currentChar === '[') {
            nextChar('[');
            eatWhiteSpace();
            //@ts-ignore TYPESCRIPT
            if (currentChar === ']') {
                // Enter here and we have an empty array..
                nextChar(']');
                //@ts-ignore JSON
                return ArrayObject_1.ArrayObject.fromValueArray(result);
            }
            while (currentChar) {
                result.push(jsonValue());
                eatWhiteSpace();
                //@ts-ignore TYPESCRIPT
                if (currentChar === ']') {
                    // Enter here and we are done..
                    nextChar(']');
                    for (var i = 0; i < result.length; i++) {
                        result[i] = new Value_1.Value(result[i], Label_1.bot);
                    }
                    //@ts-ignore JSON
                    return ArrayObject_1.ArrayObject.fromValueArray(result);
                }
                nextChar(','); // If we are not done, we expect a ','
                eatWhiteSpace();
            }
        }
        mkError('Could not parse the array');
    };
    /*
      JSONString :: " JSONStringCharacters_opt "
      JSONStringCharacters :: JSONStringCharacter JSONStringCharacters_opt
      JSONStringCharacter :: SourceCharacter but not one of " or \ or U+0000 through U+001F \ JSONEscapeSequence
      JSONEscapeSequence :: JSONEscapeCharacter UnicodeEscapeSequence
     */
    var jsonString = function () {
        var result = "";
        if (currentChar === '"') {
            //@ts-ignore JSON
            while (nextChar()) {
                if (currentChar === '"') {
                    //@ts-ignore JSON
                    nextChar();
                    return result;
                }
                // Check if the current character is an invalid string
                if (invalidStringCharacters[currentChar]) {
                    mkError("Invalid character in string");
                }
                if (currentChar === '\\') {
                    //@ts-ignore JSON
                    nextChar();
                    if (currentChar === 'u') {
                        var hexValue = 0;
                        for (var i = 0; i < 4; i++) {
                            //@ts-ignore JSON
                            var hex = parseInt(nextChar(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            hexValue = hexValue * 16 + hex;
                        }
                        result += String.fromCharCode(hexValue);
                    }
                    else if (typeof escapeCharacters[currentChar] === 'string') {
                        result += escapeCharacters[currentChar];
                    }
                    else {
                        break;
                    }
                }
                else {
                    result += currentChar;
                }
            }
        }
        mkError('Bad input string');
    };
    // JSONNumber :: -_opt DecimalIntegerLiteral JSONFraction_opt ExponentPart_opt
    var jsonNumber = function () {
        var result = "", checkOctal = false, checkFloat = false;
        if (currentChar === '-') {
            result += currentChar;
            nextChar('-');
        }
        if (currentChar === '0') {
            checkOctal = true;
        }
        // Get all the numbers
        while (currentChar >= '0' && currentChar <= '9') {
            result += currentChar;
            //@ts-ignore JSON
            nextChar();
        }
        if (checkOctal && result.length > 1) {
            mkError("JSON.parse: Numbers cannot start with a 0");
        }
        // Check if it is a float
        if (currentChar === '.') {
            result += currentChar;
            checkFloat = true;
            // Get all the remaining numbers in the float
            //@ts-ignore JSON
            while (nextChar() && currentChar >= '0' && currentChar <= '9') {
                result += currentChar;
                checkFloat = false;
            }
        }
        if (checkFloat) {
            mkError("JSON.parse: Number with nothing after the decimal");
        }
        if (currentChar === 'e' || currentChar === 'E') {
            result += currentChar;
            //@ts-ignore JSON
            nextChar();
            //@ts-ignore TYPESCRIPT
            if (currentChar === '-' || currentChar === '+') {
                result += currentChar;
                //@ts-ignore JSON
                nextChar();
            }
            while (currentChar >= '0' && currentChar <= '9') {
                result += currentChar;
                //@ts-ignore JSON
                nextChar();
            }
        }
        var num = +result; // Nasty conversion. :)
        if (!isFinite(num)) {
            mkError('Bad number, not finite');
        }
        return num;
    };
    // JSONNullLiteral :: NullLiteral
    var jsonNull = function () {
        nextChar('n');
        nextChar('u');
        nextChar('l');
        nextChar('l');
        return null;
    };
    // JSONBooleanLiteral :: BooleanLiteral
    var jsonBool = function () {
        switch (currentChar) {
            case 't':
                nextChar('t');
                nextChar('r');
                nextChar('u');
                nextChar('e');
                return true;
            case 'f':
                nextChar('f');
                nextChar('a');
                nextChar('l');
                nextChar('s');
                nextChar('e');
                return false;
            default:
                mkError('Could not deduce a boolean');
        }
    };
    if (text.value) {
        var textLabel = text.label;
        text = text.value;
        var res = new Value_1.Value(jsonValue(), textLabel);
        eatWhiteSpace(); // Eat all trailing white spaces
        //@ts-ignore JSON
        res.finalIndex = currentIndex; // This is needed to know if we have some garbage at the end of the string
        return res;
    }
    else {
        mkError('Bad format on input');
    }
}
// ------------------------------------------------------------
// stringify, 15.12.3
function stringify(thisArg, args) {
    // These are used for cycle detection
    var JA_counter = 0;
    var JO_counter = 0;
    //-------------------------------------------
    var stack = [];
    var indent = "";
    var PropertyList, ReplacerFunction;
    var gap = "";
    var value = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var replacer = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var space = args[2] || new Value_1.Value(undefined, Label_1.bot);
    var retLabel = Label_1.lub(value.label, Label_1.lub(replacer.label, space.label));
    monitor.context.pushPC(replacer.label);
    if (typeof replacer.value === 'object' || typeof replacer.value === 'function') {
        if (IsCallable_1.IsCallable(replacer)) {
            ReplacerFunction = replacer;
        }
        else if (replacer.value && replacer.value.Class === 'Array') {
            PropertyList = [];
            var initialReplacerLength = replacer.value.properties.length;
            for (var i = 0; i < initialReplacerLength; i++) {
                var item = undefined;
                var v = replacer.Get(new Value_1.Value(i, Label_1.bot));
                if (v.value !== undefined) {
                    if (typeof v.value === 'string') {
                        item = v;
                    }
                    else if (typeof v.value === 'number') {
                        item = ToString_1.ToString(v);
                    }
                    else if (typeof v.value === 'object') {
                        if (v.value && (v.value.Class === 'String' || v.value.Class === 'Number')) {
                            item = ToString_1.ToString(v);
                        }
                    }
                    if (item !== undefined) {
                        var itemNotInArray = true;
                        for (var j = 0; j < PropertyList.length; j++) {
                            if (item.value === PropertyList[j].value) {
                                itemNotInArray = false;
                                break;
                            }
                        }
                        if (itemNotInArray) {
                            PropertyList.push(item);
                        }
                    }
                }
            }
        }
    }
    monitor.context.popPC();
    monitor.context.pushPC(space.label);
    if (typeof space.value === 'object') {
        if (space.value.Class === 'Number') {
            space = ToNumber_1.ToNumber(space);
        }
        else if (space.value.Class === 'String') {
            space = ToString_1.ToString(space);
        }
    }
    if (typeof space.value === 'number') {
        var intSpace = ToInteger_1.ToInteger(space);
        if (intSpace.value > 10) {
            space = new Value_1.Value(10, space.label);
        }
        else {
            space = intSpace;
        }
        for (var i = 0; i < space.value; i++) {
            gap = gap + " ";
        }
    }
    else if (typeof space.value === 'string') {
        if (space.value.length <= 10) {
            gap = space.value;
        }
        else {
            gap = space.value.substring(0, 10);
        }
    }
    // Leave the last else, gap will be empty string if none of the above has been hit
    monitor.context.popPC(); // Pop space.label from the PC stack
    var wrapper = new ObjectObject_1.ObjectObject();
    wrapper.DefineOwnProperty(new Value_1.Value("", Label_1.bot), {
        value: value.value,
        writable: true,
        enumerable: true,
        configurable: true,
        label: value.label
    }, false);
    var Str = function (key, holder) {
        var value = holder.Get(key);
        retLabel = Label_1.lub(retLabel, value.label);
        monitor.context.pushPC(value.label);
        if (value.value && typeof value.value === 'object') {
            var toJSON = value.Get(new Value_1.Value("toJSON", Label_1.bot));
            if (IsCallable_1.IsCallable(toJSON)) {
                value = toJSON.Call(value, [key]);
            }
        }
        monitor.context.popPC(); // As it is being pushed again later, is this needed?
        if (ReplacerFunction) {
            monitor.context.pushPC(ReplacerFunction.label);
            if (ReplacerFunction.value) {
                value = ReplacerFunction.Call(holder, [key, value]);
            }
            monitor.context.popPC();
        }
        monitor.context.pushPC(value.label);
        if (value.value && typeof value.value === 'object') {
            if (value.value.Class === 'Number') {
                value = ToNumber_1.ToNumber(value);
            }
            else if (value.value.Class === 'String') {
                value = ToString_1.ToString(value);
            }
            else if (value.value.Class === 'Boolean') {
                value = new Value_1.Value(value.value.PrimitiveValue.valueOf(), retLabel);
            }
        }
        if (value.value === null) {
            monitor.context.popPC();
            return new Value_1.Value("null", retLabel);
        }
        if (value.value === true) {
            monitor.context.popPC();
            return new Value_1.Value("true", retLabel);
        }
        if (value.value === false) {
            monitor.context.popPC();
            return new Value_1.Value("false", retLabel);
        }
        if (typeof value.value === 'string') {
            var res = Quote(value);
            monitor.context.popPC();
            return res;
        }
        if (typeof value.value === 'number') {
            if (isFinite(value.value)) {
                var res = ToString_1.ToString(value);
                monitor.context.popPC();
                return res;
            }
            monitor.context.popPC();
            return new Value_1.Value("null", retLabel);
        }
        if (typeof value.value === 'object' && !IsCallable_1.IsCallable(value)) {
            if (value.value.Class === 'Array') {
                //@ts-ignore JSON
                var res = JA(value);
                monitor.context.popPC();
                return res;
            }
            //@ts-ignore JSON
            var res = JO(value);
            monitor.context.popPC();
            return res;
        }
        monitor.context.popPC();
        return new Value_1.Value(undefined, retLabel);
    };
    var Quote = function (value) {
        var product = "\"";
        for (var i = 0; i < value.value.length; i++) {
            var C = value.value[i];
            var cCodePointValue = C.codePointAt(0);
            var spaceCodePointValue = (" ").codePointAt(0);
            if (C === "\"" || C === "\\") {
                product += "\\";
                product += C;
            }
            else if (C === "\b" || C === "\f" || C === "\n" || C === "\r" || C === "\t") {
                product += "\\";
                var abbrev;
                if (C === "\b")
                    abbrev = "b";
                else if (C === "\f")
                    abbrev = "f";
                else if (C === "\n")
                    abbrev = "n";
                else if (C === "\r")
                    abbrev = "r";
                else
                    abbrev = "t";
                product += abbrev;
            }
            else if (cCodePointValue < spaceCodePointValue) {
                product += "\\";
                product += "u";
                var hex = cCodePointValue.toString(16);
                for (var j = hex.length; j < 4; j++) {
                    hex = "0" + hex;
                }
                product += hex;
            }
            else {
                product += C;
            }
        }
        product += "\"";
        return new Value_1.Value(product, Label_1.lub(monitor.context.effectivePC, value.label));
    };
    var JO = function (value) {
        var JO_key = new Value_1.Value("JO_property", Label_1.bot);
        if (!value.Get(JO_key).value) {
            JO_counter++;
            value.DefineOwnProperty(JO_key, {
                value: JO_counter,
                writable: false,
                enumerable: false,
                configurable: false,
                label: Label_1.bot
            }, false);
        }
        else {
            checkCycle(JO_key, value);
        }
        stack.push(value);
        var stepback = indent;
        indent = indent + gap;
        if (PropertyList !== undefined) {
            var K = PropertyList;
        }
        else {
            //@ts-ignore JSON
            var K = [];
            var allKeys = Object.keys(value.value.properties);
            for (var i = 0; i < allKeys.length; i++) {
                var keyVal = value.GetProperty(new Value_1.Value(allKeys[i], Label_1.bot));
                if (keyVal.value && keyVal.value.enumerable) {
                    K.push(new Value_1.Value(allKeys[i], retLabel));
                }
            }
        }
        var partial = [];
        for (var i = 0; i < K.length; i++) {
            var P = K[i];
            var strP = Str(P, value);
            if (strP && strP.value !== undefined) {
                var member = Quote(P);
                member.value += ":";
                if (gap !== "") {
                    member.value += ' ';
                }
                member.value += strP.value;
                partial.push(member);
            }
        }
        var final;
        if (partial.length === 0) {
            final = "{}";
        }
        else {
            var properties = "";
            if (gap === "") {
                for (var i = 0; i < partial.length - 1; i++) {
                    properties += partial[i].value + ',';
                    retLabel = Label_1.lub(retLabel, partial[i].label);
                }
                properties += partial[partial.length - 1].value;
                retLabel = Label_1.lub(retLabel, partial[partial.length - 1].label);
                final = '{' + properties + '}';
            }
            else {
                var separator = ",\n" + indent;
                for (var i = 0; i < partial.length - 1; i++) {
                    properties += partial[i].value + separator;
                    retLabel = Label_1.lub(retLabel, partial[i].label);
                }
                properties += partial[partial.length - 1].value;
                retLabel = Label_1.lub(retLabel, partial[partial.length - 1].label);
                final = '{\n' + indent + properties + '\n' + stepback + '}';
            }
        }
        // Pop and remove JO_property
        var v = stack.pop();
        v.Delete(JO_key);
        indent = stepback;
        return new Value_1.Value(final, retLabel);
    };
    var JA = function (value) {
        var JA_key = new Value_1.Value("JA_property", Label_1.bot);
        if (!value.Get(JA_key).value) {
            JA_counter++;
            value.DefineOwnProperty(JA_key, {
                value: JA_counter,
                writable: false,
                enumerable: false,
                configurable: false,
                label: Label_1.bot
            }, false);
        }
        else {
            checkCycle(JA_key, value);
        }
        stack.push(value);
        var stepback = indent;
        indent = indent + gap;
        var partial = [];
        var len = value.Get(new Value_1.Value('length', Label_1.bot));
        var index = new Value_1.Value(0, Label_1.bot);
        while (index.value < len.value) {
            var strP = Str(ToString_1.ToString(index), value);
            if (!strP || strP.value === undefined) {
                partial.push(new Value_1.Value("null", retLabel));
            }
            else {
                partial.push(strP);
                retLabel = Label_1.lub(retLabel, strP.label);
            }
            index.value++;
        }
        var final;
        if (partial.length === 0) {
            final = "[]";
        }
        else {
            var properties = "";
            if (gap === "") {
                for (var i = 0; i < partial.length - 1; i++) {
                    properties += partial[i].value + ',';
                    retLabel = Label_1.lub(retLabel, partial[i].label);
                }
                properties += partial[partial.length - 1].value;
                retLabel = Label_1.lub(retLabel, partial[partial.length - 1].label);
                final = '[' + properties + ']';
            }
            else {
                var separator = ",\n" + indent;
                for (var i = 0; i < partial.length - 1; i++) {
                    properties += partial[i].value + separator;
                    retLabel = Label_1.lub(retLabel, partial[i].label);
                }
                properties += partial[partial.length - 1].value;
                retLabel = Label_1.lub(retLabel, partial[partial.length - 1].label);
                final = '[\n' + indent + properties + '\n' + stepback + ']';
            }
        }
        // Pop and remove property of JA_key
        var v = stack.pop();
        v.Delete(JA_key);
        indent = stepback;
        return new Value_1.Value(final, retLabel);
    };
    var checkCycle = function (key, value) {
        for (var i = 0; i < stack.length; i++) {
            if (value.Get(key).value === stack[i].Get(key).value) {
                monitor.Throw("TypeError", 'JSON.stringify: Cyclic structure', Label_1.bot);
            }
        }
    };
    return Str(new Value_1.Value("", Label_1.bot), new Value_1.Value(wrapper, Label_1.bot));
}

},{"../Constants":64,"../Conversion/ToInteger":83,"../Conversion/ToNumber":84,"../Conversion/ToString":87,"../Define":91,"../Label":123,"../Objects/ArrayObject":132,"../Objects/EcmaObject":137,"../Objects/ObjectObject":146,"../Utility/IsCallable":182,"../Value":184,"./BuiltinFunctionObject":134}],143:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("./BuiltinFunctionObject");
var ToNumber_1 = require("../Conversion/ToNumber");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
// ------------------------------------------------------------
// The Math Object, 15.8.2
var MathObject = /** @class */ (function (_super) {
    __extends(MathObject, _super);
    function MathObject(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Math';
        // not mandated by standard
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    MathObject.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.length, 1);
        Define_1.DefineFFF(this, constants.prototype, monitor.instances.ObjectPrototype);
        Define_1.DefineFFF(this, constants.E, this.host.E);
        Define_1.DefineFFF(this, constants.LN10, this.host.LN10);
        Define_1.DefineFFF(this, constants.LN2, this.host.LN2);
        Define_1.DefineFFF(this, constants.LOG2E, this.host.LOG2E);
        Define_1.DefineFFF(this, constants.LOG10E, this.host.LOG10E);
        Define_1.DefineFFF(this, constants.PI, this.host.PI);
        Define_1.DefineFFF(this, constants.SQRT1_2, this.host.SQRT1_2);
        Define_1.DefineFFF(this, constants.SQRT2, this.host.SQRT2);
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.abs, new BuiltinFunctionObject_1.BuiltinFunctionObject(abs, 1, this.host.abs));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.acos, new BuiltinFunctionObject_1.BuiltinFunctionObject(acos, 1, this.host.acos));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.asin, new BuiltinFunctionObject_1.BuiltinFunctionObject(asin, 1, this.host.asin));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.atan, new BuiltinFunctionObject_1.BuiltinFunctionObject(atan, 1, this.host.atan));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.atan2, new BuiltinFunctionObject_1.BuiltinFunctionObject(atan2, 2, this.host.atan2));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.ceil, new BuiltinFunctionObject_1.BuiltinFunctionObject(ceil, 1, this.host.ceil));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.cos, new BuiltinFunctionObject_1.BuiltinFunctionObject(cos, 1, this.host.cos));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.exp, new BuiltinFunctionObject_1.BuiltinFunctionObject(exp, 1, this.host.exp));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.floor, new BuiltinFunctionObject_1.BuiltinFunctionObject(floor, 1, this.host.floor));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.log, new BuiltinFunctionObject_1.BuiltinFunctionObject(log, 1, this.host.log));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.max, new BuiltinFunctionObject_1.BuiltinFunctionObject(max, 2, this.host.max));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.min, new BuiltinFunctionObject_1.BuiltinFunctionObject(min, 2, this.host.min));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.pow, new BuiltinFunctionObject_1.BuiltinFunctionObject(pow, 2, this.host.pow));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.random, new BuiltinFunctionObject_1.BuiltinFunctionObject(random, 0, this.host.random));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.round, new BuiltinFunctionObject_1.BuiltinFunctionObject(round, 1, this.host.round));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.sin, new BuiltinFunctionObject_1.BuiltinFunctionObject(sin, 1, this.host.sin));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.sqrt, new BuiltinFunctionObject_1.BuiltinFunctionObject(sqrt, 1, this.host.sqrt));
        //@ts-ignore TYPES
        Define_1.DefineTFT(this, constants.tan, new BuiltinFunctionObject_1.BuiltinFunctionObject(tan, 1, this.host.tan));
    };
    return MathObject;
}(EcmaObject_1.EcmaObject));
exports.MathObject = MathObject;
// ------------------------------------------------------------
// abs, 15.8.2.1
function abs(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// acos, 15.8.2.2
function acos(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// asin, 15.8.2.3
function asin(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// atan, 15.8.2.4
function atan(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// atan2, 15.8.2.5
function atan2(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    var y = args[1] ? ToNumber_1.ToNumber(args[1]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value, y.value), Label_1.lub(x.label, y.label));
}
// ------------------------------------------------------------
// ceil, 15.8.2.6
function ceil(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// cos, 15.8.2.7
function cos(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// exp, 15.8.2.8
function exp(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// floor, 15.8.2.9
function floor(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// log, 15.8.2.10
function log(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// max, 15.8.2.11
function max(thisArg, args) {
    if (args.length === 0)
        return new Value_1.Value(Number.NEGATIVE_INFINITY, Label_1.bot);
    var myArgs = [];
    var l = Label_1.bot;
    for (var i = 0; i < args.length; i++) {
        myArgs[i] = args[i].value;
        l = Label_1.lub(l, args[i].label);
    }
    return new Value_1.Value(this.host.apply(null, myArgs), l);
}
// ------------------------------------------------------------
// min, 15.8.2.12
function min(thisArg, args) {
    if (args.length === 0)
        return new Value_1.Value(Number.POSITIVE_INFINITY, Label_1.bot);
    var myArgs = [];
    var l = Label_1.bot;
    for (var i = 0; i < args.length; i++) {
        myArgs[i] = args[i].value;
        l = Label_1.lub(l, args[i].label);
    }
    return new Value_1.Value(this.host.apply(null, myArgs), l);
}
// ------------------------------------------------------------
// pow, 15.8.2.13
function pow(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    var y = args[1] ? ToNumber_1.ToNumber(args[1]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value, y.value), Label_1.lub(x.label, y.label));
}
// ------------------------------------------------------------
// random, 15.8.2.14
function random(thisArg, args) {
    return new Value_1.Value(this.host(), Label_1.bot);
}
// ------------------------------------------------------------
// round, 15.8.2.15
function round(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// sin, 15.8.2.16
function sin(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// sqrt, 15.8.2.17
function sqrt(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}
// ------------------------------------------------------------
// tan, 15.8.2.18
function tan(thisArg, args) {
    var x = args[0] ? ToNumber_1.ToNumber(args[0]) : new Value_1.Value(NaN, Label_1.bot);
    return new Value_1.Value(this.host(x.value), x.label);
}

},{"../Constants":64,"../Conversion/ToNumber":84,"../Define":91,"../Label":123,"../Objects/EcmaObject":137,"../Value":184,"./BuiltinFunctionObject":134}],144:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var ToString_1 = require("../Conversion/ToString");
var Label_1 = require("../Label");
// ------------------------------------------------------------
var NativeErrorObject = /** @class */ (function (_super) {
    __extends(NativeErrorObject, _super);
    function NativeErrorObject(proto, v) {
        var _this = _super.call(this) || this;
        _this.Prototype = new Value_1.Value(proto, Label_1.bot);
        _this.Class = 'Error';
        _this.Extensible = true;
        var message = new Value_1.Value("", Label_1.bot);
        if (v.value !== undefined) {
            message = ToString_1.ToString(v);
        }
        _this.DefineOwnProperty(constants.message, {
            value: message.value,
            label: message.label,
            writable: true,
            enumerable: false,
            configurable: true
        });
        // for toString
        _this.message = message.value;
        _this.stack = monitor.stackTrace();
        _this.nativeStack = Error().stack;
        return _this;
    }
    NativeErrorObject.prototype.toString = function () {
        var str = this.Type + ': ' + this.message + '\n' + this.stack.toString() + '\n' + this.nativeStack;
        return str;
    };
    return NativeErrorObject;
}(EcmaObject_1.EcmaObject));
exports.NativeErrorObject = NativeErrorObject;

},{"../Constants":64,"../Conversion/ToString":87,"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],145:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
// ------------------------------------------------------------
// Number Object, 15.7.5
var NumberObject = /** @class */ (function (_super) {
    __extends(NumberObject, _super);
    function NumberObject(val, lbl) {
        var _this = _super.call(this) || this;
        _this.Class = 'Number';
        _this.PrimitiveValue = new monitor.instances.NumberConstructor.host(val);
        _this.PrimitiveLabel = lbl;
        _this.Extensible = true;
        _this.Prototype = new Value_1.Value(monitor.instances.NumberPrototype, Label_1.bot);
        return _this;
    }
    return NumberObject;
}(EcmaObject_1.EcmaObject));
exports.NumberObject = NumberObject;
// ---
function IsNumberObject(x) {
    return typeof x.value === 'object' && x.value !== null && x.value.Class === 'Number';
}
exports.IsNumberObject = IsNumberObject;

},{"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],146:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
// ------------------------------------------------------------
// Object objects, 15.2.2.1
var ObjectObject = /** @class */ (function (_super) {
    __extends(ObjectObject, _super);
    function ObjectObject() {
        var _this = _super.call(this) || this;
        _this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        _this.Class = 'Object';
        _this.Extensible = true;
        return _this;
        // this.host      = {};
    }
    return ObjectObject;
}(EcmaObject_1.EcmaObject));
exports.ObjectObject = ObjectObject;
// ---
ObjectObject.prototype.toString = function () {
    var properties = [];
    for (var x in this.properties) {
        if (this.properties.hasOwnProperty(x)) {
            properties.push(x + ': ' + this.properties[x]);
        }
    }
    return '{' + properties.join(', ') + '}';
};
// ------------------------------------------------------------

},{"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],147:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NativeErrorObject_1 = require("./NativeErrorObject");
// ------------------------------------------------------------
var RangeErrorObject = /** @class */ (function (_super) {
    __extends(RangeErrorObject, _super);
    function RangeErrorObject(v) {
        var _this = _super.call(this, monitor.instances.RangeErrorPrototype, v) || this;
        _this.Type = 'RangeError';
        return _this;
    }
    return RangeErrorObject;
}(NativeErrorObject_1.NativeErrorObject));
exports.RangeErrorObject = RangeErrorObject;

},{"./NativeErrorObject":144}],148:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NativeErrorObject_1 = require("./NativeErrorObject");
// ------------------------------------------------------------
var ReferenceErrorObject = /** @class */ (function (_super) {
    __extends(ReferenceErrorObject, _super);
    function ReferenceErrorObject(v) {
        var _this = _super.call(this, monitor.instances.ReferenceErrorPrototype, v) || this;
        _this.Type = 'ReferenceError';
        return _this;
    }
    return ReferenceErrorObject;
}(NativeErrorObject_1.NativeErrorObject));
exports.ReferenceErrorObject = ReferenceErrorObject;

},{"./NativeErrorObject":144}],149:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var Label_1 = require("../Label");
var EcmaObject_1 = require("../Objects/EcmaObject");
// ------------------------------------------------------------
// RegExp Object, 15.10.4.1
var RegExpObject = /** @class */ (function (_super) {
    __extends(RegExpObject, _super);
    function RegExpObject(nativeRegExp, l) {
        var _this = _super.call(this) || this;
        _this.Class = 'RegExp';
        _this.PrimitiveValue = nativeRegExp;
        _this.PrimitiveLabel = l;
        _this.Extensible = true;
        _this.Prototype = new Value_1.Value(monitor.instances.RegExpPrototype, Label_1.bot);
        _this.DefineOwnProperty(constants.source, {
            value: _this.PrimitiveValue.source,
            writable: false,
            enumerable: false,
            configurable: false,
            label: l
        });
        _this.DefineOwnProperty(constants.global, {
            value: _this.PrimitiveValue.global,
            writable: false,
            enumerable: false,
            configurable: false,
            label: l
        });
        _this.DefineOwnProperty(constants.ignoreCase, {
            value: _this.PrimitiveValue.ignoreCase,
            writable: false,
            enumerable: false,
            configurable: false,
            label: l
        });
        _this.DefineOwnProperty(constants.multiline, {
            value: _this.PrimitiveValue.multiline,
            writable: false,
            enumerable: false,
            configurable: false,
            label: l
        });
        _this.DefineOwnProperty(constants.lastIndex, {
            value: _this.PrimitiveValue.lastIndex,
            writable: true,
            enumerable: false,
            configurable: false,
            label: l
        });
        return _this;
    }
    RegExpObject.prototype.toString = function () {
        var v = this.PrimitiveValue.toString();
        return v;
    };
    return RegExpObject;
}(EcmaObject_1.EcmaObject));
exports.RegExpObject = RegExpObject;
function IsRegExpObject(x) {
    return typeof x.value === 'object' && x.value !== null && x.value !== undefined && x.value.Class === 'RegExp';
}
exports.IsRegExpObject = IsRegExpObject;

},{"../Constants":64,"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],150:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
// ------------------------------------------------------------
// String Object, 15.5.5
var StringObject = /** @class */ (function (_super) {
    __extends(StringObject, _super);
    function StringObject(val, lbl) {
        var _this = _super.call(this) || this;
        _this.Class = 'String';
        _this.PrimitiveValue = val;
        lbl = lbl || Label_1.bot;
        _this.PrimitiveLabel = lbl;
        // TODO: how to solve this to work with EcmaObject properly
        //@ts-ignore TYPES
        _this.properties = new String(val);
        for (var i = 0, len = val.length; i < len; i++) {
            _this.labels[i] = {
                value: lbl,
                existence: lbl
            };
        }
        _this.labels.length = {
            value: lbl,
            existence: lbl
        };
        _this.Extensible = true;
        _this.Prototype = new Value_1.Value(monitor.instances.StringPrototype, Label_1.bot);
        return _this;
        // length is not modeled in this way, but by GetOwnProperty; however, e.g.,
        // delete will use the properties field for deletion. Thus, we add a fake model.
        //   ecma.DefineFFF(this, constants.length, 0);
    }
    return StringObject;
}(EcmaObject_1.EcmaObject));
exports.StringObject = StringObject;
function IsStringObject(x) {
    return typeof x.value === 'object' && x.value !== null && x.value.Class === 'String';
}
exports.IsStringObject = IsStringObject;

},{"../Label":123,"../Objects/EcmaObject":137,"../Value":184}],151:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NativeErrorObject_1 = require("./NativeErrorObject");
// ------------------------------------------------------------
var SyntaxErrorObject = /** @class */ (function (_super) {
    __extends(SyntaxErrorObject, _super);
    function SyntaxErrorObject(v) {
        var _this = _super.call(this, monitor.instances.SyntaxErrorPrototype, v) || this;
        _this.Type = 'SyntaxError';
        return _this;
    }
    return SyntaxErrorObject;
}(NativeErrorObject_1.NativeErrorObject));
exports.SyntaxErrorObject = SyntaxErrorObject;

},{"./NativeErrorObject":144}],152:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NativeErrorObject_1 = require("./NativeErrorObject");
// ------------------------------------------------------------
var TypeErrorObject = /** @class */ (function (_super) {
    __extends(TypeErrorObject, _super);
    function TypeErrorObject(v) {
        var _this = _super.call(this, monitor.instances.TypeErrorPrototype, v) || this;
        _this.Type = 'TypeError';
        return _this;
    }
    return TypeErrorObject;
}(NativeErrorObject_1.NativeErrorObject));
exports.TypeErrorObject = TypeErrorObject;

},{"./NativeErrorObject":144}],153:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NativeErrorObject_1 = require("./NativeErrorObject");
// ------------------------------------------------------------
var URIErrorObject = /** @class */ (function (_super) {
    __extends(URIErrorObject, _super);
    function URIErrorObject(v) {
        var _this = _super.call(this, monitor.instances.URIErrorPrototype, v) || this;
        _this.Type = 'URIError';
        return _this;
    }
    return URIErrorObject;
}(NativeErrorObject_1.NativeErrorObject));
exports.URIErrorObject = URIErrorObject;

},{"./NativeErrorObject":144}],154:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var Option = /** @class */ (function () {
    function Option(type, val, desc) {
        this.type = type;
        this.set(val);
        this.def = this.value;
        this.description = desc;
    }
    Option.prototype.set = function (val) {
        var v = String(val);
        if (this.type === 'string') {
            this.value = v;
        }
        else if (this.type === 'boolean') {
            this.value = v === 'true' || v === '1';
        }
        else if (this.type === 'number') {
            this.value = Number(v);
        }
    };
    Option.prototype.getDefault = function () {
        return this.def;
    };
    Option.prototype.valueOf = function () {
        return this.value;
    };
    Option.prototype.toString = function () {
        return String(this.value);
    };
    return Option;
}());
// -------------------------------------------------------------
// Options
var Options = /** @class */ (function () {
    function Options() {
        this.options = {};
    }
    Options.prototype.declare = function (name, type, def, desc) {
        var description = desc ? desc : name;
        this.options[name] = new Option(type, def, description);
    };
    Options.prototype.has = function (name) {
        return this.options[name] !== undefined;
    };
    Options.prototype.get = function (name) {
        return this.options[name].valueOf();
    };
    Options.prototype.getOption = function (name) {
        return this.options[name];
    };
    Options.prototype.set = function (name, value) {
        this.options[name].set(value);
    };
    Options.prototype.keys = function () {
        var res = [];
        for (var x in this.options) {
            if (this.options.hasOwnProperty(x)) {
                res.push(x);
            }
        }
        return res;
    };
    Options.prototype.report = function () {
        for (var name in this.options) {
            monitor.info(name + " : " + this.options[name].toString());
        }
    };
    return Options;
}());
exports.Options = Options;

},{}],155:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var escodegen_1 = require("escodegen");
exports.pretty = escodegen_1.generate;

},{"escodegen":5}],156:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// ------------------------------------------------------------
// Property descriptors, 8.10
function IsAccessorDescriptor(pd) {
    if (pd === undefined) {
        return false;
    }
    else {
        return ('get' in pd || 'put' in pd);
    }
}
exports.IsAccessorDescriptor = IsAccessorDescriptor;
function IsDataDescriptor(pd) {
    if (pd === undefined) {
        return false;
    }
    else {
        return ('value' in pd || 'writable' in pd);
    }
}
exports.IsDataDescriptor = IsDataDescriptor;

},{}],157:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var Label_1 = require("../Label");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToBoolean_1 = require("../Conversion/ToBoolean");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
var IsCallable_1 = require("../Utility/IsCallable");
var ToUInt32_1 = require("../Conversion/ToUInt32");
// ------------------------------------------------------------
// 15.4.4
var ArrayPrototype = /** @class */ (function (_super) {
    __extends(ArrayPrototype, _super);
    function ArrayPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Array';
        _this.host = host;
        return _this;
    }
    ArrayPrototype.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.ArrayConstructor);
        Define_1.DefineTFF(this, constants.length, 0);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, Array.prototype.toString));
        Define_1.DefineTFT(this, constants.toLocaleString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleString, 0, Array.prototype.toLocaleString));
        Define_1.DefineTFT(this, constants.concat, new BuiltinFunctionObject_1.BuiltinFunctionObject(concat, 1, Array.prototype.concat));
        Define_1.DefineTFT(this, constants.join, new BuiltinFunctionObject_1.BuiltinFunctionObject(join, 1, Array.prototype.join));
        Define_1.DefineTFT(this, constants.pop, new BuiltinFunctionObject_1.BuiltinFunctionObject(pop, 0, Array.prototype.pop));
        Define_1.DefineTFT(this, constants.push, new BuiltinFunctionObject_1.BuiltinFunctionObject(push, 1, Array.prototype.push));
        Define_1.DefineTFT(this, constants.reverse, new BuiltinFunctionObject_1.BuiltinFunctionObject(reverse, 0, Array.prototype.reverse));
        Define_1.DefineTFT(this, constants.shift, new BuiltinFunctionObject_1.BuiltinFunctionObject(shift, 0, Array.prototype.shift));
        Define_1.DefineTFT(this, constants.slice, new BuiltinFunctionObject_1.BuiltinFunctionObject(slice, 2, Array.prototype.slice));
        Define_1.DefineTFT(this, constants.sort, new BuiltinFunctionObject_1.BuiltinFunctionObject(sort, 1, Array.prototype.sort));
        Define_1.DefineTFT(this, constants.splice, new BuiltinFunctionObject_1.BuiltinFunctionObject(splice, 2, Array.prototype.splice));
        Define_1.DefineTFT(this, constants.unshift, new BuiltinFunctionObject_1.BuiltinFunctionObject(unshift, 1, Array.prototype.unshift));
        Define_1.DefineTFT(this, constants.indexOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(indexOf, 1, Array.prototype.indexOf));
        Define_1.DefineTFT(this, constants.lastIndexOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(lastIndexOf, 1, Array.prototype.lastIndexOf));
        Define_1.DefineTFT(this, constants.every, new BuiltinFunctionObject_1.BuiltinFunctionObject(every, 1, Array.prototype.every));
        Define_1.DefineTFT(this, constants.some, new BuiltinFunctionObject_1.BuiltinFunctionObject(some, 1, Array.prototype.some));
        Define_1.DefineTFT(this, constants.forEach, new BuiltinFunctionObject_1.BuiltinFunctionObject(forEach, 1, Array.prototype.forEach));
        Define_1.DefineTFT(this, constants.map, new BuiltinFunctionObject_1.BuiltinFunctionObject(map, 1, Array.prototype.map));
        Define_1.DefineTFT(this, constants.filter, new BuiltinFunctionObject_1.BuiltinFunctionObject(filter, 1, Array.prototype.filter));
        Define_1.DefineTFT(this, constants.reduce, new BuiltinFunctionObject_1.BuiltinFunctionObject(reduce, 1, Array.prototype.reduce));
        Define_1.DefineTFT(this, constants.reduceRight, new BuiltinFunctionObject_1.BuiltinFunctionObject(reduceRight, 1, Array.prototype.reduceRight));
    };
    return ArrayPrototype;
}(EcmaObject_1.EcmaObject));
exports.ArrayPrototype = ArrayPrototype;
// ------------------------------------------------------------
// toString, 15.4.4.2
function toString(thisArg, args) {
    var array = ToObject_1.ToObject(thisArg);
    var func = array.Get(constants.join);
    if (!IsCallable_1.IsCallable(func)) {
        func = monitor.instances.ObjectPrototype.Get(constants.toString);
    }
    // @ts-ignore
    return func.value.Call(array, []);
}
// ------------------------------------------------------------
// toLocaleString, 15.4.4.3
function toLocaleString(thisArg, args) {
    var array = ToObject_1.ToObject(thisArg);
    var arrayLen = array.Get(new Value_1.Value("length", Label_1.bot));
    var len = ToUInt32_1.ToUInt32(arrayLen);
    var separator = ',';
    var label = Label_1.lub(monitor.context.effectivePC, array.label);
    if (len.value === 0) {
        return new Value_1.Value("", label);
    }
    var firstElement = array.Get(new Value_1.Value("0", Label_1.bot));
    var R;
    if (firstElement.value === undefined || firstElement.value === null) {
        R = new Value_1.Value("", label);
    }
    else {
        var elementObj = ToObject_1.ToObject(firstElement);
        var func = elementObj.Get(new Value_1.Value("toLocaleString", Label_1.bot));
        if (!IsCallable_1.IsCallable(func)) {
            monitor.Throw("TypeError", 'Array.prototype.toLocaleString: not a function', Label_1.bot);
            throw 'TypeScript;';
        }
        // ES6 standard is doing this, and ES5 should be able to handle it
        R = ToString_1.ToString(func.value.Call(elementObj, []));
    }
    var k = 1;
    while (k < len.value) {
        //@ts-ignore TYPES
        var S = R.value.concat(separator);
        var nextElement = array.Get(new Value_1.Value('' + k, Label_1.bot));
        if (nextElement.value === undefined || firstElement.value === null) {
            R = new Value_1.Value("", label);
        }
        else {
            var elementObj = ToObject_1.ToObject(nextElement);
            var func = elementObj.Get(new Value_1.Value("toLocaleString", Label_1.bot));
            if (!IsCallable_1.IsCallable(func)) {
                monitor.Throw("TypeError", 'Array.prototype.toLocaleString: not a function', Label_1.bot);
                throw 'TypeScript;';
            }
            // ES6 standard is doing this, and ES5 should be able to handle it
            R = ToString_1.ToString(func.value.Call(elementObj, []));
        }
        R = new Value_1.Value(S.concat(R.value), R.label);
        k++;
    }
    R.raise(label);
    //@ts-ignore TYPES
    return R;
}
// ------------------------------------------------------------
// concat, 15.4.4.4
function concat(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var A = new ArrayObject_1.ArrayObject();
    var n = 0;
    var c = monitor.context;
    var label = new Label_1.Label();
    function aux(E) {
        c.pushPC(E.label);
        label = Label_1.lub(label, E.label);
        if (E.value && E.value.Class === 'Array') {
            var k = 0;
            var len = E.Get(constants.length);
            label = Label_1.lub(label, len.label);
            monitor.context.pushPC(len.label);
            while (k < len.value) {
                var _k = new Value_1.Value(k, Label_1.bot);
                var exists = E.HasProperty(_k);
                if (exists.value) {
                    monitor.context.pushPC(exists.label);
                    var subElement = E.Get(_k);
                    A.DefineOwnProperty(new Value_1.Value(n, label), {
                        value: subElement.value,
                        label: subElement.label,
                        writable: true,
                        enumerable: true,
                        configurable: true
                    }, false);
                    monitor.context.popPC();
                }
                n++;
                k++;
            }
            monitor.context.popPC();
        }
        else {
            A.DefineOwnProperty(new Value_1.Value(n, label), {
                value: E.value,
                label: E.label,
                writable: true,
                enumerable: true,
                configurable: true
            }, false);
            n++;
        }
        c.popPC();
    }
    aux(O);
    for (var i = 0, len = args.length; i < len; i++) {
        aux(args[i]);
    }
    // This is a fix they added in ECMA-262 v6 standard, but browsers used it
    // in ECMA-262 v5 as well.
    A.Put(new Value_1.Value("length", Label_1.bot), new Value_1.Value(n, Label_1.bot), false);
    return new Value_1.Value(A, Label_1.bot);
}
;
// ------------------------------------------------------------
// join, 15.4.4.5
function join(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var len = ToUInt32_1.ToUInt32(O.Get(constants.length));
    var arg0 = args[0] || new Value_1.Value(',', Label_1.bot);
    var separator;
    if (arg0.value === undefined) {
        separator = new Value_1.Value(',', arg0.label);
    }
    else {
        separator = ToString_1.ToString(arg0);
    }
    var label = Label_1.lub(len.label, separator.label);
    var arr = [];
    for (var i = 0; i < len.value; i++) {
        var v = O.Get(new Value_1.Value(i, Label_1.bot));
        var y = void 0;
        if (v.value === undefined || v.value === null) {
            y = new Value_1.Value('', v.label);
        }
        else {
            y = ToString_1.ToString(v);
        }
        arr[i] = y.value;
        label = Label_1.lub(label, y.label);
    }
    var res = arr.join(separator.value);
    return new Value_1.Value(res, label);
}
// ------------------------------------------------------------
// pop, 15.4.4.6
function pop(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var len = ToUInt32_1.ToUInt32(O.Get(constants.length));
    if (len.value === 0) {
        O.Put(constants.length, len, true);
        return new Value_1.Value(undefined, len.label);
    }
    var indx = new Value_1.Value(len.value - 1, len.label);
    var element = O.Get(indx);
    O.Delete(indx, true);
    O.Put(constants.length, indx, true);
    return element;
}
// ------------------------------------------------------------
// push, 15.4.4.7
function push(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var n = ToUInt32_1.ToUInt32(O.Get(constants.length));
    for (var i = 0, len = args.length; i < len; i++) {
        var E = args[i];
        O.Put(n, E);
        n.value++;
    }
    O.Put(constants.length, n, true);
    return n;
}
// ------------------------------------------------------------
// reverse, 15.4.4.8
function reverse(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var len = ToUInt32_1.ToUInt32(O.Get(constants.length));
    var middle = Math.floor(len.value / 2);
    var lower = 0;
    var c = monitor.context;
    while (lower !== middle && lower > -2) {
        var upper = len.value - lower - 1;
        var upperP = ToString_1.ToString(new Value_1.Value(upper, len.label));
        var lowerP = ToString_1.ToString(new Value_1.Value(lower, len.label));
        var lowerValue = O.Get(lowerP);
        var upperValue = O.Get(upperP);
        var lowerExists = O.HasProperty(lowerP);
        var upperExists = O.HasProperty(upperP);
        c.pushPC(Label_1.lub(lowerExists.label, upperExists.label, len.label));
        if (lowerExists.value && upperExists.value) {
            O.Put(lowerP, upperValue, true);
            O.Put(upperP, lowerValue, true);
        }
        else if (!lowerExists.value && upperExists.value) {
            O.Put(lowerP, upperValue, true);
            O.Delete(upperP, true);
        }
        else if (lowerExists.value && !upperExists.value) {
            O.Delete(lowerP, true);
            O.Put(upperP, lowerValue, true);
        }
        c.popPC();
        lower++;
    }
    return O;
}
// ------------------------------------------------------------
// shift, 15.4.4.9
function shift(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    if (len.value === 0) {
        monitor.context.pushPC(len.label);
        O.Put(constants.length, len, true);
        monitor.context.popPC();
        return new Value_1.Value(undefined, len.label);
    }
    var first = O.Get(new Value_1.Value(0, Label_1.bot));
    var k = 1;
    monitor.context.pushPC(len.label);
    while (k < len.value) {
        var from = k;
        var _from = new Value_1.Value(from, len.label);
        var to = k - 1;
        var _to = new Value_1.Value(to, len.label);
        var fromPresent = O.HasProperty(_from);
        if (fromPresent.value) {
            monitor.context.pushPC(fromPresent.label);
            var fromVal = O.Get(_from);
            O.Put(_to, fromVal, true);
            monitor.context.popPC();
        }
        else {
            O.Delete(_to, true);
        }
        k++;
    }
    monitor.context.popPC();
    len.value--;
    O.Delete(len, true);
    O.Put(constants.length, len, true);
    return first;
}
// ------------------------------------------------------------
// slice, 15.4.4.10
function slice(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var A = new ArrayObject_1.ArrayObject();
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var start = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var end = args[1] ? args[1] : new Value_1.Value(undefined, Label_1.bot);
    var relativeStart = ToInteger_1.ToInteger(start);
    var k = new Value_1.Value(0, Label_1.lub(len.label, relativeStart.label));
    if (relativeStart.value < 0) {
        k.value = Math.max(len.value + relativeStart.value, 0);
    }
    else {
        k.value = Math.min(relativeStart.value, len.value);
    }
    var relativeEnd;
    if (end.value === undefined) {
        relativeEnd = len;
    }
    else {
        relativeEnd = ToInteger_1.ToInteger(end);
    }
    var _final = new Value_1.Value(0, Label_1.lub(len.label, relativeStart.label));
    if (relativeEnd.value < 0) {
        _final.value = Math.max(len.value + relativeEnd.value, 0);
    }
    else {
        _final.value = Math.min(relativeEnd.value, len.value);
    }
    var n = 0;
    monitor.context.pushPC(Label_1.lub(k.label, _final.label));
    while (k.value < _final.value) {
        var Pk = ToString_1.ToString(k);
        var kPresent = O.HasProperty(Pk);
        if (kPresent.value) {
            var kValue = O.Get(Pk);
            A.DefineOwnProperty(new Value_1.Value(n, Label_1.bot), {
                value: kValue.value,
                label: kValue.label,
                writable: true,
                enumerable: true,
                configurable: true
            }, false);
        }
        k.value++;
        n++;
    }
    monitor.context.popPC();
    return new Value_1.Value(A, Label_1.bot);
}
// ------------------------------------------------------------
// sort, 15.4.4.11
function sort(thisArg, args) {
    var comparefun = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var label = Label_1.lub(O.label, len.label);
    var c = monitor.context;
    c.pushPC(len.label);
    var array = [];
    var k = new Value_1.Value(0, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            kValue.raise(label);
            array[k.value] = kValue;
        }
        k.value++;
    }
    var isCallable = IsCallable_1.IsCallable(comparefun);
    c.labels.pc = Label_1.lub(c.labels.pc, comparefun.label);
    if (comparefun.value !== undefined && !isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.sort: not a function', Label_1.bot);
    }
    var comparefunWrapper;
    if (comparefun.value) {
        comparefunWrapper = function (x, y) {
            if (x.value === undefined) {
                label = Label_1.lub(label, x.label);
                return 1;
            }
            if (y.value === undefined) {
                label = Label_1.lub(label, y.label);
                return -1;
            }
            var result = comparefun.Call(new Value_1.Value(undefined, Label_1.bot), [x, y]);
            c.labels.pc = Label_1.lub(c.labels.pc, result.label, x.label, y.label);
            label = Label_1.lub(label, result.label, x.label, y.label);
            return result.value;
        };
    }
    else {
        comparefunWrapper = function (x, y) {
            if (x.value === undefined) {
                label = Label_1.lub(label, x.label);
                return 1;
            }
            if (y.value === undefined) {
                label = Label_1.lub(label, y.label);
                return -1;
            }
            var xString = ToString_1.ToString(x);
            var yString = ToString_1.ToString(y);
            c.labels.pc = Label_1.lub(c.labels.pc, xString.label, yString.label);
            label = Label_1.lub(label, xString.label, yString.label);
            if (xString.value < yString.value) {
                return -1;
            }
            if (xString.value > yString.value) {
                return 1;
            }
            return 0;
        };
    }
    //@ts-ignore TYPES
    array = array.sort(comparefunWrapper);
    for (var i = 0, len_1 = array.length; i < len_1; i++) {
        var v = array[i];
        if (v) {
            O.Put(new Value_1.Value(i, label), v, true);
        }
        else {
            O.Delete(new Value_1.Value(i, label), true);
        }
    }
    c.popPC();
    return O;
}
// ------------------------------------------------------------
// splice, 15.4.4.12
function splice(thisArg, args) {
    var start = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var A = new ArrayObject_1.ArrayObject();
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var relativeStart = ToInteger_1.ToInteger(start);
    var actualStart = new Value_1.Value(null, Label_1.lub(len.label, relativeStart.label));
    if (relativeStart.value < 0) {
        actualStart.value = Math.max((len.value + relativeStart.value), 0);
    }
    else {
        actualStart.value = Math.min(relativeStart.value, len.value);
    }
    var deleteCount = ToInteger_1.ToInteger(arg1);
    var actualDeleteCount = new Value_1.Value(null, Label_1.lub(deleteCount.label, actualStart.label));
    actualDeleteCount.value = Math.min(Math.max(deleteCount.value, 0), len.value - actualStart.value);
    var k = 0;
    monitor.context.pushPC(actualDeleteCount.label);
    while (k < actualDeleteCount.value) {
        var from = new Value_1.Value(actualStart.value + k, actualStart.label);
        var fromPresent = O.HasProperty(from);
        monitor.context.pushPC(fromPresent.label);
        if (fromPresent.value) {
            var fromValue = O.Get(from);
            A.DefineOwnProperty(new Value_1.Value(k, actualDeleteCount.label), {
                value: fromValue.value,
                label: fromValue.label,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
        monitor.context.popPC();
        k++;
    }
    monitor.context.popPC();
    var items = [];
    for (var i = 0; i < args.length - 2; i++) {
        items[i] = args[i + 2];
    }
    var itemCount = items.length;
    if (itemCount < actualDeleteCount.value) {
        var k_1 = actualStart.value;
        monitor.context.pushPC(actualStart.label);
        while (k_1 < len.value - actualDeleteCount.value) {
            var from = new Value_1.Value(k_1 + actualDeleteCount.value, Label_1.lub(actualStart.label, actualDeleteCount.label));
            var to = new Value_1.Value(k_1 + itemCount, actualStart.label);
            var fromPresent = O.HasProperty(from);
            monitor.context.pushPC(fromPresent.label);
            if (fromPresent.value) {
                var fromValue = O.Get(from);
                O.Put(to, fromValue, true);
            }
            else {
                O.Delete(to, true);
            }
            k_1++;
            monitor.context.popPC();
        }
        monitor.context.popPC();
        k_1 = len.value;
        monitor.context.pushPC(Label_1.lub(len.label, actualDeleteCount.label));
        while (k_1 > (len.value - actualDeleteCount.value + itemCount)) {
            O.Delete(new Value_1.Value(k_1, len.label));
            k_1--;
        }
        monitor.context.popPC();
    }
    else if (itemCount > actualDeleteCount.value) {
        var k_2 = len.value - actualDeleteCount.value;
        monitor.context.pushPC(Label_1.lub(len.label, actualDeleteCount.label));
        while (k_2 > actualStart.value) {
            var from = new Value_1.Value(k_2 + actualDeleteCount.value - 1, actualDeleteCount.label);
            var to = new Value_1.Value(k_2 + itemCount - 1, Label_1.bot);
            var fromPresent = O.HasProperty(from);
            if (fromPresent.value) {
                var fromValue = O.Get(from);
                O.Put(to, fromValue, true);
            }
            else {
                O.Delete(to, true);
            }
            k_2--;
        }
        monitor.context.popPC();
    }
    k = actualStart.value;
    for (var i = 0; i < items.length; i++) {
        O.Put(new Value_1.Value(k + i, actualStart.label), items[i], true);
    }
    O.Put(constants.length, new Value_1.Value(len.value - actualDeleteCount.value + itemCount, Label_1.lub(len.label, actualDeleteCount.label)), true);
    return new Value_1.Value(A, Label_1.bot);
}
// ------------------------------------------------------------
// unshift, 15.4.4.13
function unshift(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var argCount = args.length;
    var k = len.value;
    monitor.context.pushPC(len.label);
    while (k > 0) {
        var from = new Value_1.Value(k - 1, len.label);
        var to = new Value_1.Value(k + argCount - 1, len.label);
        var fromPresent = O.HasProperty(from);
        monitor.context.pushPC(fromPresent.label);
        if (fromPresent.value) {
            var fromValue = O.Get(from);
            O.Put(to, fromValue, true);
        }
        else {
            O.Delete(to, true);
        }
        monitor.context.popPC();
        k--;
    }
    monitor.context.popPC();
    var j = 0;
    var items = args;
    for (; j < argCount; j++) {
        var E = items[j];
        O.Put(new Value_1.Value(j, Label_1.bot), E, true);
    }
    O.Put(constants.length, new Value_1.Value(len.value + argCount, len.label));
    return new Value_1.Value(len.value + argCount, len.label);
}
;
// ------------------------------------------------------------
// indexOf, 15.4.4.14
function indexOf(thisArg, args) {
    var searchElement = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var fromIndex = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    if (len.value === 0) {
        return new Value_1.Value(-1, len.label);
    }
    var label = Label_1.lub(len.label);
    c.pushPC(len.label);
    var n = fromIndex ? ToInteger_1.ToInteger(fromIndex) : new Value_1.Value(0, Label_1.bot);
    c.labels.pc = Label_1.lub(c.labels.pc, n.label);
    label = Label_1.lub(label, n.label);
    if (n.value >= len.value) {
        c.popPC();
        return new Value_1.Value(-1, label);
    }
    var k;
    if (n.value >= 0) {
        k = n;
    }
    else {
        k = new Value_1.Value(len.value - Math.abs(n.value), Label_1.lub(len.label, n.label));
        if (k.value < 0) {
            k.value = 0;
        }
    }
    while (k.value < len.value) {
        var kString = ToString_1.ToString(k);
        var kPresent = O.HasProperty(kString);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var elementK = O.Get(kString);
            c.labels.pc = Label_1.lub(c.labels.pc, elementK.label);
            label = Label_1.lub(label, elementK.label);
            var same = searchElement.value === elementK.value;
            if (same) {
                k.label = label;
                c.popPC();
                return k;
            }
        }
        k.value++;
    }
    c.popPC();
    k.value = -1;
    k.label = label;
    return k;
}
// ------------------------------------------------------------
// lastIndexOf, 15.4.4.15
function lastIndexOf(thisArg, args) {
    var searchElement = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var fromIndex = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    if (len.value === 0) {
        return new Value_1.Value(-1, len.label);
    }
    var label = Label_1.lub(len.label);
    c.pushPC(len.label);
    var n = fromIndex ? ToInteger_1.ToInteger(fromIndex) : new Value_1.Value(len.value - 1, len.label);
    var k;
    if (n.value >= 0) {
        k = new Value_1.Value(Math.min(n.value, len.value - 1), Label_1.lub(n.label, len.label));
    }
    else {
        k = new Value_1.Value(len.value - Math.abs(n.value), Label_1.lub(n.label, len.label));
    }
    c.labels.pc = Label_1.lub(c.labels.pc, k.label);
    label = Label_1.lub(label, k.label);
    while (k.value >= 0) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var elementK = O.Get(k);
            c.labels.pc = Label_1.lub(c.labels.pc, elementK.label);
            label = Label_1.lub(label, elementK.label);
            var same = searchElement.value === elementK.value;
            if (same) {
                k.label = label;
                c.popPC();
                return k;
            }
        }
        k.value--;
    }
    c.popPC();
    k.value = -1;
    k.label = label;
    return k;
}
// ------------------------------------------------------------
// every, 15.4.4.16
function every(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var callbackthisArg = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = Label_1.lub(callbackfn.label);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var k = new Value_1.Value(0, len.label);
    c.labels.pc = Label_1.lub(c.labels.pc, len.label);
    label = Label_1.lub(label, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var testResult = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            var b = ToBoolean_1.ToBoolean(testResult);
            c.labels.pc = Label_1.lub(c.labels.pc, b.label);
            label = Label_1.lub(label, b.label);
            if (!b.value) {
                c.popPC();
                return new Value_1.Value(false, label);
            }
        }
        k.value++;
    }
    c.popPC();
    return new Value_1.Value(true, label);
}
// ------------------------------------------------------------
// some, 15.4.4.17
function some(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var callbackthisArg = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = Label_1.lub(callbackfn.label);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var k = new Value_1.Value(0, len.label);
    c.labels.pc = Label_1.lub(c.labels.pc, len.label);
    label = Label_1.lub(label, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var testResult = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            var b = ToBoolean_1.ToBoolean(testResult);
            c.labels.pc = Label_1.lub(c.labels.pc, b.label);
            label = Label_1.lub(label, b.label);
            if (b.value) {
                c.popPC();
                return new Value_1.Value(true, label);
            }
        }
        k.value++;
    }
    c.popPC();
    return new Value_1.Value(false, label);
}
// ------------------------------------------------------------
// forEach, 15.4.4.18
function forEach(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var callbackthisArg = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var k = new Value_1.Value(0, len.label);
    c.labels.pc = Label_1.lub(c.labels.pc, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            callbackfn.Call(callbackthisArg, [kValue, k, O]);
        }
        k.value++;
    }
    c.popPC();
    return new Value_1.Value(undefined, Label_1.bot);
}
// ------------------------------------------------------------
// map, 15.4.4.19
function map(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var callbackthisArg = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var A = new ArrayObject_1.ArrayObject();
    A.properties.length = len.value;
    A.labels.length = {
        value: len.label,
        existence: Label_1.bot
    };
    var k = new Value_1.Value(0, len.label);
    c.labels.pc = Label_1.lub(c.labels.pc, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var mappedValue = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            A.DefineOwnProperty(k, {
                value: mappedValue.value,
                label: mappedValue.label,
                writable: true,
                enumerable: true,
                configurable: true
            }, false);
        }
        k.value++;
    }
    c.popPC();
    return new Value_1.Value(A, Label_1.bot);
}
// ------------------------------------------------------------
// filter, 15.4.4.20
function filter(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var callbackthisArg = args[1] || new Value_1.Value(undefined, Label_1.bot);
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var A = new ArrayObject_1.ArrayObject();
    var k = new Value_1.Value(0, len.label);
    var to = new Value_1.Value(0, len.label);
    c.labels.pc = Label_1.lub(c.labels.pc, len.label);
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            var selected = callbackfn.Call(callbackthisArg, [kValue, k, O]);
            selected = ToBoolean_1.ToBoolean(selected);
            c.labels.pc = Label_1.lub(c.labels.pc, selected.label);
            if (selected.value) {
                A.DefineOwnProperty(to, {
                    value: kValue.value,
                    label: kValue.label,
                    writable: true,
                    enumerable: true,
                    configurable: true
                }, false);
                to.value++;
            }
        }
        k.value++;
    }
    c.popPC();
    return new Value_1.Value(A, Label_1.bot);
}
// ------------------------------------------------------------
// reduce, 15.4.4.21
function reduce(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var initialValue = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = Label_1.lub(callbackfn.label);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var k = new Value_1.Value(0, len.label);
    var accumulator = new Value_1.Value(undefined, Label_1.bot);
    if (initialValue) {
        accumulator = initialValue;
    }
    else {
        var kPresent = new Value_1.Value(false, Label_1.bot);
        c.labels.pc = Label_1.lub(c.labels.pc, len.label);
        label = Label_1.lub(label, len.label);
        while (!kPresent.value && k.value < len.value) {
            kPresent = O.HasProperty(k);
            c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
            label = Label_1.lub(label, kPresent.label);
            if (kPresent.value) {
                accumulator = O.Get(k);
            }
            k.value++;
        }
        if (!kPresent.value) {
            monitor.Throw("TypeError", 'Array.prototype.reduce: empty array with no initial value', Label_1.bot);
        }
    }
    while (k.value < len.value) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            accumulator = callbackfn.Call(new Value_1.Value(undefined, Label_1.bot), [accumulator, kValue, k, O]);
        }
        k.value++;
    }
    c.popPC();
    accumulator.raise(label);
    return accumulator;
}
// ------------------------------------------------------------
// reduceRight, 15.4.4.22
function reduceRight(thisArg, args) {
    var callbackfn = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var initialValue = args[1];
    var O = ToObject_1.ToObject(thisArg);
    var lenVal = O.Get(constants.length);
    var len = ToUInt32_1.ToUInt32(lenVal);
    var c = monitor.context;
    var isCallable = IsCallable_1.IsCallable(callbackfn);
    var label = Label_1.lub(callbackfn.label);
    c.pushPC(callbackfn.label);
    if (!isCallable) {
        monitor.Throw("TypeError", 'Array.prototype.every: not a function', Label_1.bot);
    }
    var k = new Value_1.Value(len.value - 1, len.label);
    var accumulator = new Value_1.Value(undefined, Label_1.bot);
    if (initialValue) {
        accumulator = initialValue;
    }
    else {
        var kPresent = new Value_1.Value(false, Label_1.bot);
        c.labels.pc = Label_1.lub(c.labels.pc, len.label);
        label = Label_1.lub(label, len.label);
        while (!kPresent.value && k.value >= 0) {
            kPresent = O.HasProperty(k);
            c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
            label = Label_1.lub(label, kPresent.label);
            if (kPresent.value) {
                accumulator = O.Get(k);
            }
            k.value--;
        }
        if (!kPresent.value) {
            monitor.Throw("TypeError", 'Array.prototype.reduce: empty array with no initial value', Label_1.bot);
        }
    }
    while (k.value >= 0) {
        var kPresent = O.HasProperty(k);
        c.labels.pc = Label_1.lub(c.labels.pc, kPresent.label);
        label = Label_1.lub(label, kPresent.label);
        if (kPresent.value) {
            var kValue = O.Get(k);
            accumulator = callbackfn.Call(new Value_1.Value(undefined, Label_1.bot), [accumulator, kValue, k, O]);
        }
        k.value--;
    }
    c.popPC();
    accumulator.raise(label);
    return accumulator;
}

},{"../Constants":64,"../Conversion/ToBoolean":81,"../Conversion/ToInteger":83,"../Conversion/ToObject":85,"../Conversion/ToString":87,"../Conversion/ToUInt32":89,"../Define":91,"../Label":123,"../Objects/ArrayObject":132,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Utility/IsCallable":182,"../Value":184}],158:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var BooleanObject_1 = require("../Objects/BooleanObject");
// 15.6.4 ------------------------------------------------------------
var BooleanPrototype = /** @class */ (function (_super) {
    __extends(BooleanPrototype, _super);
    function BooleanPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Boolean';
        _this.PrimitiveValue = new Boolean(false);
        _this.host = host;
        return _this;
    }
    BooleanPrototype.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.BooleanConstructor);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, this.host.toString));
        Define_1.DefineTFT(this, new Value_1.Value('valueOf', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(valueOf, 0, this.host.valueOf));
    };
    return BooleanPrototype;
}(EcmaObject_1.EcmaObject));
exports.BooleanPrototype = BooleanPrototype;
// toString, 15.6.4.2 -----------------------------------------
function toString(thisArg, args) {
    var b = valueOf(thisArg, args);
    var s = b.value ? 'true' : 'false';
    return new Value_1.Value(s, b.label);
}
;
// valueOf, 15.6.4.3 ------------------------------------------ 
function valueOf(thisArg, args) {
    if (typeof thisArg.value === 'boolean') {
        return new Value_1.Value(thisArg.value, thisArg.label);
    }
    if (BooleanObject_1.IsBooleanObject(thisArg)) {
        return new Value_1.Value(thisArg.value.PrimitiveValue.valueOf(), thisArg.label);
    }
    monitor.Throw("TypeError", 'Boolean.prototype.valueOf is not generic', thisArg.label);
    throw 'TypeScript';
}
;

},{"../Constants":64,"../Define":91,"../Label":123,"../Objects/BooleanObject":133,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Value":184}],159:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ToNumber_1 = require("../Conversion/ToNumber");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var DateObject_1 = require("../Objects/DateObject");
// ------------------------------------------------------------
// The Date Prototype, 15.9.5
var DatePrototype = /** @class */ (function (_super) {
    __extends(DatePrototype, _super);
    function DatePrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Date';
        _this.PrimitiveValue = new Value_1.Value(NaN, Label_1.bot);
        _this.host = host;
        return _this;
    }
    DatePrototype.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.DateConstructor);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, this.host.toString));
        Define_1.DefineTFT(this, constants.toDateString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toDateString, 0, this.host.toDateString));
        Define_1.DefineTFT(this, constants.toTimeString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toTimeString, 0, this.host.toTimeString));
        Define_1.DefineTFT(this, constants.toLocaleString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleString, 0, this.host.toLocaleString));
        Define_1.DefineTFT(this, constants.toLocaleDateString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleDateString, 0, this.host.toLocaleDateString));
        Define_1.DefineTFT(this, constants.toLocaleTimeString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleTimeString, 0, this.host.toLocaleTimeString));
        Define_1.DefineTFT(this, new Value_1.Value('valueOf', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(valueOf, 0, this.host.valueOf));
        Define_1.DefineTFT(this, constants.getTime, new BuiltinFunctionObject_1.BuiltinFunctionObject(getTime, 0, this.host.getTime));
        Define_1.DefineTFT(this, constants.getFullYear, new BuiltinFunctionObject_1.BuiltinFunctionObject(getFullYear, 0, this.host.getFullYear));
        Define_1.DefineTFT(this, constants.getUTCFullYear, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCFullYear, 0, this.host.getUTCFullYear));
        Define_1.DefineTFT(this, constants.getMonth, new BuiltinFunctionObject_1.BuiltinFunctionObject(getMonth, 0, this.host.getMonth));
        Define_1.DefineTFT(this, constants.getUTCMonth, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCMonth, 0, this.host.getUTCMonth));
        Define_1.DefineTFT(this, constants.getDate, new BuiltinFunctionObject_1.BuiltinFunctionObject(getDate, 0, this.host.getDate));
        Define_1.DefineTFT(this, constants.getUTCDate, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCDate, 0, this.host.getUTCDate));
        Define_1.DefineTFT(this, constants.getDay, new BuiltinFunctionObject_1.BuiltinFunctionObject(getDay, 0, this.host.getDay));
        Define_1.DefineTFT(this, constants.getUTCDay, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCDay, 0, this.host.getUTCDay));
        Define_1.DefineTFT(this, constants.getHours, new BuiltinFunctionObject_1.BuiltinFunctionObject(getHours, 0, this.host.getHours));
        Define_1.DefineTFT(this, constants.getUTCHours, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCHours, 0, this.host.getUTCHours));
        Define_1.DefineTFT(this, constants.getMinutes, new BuiltinFunctionObject_1.BuiltinFunctionObject(getMinutes, 0, this.host.getMinutes));
        Define_1.DefineTFT(this, constants.getUTCMinutes, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCMinutes, 0, this.host.getUTCMinutes));
        Define_1.DefineTFT(this, constants.getSeconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(getSeconds, 0, this.host.getSeconds));
        Define_1.DefineTFT(this, constants.getUTCSeconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCSeconds, 0, this.host.getUTCSeconds));
        Define_1.DefineTFT(this, constants.getMilliseconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(getMilliseconds, 0, this.host.getMilliseconds));
        Define_1.DefineTFT(this, constants.getUTCMilliseconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(getUTCMilliseconds, 0, this.host.getUTCMilliseconds));
        Define_1.DefineTFT(this, constants.getTimezoneOffset, new BuiltinFunctionObject_1.BuiltinFunctionObject(getTimezoneOffset, 0, this.host.getTimezoneOffset));
        Define_1.DefineTFT(this, constants.setTime, new BuiltinFunctionObject_1.BuiltinFunctionObject(setTime, 1, this.host.setTime));
        Define_1.DefineTFT(this, constants.setMilliseconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(setMilliseconds, 0, this.host.setMilliseconds));
        Define_1.DefineTFT(this, constants.setUTCMilliseconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCMilliseconds, 0, this.host.setUTCMilliseconds));
        Define_1.DefineTFT(this, constants.setSeconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(setSeconds, 0, this.host.setSeconds));
        Define_1.DefineTFT(this, constants.setUTCSeconds, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCSeconds, 0, this.host.setUTCSeconds));
        Define_1.DefineTFT(this, constants.setMinutes, new BuiltinFunctionObject_1.BuiltinFunctionObject(setMinutes, 0, this.host.setMinutes));
        Define_1.DefineTFT(this, constants.setUTCMinutes, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCMinutes, 0, this.host.setUTCMinutes));
        Define_1.DefineTFT(this, constants.setHours, new BuiltinFunctionObject_1.BuiltinFunctionObject(setHours, 0, this.host.setHours));
        Define_1.DefineTFT(this, constants.setUTCHours, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCHours, 0, this.host.setUTCHours));
        Define_1.DefineTFT(this, constants.setDate, new BuiltinFunctionObject_1.BuiltinFunctionObject(setDate, 0, this.host.setDate));
        Define_1.DefineTFT(this, constants.setUTCDate, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCDate, 0, this.host.setUTCDate));
        Define_1.DefineTFT(this, constants.setMonth, new BuiltinFunctionObject_1.BuiltinFunctionObject(setMonth, 2, this.host.setMonth));
        Define_1.DefineTFT(this, constants.setUTCMonth, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCMonth, 0, this.host.setUTCMonth));
        Define_1.DefineTFT(this, constants.setFullYear, new BuiltinFunctionObject_1.BuiltinFunctionObject(setFullYear, 0, this.host.setFullYear));
        Define_1.DefineTFT(this, constants.setUTCFullYear, new BuiltinFunctionObject_1.BuiltinFunctionObject(setUTCFullYear, 0, this.host.setUTCFullYear));
        Define_1.DefineTFT(this, constants.toUTCString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toUTCString, 0, this.host.toUTCString));
        Define_1.DefineTFT(this, constants.toISOString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toISOString, 0, this.host.toISOString));
        Define_1.DefineTFT(this, constants.toJSON, new BuiltinFunctionObject_1.BuiltinFunctionObject(toJSON, 0, this.host.toJSON));
        // @ts-ignore
        Define_1.DefineTFT(this, constants.setYear, new BuiltinFunctionObject_1.BuiltinFunctionObject(setYear, 1, this.host.setYear));
        // @ts-ignore
        Define_1.DefineTFT(this, constants.getYear, new BuiltinFunctionObject_1.BuiltinFunctionObject(getYear, 0, this.host.getYear));
        // @ts-ignore
        Define_1.DefineTFT(this, constants.toGMTString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toUTCString, 0, this.host.toGTMString));
    };
    return DatePrototype;
}(EcmaObject_1.EcmaObject));
exports.DatePrototype = DatePrototype;
function assertDate(v, caller) {
    if (!DateObject_1.IsDateObject(v)) {
        monitor.context.pushPC(v.label);
        monitor.Throw("TypeError", caller + ' is not generic', Label_1.bot);
    }
}
// ------------------------------------------------------------
function mkGenericGet(fname) {
    return function (thisArg, args) {
        assertDate(thisArg, fname);
        var label = Label_1.lub(thisArg.label, thisArg.value.PrimitiveLabel);
        var date = thisArg.value.PrimitiveValue;
        var value = date[fname].call(date);
        return new Value_1.Value(value, label);
    };
}
// ------------------------------------------------------------
function mkGenericSet(fname) {
    return function (thisArg, args) {
        assertDate(thisArg, fname);
        var context = Label_1.lub(thisArg.label, monitor.context.effectivePC);
        monitor.assert(Label_1.le(context, thisArg.value.PrimitiveLabel), fname + ': context ' + context + ' not below state label of Date object ' + thisArg.value.PrimitiveLabel);
        var _args = [];
        var label = new Label_1.Label();
        for (var i = 0, len = args.length; i < len; i++) {
            var x = ToNumber_1.ToNumber(args[i]);
            label = Label_1.lub(label, x.label);
            _args[i] = x.value;
        }
        thisArg.value.PrimitiveLabel = Label_1.lub(thisArg.value.PrimitiveLabel, label);
        label = Label_1.lub(thisArg.label, thisArg.value.PrimitiveLabel);
        var date = thisArg.value.PrimitiveValue;
        var value = date[fname].apply(date, _args);
        return new Value_1.Value(value, label);
    };
}
// ------------------------------------------------------------
// toISOString, 15.9.5.43
var toISOString = mkGenericGet('toISOString');
// ------------------------------------------------------------
// toString, 15.9.5.2
var toString = mkGenericGet('toString');
// ------------------------------------------------------------
// toDateString, 15.9.5.?
var toDateString = mkGenericGet('toDateString');
// ------------------------------------------------------------
// toTimeString, 15.9.5.?
var toTimeString = mkGenericGet('toTimeString');
// ------------------------------------------------------------
// toLocaleString, 15.9.5.?
var toLocaleString = mkGenericGet('toLocaleString');
// ------------------------------------------------------------
// toLocaleDateString, 15.9.5.?
var toLocaleDateString = mkGenericGet('toLocaleDateString');
// ------------------------------------------------------------
// toLocaleTimeString, 15.9.5.?
var toLocaleTimeString = mkGenericGet('toLocaleTimeString');
// ------------------------------------------------------------
// valueOf, 15.9.5.?
function valueOf(thisArg, args) {
    assertDate(thisArg, 'valueOf');
    return new Value_1.Value(thisArg.value.PrimitiveValue.valueOf(), thisArg.label);
}
// ------------------------------------------------------------
// getTime, 15.9.5.9
var getTime = mkGenericGet('getTime');
// ------------------------------------------------------------
// getFullYear, 15.9.5.?
var getFullYear = mkGenericGet('getFullYear');
// ------------------------------------------------------------
// getUTCFullYear, 15.9.5.?
var getUTCFullYear = mkGenericGet('getUTCFullYear');
// ------------------------------------------------------------
// getMonth, 15.9.5.?
var getMonth = mkGenericGet('getMonth');
// ------------------------------------------------------------
// getUTCMonth, 15.9.5.?
var getUTCMonth = mkGenericGet('getUTCMonth');
// ------------------------------------------------------------
// getDate, 15.9.5.?
var getDate = mkGenericGet('getDate');
// ------------------------------------------------------------
// getUTCDate, 15.9.5.?
var getUTCDate = mkGenericGet('getUTCDate');
// ------------------------------------------------------------
// getDay, 15.9.5.?
var getDay = mkGenericGet('getDay');
// ------------------------------------------------------------
// getUTCDay, 15.9.5.?
var getUTCDay = mkGenericGet('getUTCDay');
// ------------------------------------------------------------
// getHours, 15.9.5.?
var getHours = mkGenericGet('getHours');
// ------------------------------------------------------------
// getUTCHours, 15.9.5.?
var getUTCHours = mkGenericGet('getUTCHours');
// ------------------------------------------------------------
// getMinutes, 15.9.5.?
var getMinutes = mkGenericGet('getMinutes');
// ------------------------------------------------------------
// getUTCMinutes, 15.9.5.?
var getUTCMinutes = mkGenericGet('getUTCMinutes');
// ------------------------------------------------------------
// getSeconds, 15.9.5.?
var getSeconds = mkGenericGet('getSeconds');
// ------------------------------------------------------------
// getUTCSeconds, 15.9.5.?
var getUTCSeconds = mkGenericGet('getUTCSeconds');
// ------------------------------------------------------------
// getMilliseconds, 15.9.5.?
var getMilliseconds = mkGenericGet('getMilliseconds');
// ------------------------------------------------------------
// getUTCMilliseconds, 15.9.5.?
var getUTCMilliseconds = mkGenericGet('getUTCMilliseconds');
// ------------------------------------------------------------
// getTimezoneOffset, 15.9.5.?
var getTimezoneOffset = mkGenericGet('getTimezoneOffset');
// ------------------------------------------------------------
// setTime, 15.9.5.?
var setTime = mkGenericSet('setTime');
// ------------------------------------------------------------
// setMilliseconds, 15.9.5.?
var setMilliseconds = mkGenericSet('setMilliseconds');
// ------------------------------------------------------------
// setUTCMilliseconds, 15.9.5.?
var setUTCMilliseconds = mkGenericSet('setUTCMilliseconds');
// ------------------------------------------------------------
// setSeconds, 15.9.5.?
var setSeconds = mkGenericSet('setSeconds');
// ------------------------------------------------------------
// setUTCSeconds, 15.9.5.?
var setUTCSeconds = mkGenericSet('setUTCSeconds');
// ------------------------------------------------------------
// setMinutes, 15.9.5.?
var setMinutes = mkGenericSet('setMinutes');
// ------------------------------------------------------------
// setUTCMinutes, 15.9.5.?
var setUTCMinutes = mkGenericSet('setUTCMinutes');
// ------------------------------------------------------------
// setHours, 15.9.5.?
var setHours = mkGenericSet('setHours');
// ------------------------------------------------------------
// setUTCHours, 15.9.5.?
var setUTCHours = mkGenericSet('setUTCHours');
// ------------------------------------------------------------
// setDate, 15.9.5.?
var setDate = mkGenericSet('setDate');
// ------------------------------------------------------------
// setUTCDate, 15.9.5.?
var setUTCDate = mkGenericSet('setUTCDate');
// ------------------------------------------------------------
// setMonth, 15.9.5.?
var setMonth = mkGenericSet('setMonth');
// ------------------------------------------------------------
// setUTCMonth, 15.9.5.?
var setUTCMonth = mkGenericSet('setUTCMonth');
// ------------------------------------------------------------
// setFullYear, 15.9.5.?
var setFullYear = mkGenericSet('setFullYear');
// ------------------------------------------------------------
// setUTCFullYear, 15.9.5.?
var setUTCFullYear = mkGenericSet('setUTCFullYear');
// ------------------------------------------------------------
// toUTCString, 15.9.5.?
var toUTCString = mkGenericGet('toUTCString');
// ------------------------------------------------------------
// toJSON, 15.9.5.?
var toJSON = mkGenericGet('toJSON');
// ------------------------------------------------------------
// getYear, B.2.4
var getYear = mkGenericGet('getYear');
// ------------------------------------------------------------
// setYear, B.2.5
var setYear = mkGenericSet('setYear');
// ------------------------------------------------------------
// setYear, B.2.6
var toGMTString = mkGenericSet('toGMTString');

},{"../Constants":64,"../Conversion/ToNumber":84,"../Define":91,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/DateObject":136,"../Objects/EcmaObject":137,"../Value":184}],160:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ToString_1 = require("../Conversion/ToString");
var Define_1 = require("../Define");
var Label_1 = require("../Label");
// ------------------------------------------------------------
// 15.11.4 The Error Prototype
var ErrorPrototype = /** @class */ (function (_super) {
    __extends(ErrorPrototype, _super);
    function ErrorPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Error';
        _this.host = host;
        return _this;
    }
    ErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'Error');
    };
    ErrorPrototype.prototype.SetupBase = function (constructor, name) {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineTFT(this, constants.constructor, constructor);
        Define_1.DefineTFT(this, constants.name, name);
        Define_1.DefineTFT(this, constants.message, '');
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(tostring, 0, undefined));
    };
    return ErrorPrototype;
}(EcmaObject_1.EcmaObject));
exports.ErrorPrototype = ErrorPrototype;
// ------------------------------------------------------------
function tostring(thisArg, args) {
    var c = monitor.context;
    if (thisArg.value === null || typeof thisArg.value !== 'object') {
        c.pushPC(thisArg.label);
        monitor.Throw("TypeError", 'Error object expected', Label_1.bot);
    }
    var name = thisArg.Get(constants.name);
    if (name.value === undefined) {
        name.value = 'Error';
    }
    else {
        c.pushPC(name.label);
        name = ToString_1.ToString(name);
        c.popPC();
    }
    var msg = thisArg.Get(constants.message);
    if (msg.value === undefined) {
        msg.value = '';
    }
    else {
        c.pushPC(msg.label);
        msg = ToString_1.ToString(msg);
        c.popPC();
    }
    if (name.value === '') {
        msg.raise(name.label);
        return msg;
    }
    if (msg.value === '') {
        name.raise(msg.label);
        return name;
    }
    name.value += ': ' + msg.value;
    name.raise(msg.label);
    return name;
}

},{"../Constants":64,"../Conversion/ToString":87,"../Define":91,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Value":184}],161:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorPrototype_1 = require("./ErrorPrototype");
var EvalErrorPrototype = /** @class */ (function (_super) {
    __extends(EvalErrorPrototype, _super);
    function EvalErrorPrototype(host) {
        return _super.call(this, host) || this;
    }
    EvalErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'EvalError');
    };
    return EvalErrorPrototype;
}(ErrorPrototype_1.ErrorPrototype));
exports.EvalErrorPrototype = EvalErrorPrototype;

},{"./ErrorPrototype":160}],162:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ToUInt32_1 = require("../Conversion/ToUInt32");
var IsCallable_1 = require("../Utility/IsCallable");
var ThrowTypeError_1 = require("../ThrowTypeError");
// ------------------------------------------------------------
// Function Prototype, 15.3.4
var FunctionPrototype = /** @class */ (function (_super) {
    __extends(FunctionPrototype, _super);
    function FunctionPrototype(host) {
        var _this_1 = _super.call(this) || this;
        // 15.3.4
        _this_1.Class = 'Function';
        _this_1.Extensible = true;
        _this_1.host = host;
        return _this_1;
    }
    FunctionPrototype.prototype.Setup = function () {
        // 15.3.4.1
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.FunctionConstructor);
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineFFT(this, constants.length, 0);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, Function.prototype.toString));
        Define_1.DefineTFT(this, constants.apply, new BuiltinFunctionObject_1.BuiltinFunctionObject(apply, 2, Function.prototype.apply));
        Define_1.DefineTFT(this, constants.call, new BuiltinFunctionObject_1.BuiltinFunctionObject(call, 1, Function.prototype.call));
        Define_1.DefineTFT(this, constants.bind, new BuiltinFunctionObject_1.BuiltinFunctionObject(bind, 1, Function.prototype.bind));
    };
    // 15.3.4
    FunctionPrototype.prototype.Call = function (thisArg, args) {
        return new Value_1.Value(undefined, Label_1.bot);
    };
    FunctionPrototype.prototype.Construct = function (args) {
        return new Value_1.Value(undefined, Label_1.bot);
    };
    return FunctionPrototype;
}(EcmaObject_1.EcmaObject));
exports.FunctionPrototype = FunctionPrototype;
// ------------------------------------------------------------
// 15.3.4.2 - Implementation Dependent
function toString(thisArg, args) {
    return new Value_1.Value(String(thisArg.value), thisArg.label);
}
// ------------------------------------------------------------
// 15.3.4.3
function apply(thisArg, args) {
    var _this = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var argArray = args[1] ? args[1] : new Value_1.Value(undefined, Label_1.bot);
    monitor.context.pushPC(thisArg.label);
    if (!IsCallable_1.IsCallable(thisArg)) {
        monitor.Throw("TypeError", 'apply, not a function', Label_1.bot);
    }
    monitor.context.raisePC(argArray.label);
    if (argArray.value === null || argArray.value === undefined) {
        var res_1 = thisArg.Call(_this, []);
        monitor.context.popPC();
        return res_1;
    }
    if (typeof argArray.value !== 'object' || argArray.value.Class === undefined) {
        monitor.Throw("TypeError", 'apply, argument array not an object', Label_1.bot);
    }
    var len = argArray.Get(constants.length);
    var n = ToUInt32_1.ToUInt32(len);
    var argList = [];
    for (var index = 0; index < n.value; index++) {
        var nextArg = argArray.Get(new Value_1.Value(index, n.label));
        argList.push(nextArg);
    }
    // Since we cannot transfer the structural or existence info to
    //  the array used by Call, we raise the context accordingly.
    //  This is sound, but potentially an over approximation.
    monitor.context.raisePC(n.label);
    var res = thisArg.Call(_this, argList);
    monitor.context.popPC();
    return res;
}
// ------------------------------------------------------------
// 15.3.4.4
function call(thisArg, args) {
    var _this = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var argList = [];
    for (var i = 1; i < args.length; i++) {
        argList[i - 1] = args[i];
    }
    monitor.context.pushPC(thisArg.label);
    if (!IsCallable_1.IsCallable(thisArg)) {
        monitor.Throw("TypeError", 'call, not a function', Label_1.bot);
    }
    var res = thisArg.Call(_this, argList);
    monitor.context.popPC();
    return res;
}
// ------------------------------------------------------------
// 15.3.4.5
function bind(thisArg, args) {
    var Target = thisArg;
    var _this = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var argList = [];
    for (var i = 1; i < args.length; i++) {
        argList[i - 1] = args[i];
    }
    if (!IsCallable_1.IsCallable(Target)) {
        monitor.Throw("TypeError", 'bind: Target is not a function', Label_1.bot);
    }
    var F = new EcmaObject_1.EcmaObject();
    //@ts-ignore TYPES
    F.TargetFunction = Target;
    //@ts-ignore TYPES
    F.BoundThis = _this;
    //@ts-ignore TYPES
    F.BoundArgs = argList;
    F.Class = 'Function';
    F.Prototype = new Value_1.Value(monitor.instances.FunctionPrototype, Label_1.bot);
    //@ts-ignore TYPES
    F.Call = function (_thisVal, ExtraArgs) {
        //@ts-ignore TYPES
        var boundArgs = F.BoundArgs;
        //@ts-ignore TYPES
        var boundThis = F.BoundThis;
        //@ts-ignore TYPES
        var target = F.TargetFunction;
        var args = boundArgs.concat(ExtraArgs);
        return target.Call(boundThis, args);
    };
    //@ts-ignore TYPES
    F.Construct = function (ExtraArgs) {
        //@ts-ignore TYPES
        var target = F.TargetFunction;
        if (!target.Construct) {
            monitor.Throw("TypeError", 'bind construct: no internal method Construct', Label_1.bot);
        }
        //@ts-ignore TYPES
        var boundArgs = F.BoundArgs;
        var args = boundArgs.concat(ExtraArgs);
        return target.Construct(args);
    };
    //@ts-ignore TYPES
    F.HasInstance = function (V) {
        //@ts-ignore TYPES
        var target = F.TargetFunction;
        if (!target.HasInstance) {
            monitor.Throw("TypeError", 'bind HasInstance: no internal method HasInstance', Label_1.bot);
        }
        return target.HasInstance(V);
    };
    //@ts-ignore TYPES
    if (Target.Class === "Function") {
        //@ts-ignore TYPES
        var L = Target.length - args.length;
        //@ts-ignore TYPES
        F.length = L > 0 ? L : 0;
    }
    else {
        //@ts-ignore TYPES
        F.length = 0;
    }
    //@ts-ignore TYPES
    Define_1.DefineFFF(F, constants.length, F.length);
    F.Extensible = true;
    var thrower = ThrowTypeError_1.ThrowTypeError.Instance;
    F.DefineOwnProperty(constants.caller, {
        //@ts-ignore TYPES
        get: thrower,
        //@ts-ignore TYPES
        set: thrower,
        enumerable: false, configurable: false,
        label: Label_1.bot
    }, false);
    F.DefineOwnProperty(constants.arguments, {
        //@ts-ignore TYPES
        get: thrower,
        //@ts-ignore TYPES
        set: thrower,
        enumerable: false, configurable: false,
        label: Label_1.bot
    }, false);
    return new Value_1.Value(F, Label_1.bot);
}

},{"../Constants":64,"../Conversion/ToUInt32":89,"../Define":91,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../ThrowTypeError":177,"../Utility/IsCallable":182,"../Value":184}],163:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var NumberObject_1 = require("../Objects/NumberObject");
// ------------------------------------------------------------
// The Number Prototype, 15.7.4
var NumberPrototype = /** @class */ (function (_super) {
    __extends(NumberPrototype, _super);
    function NumberPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'Number';
        _this.PrimitiveValue = new Number(0);
        _this.PrimitiveLabel = Label_1.bot;
        _this.host = host;
        return _this;
    }
    NumberPrototype.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.NumberConstructor);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 1, this.host.toString));
        Define_1.DefineTFT(this, constants.toLocaleString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleString, 0, this.host.toLocaleString));
        Define_1.DefineTFT(this, new Value_1.Value('valueOf', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(valueOf, 0, this.host.valueOf));
        Define_1.DefineTFT(this, constants.toFixed, new BuiltinFunctionObject_1.BuiltinFunctionObject(toFixed, 0, this.host.toFixed));
        Define_1.DefineTFT(this, constants.toExponential, new BuiltinFunctionObject_1.BuiltinFunctionObject(toExponential, 0, this.host.toExponential));
        Define_1.DefineTFT(this, constants.toPrecision, new BuiltinFunctionObject_1.BuiltinFunctionObject(toPrecision, 0, this.host.toPrecision));
    };
    return NumberPrototype;
}(EcmaObject_1.EcmaObject));
exports.NumberPrototype = NumberPrototype;
function assertNumber(v, caller) {
    if (NumberObject_1.IsNumberObject(v)) {
        return v.value.PrimitiveValue.valueOf();
    }
    if (typeof v.value == "number") {
        return v.value;
    }
    monitor.context.pushPC(v.label);
    monitor.Throw("TypeError", caller + ' is not generic', Label_1.bot);
}
function IsNumberObjectOrNumber(x) {
    return typeof x.value === 'number' || NumberObject_1.IsNumberObject(x);
}
// ------------------------------------------------------------
// toString, 15.7.4.2
function toString(thisArg, args) {
    if (!IsNumberObjectOrNumber(thisArg)) {
        monitor.Throw("TypeError", 'Number.prototype.toString is not generic', thisArg.label);
        throw 'TypeScript';
    }
    var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (arg0.value === undefined) {
        arg0.value = 10;
    }
    var radix = ToInteger_1.ToInteger(arg0);
    if (typeof thisArg.value === 'number') {
        var result = thisArg.value.toString(radix.value);
        return new Value_1.Value(result, Label_1.lub(thisArg.label, radix.label));
    }
    else {
        var result = thisArg.value.PrimitiveValue.toString(radix.value);
        return new Value_1.Value(result, Label_1.lub(thisArg.value.PrimitiveLabel, radix.label));
    }
}
;
// ------------------------------------------------------------
// toLocaleString, 15.7.4.3
function toLocaleString(thisArg, args) {
    var newArgs = args.length > 0 ? args.slice(1) : args;
    return toString(thisArg, newArgs);
}
// ------------------------------------------------------------
// valueOf, 15.7.4.4
function valueOf(thisArg, args) {
    if (!IsNumberObjectOrNumber(thisArg)) {
        monitor.Throw("TypeError", 'Number.prototype.toString is not generic', thisArg.label);
        throw 'TypeScript';
    }
    if (typeof thisArg.value === 'number') {
        return new Value_1.Value(thisArg.value, thisArg.label);
    }
    var result = thisArg.value.PrimitiveValue.valueOf();
    return new Value_1.Value(result, thisArg.value.PrimitiveLabel);
}
;
// ------------------------------------------------------------
// toFixed, 15.7.4.5
function toFixed(thisArg, args) {
    var primitiveValue = assertNumber(thisArg, 'toFixed');
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var precision = ToInteger_1.ToInteger(arg0);
    return new Value_1.Value(primitiveValue.toFixed(precision.value), Label_1.lub(precision.label, thisArg.label));
}
;
// ------------------------------------------------------------
// toExponential, 15.7.4.6
function toExponential(thisArg, args) {
    var primitiveValue = assertNumber(thisArg, 'toExponential');
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var precision = ToInteger_1.ToInteger(arg0);
    return new Value_1.Value(primitiveValue.toExponential(precision.value), Label_1.lub(precision.label, thisArg.label));
}
;
// ------------------------------------------------------------
// toPrecision, 15.7.4.7
function toPrecision(thisArg, args) {
    var primitiveValue = assertNumber(thisArg, 'toPrecision');
    var arg0 = args[0] ? args[0] : new Value_1.Value(undefined, Label_1.bot);
    var lbl = Label_1.lub(arg0.label, thisArg.label);
    if (arg0.value === undefined) {
        var strX = ToString_1.ToString(thisArg); //step 2
        return new Value_1.Value(strX.value, lbl);
    }
    var precision = ToInteger_1.ToInteger(arg0); //step 3
    if (primitiveValue === NaN)
        return new Value_1.Value('NaN', lbl); //step 4
    return new Value_1.Value(primitiveValue.toPrecision(precision.value), lbl);
}
;

},{"../Constants":64,"../Conversion/ToInteger":83,"../Conversion/ToString":87,"../Define":91,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Objects/NumberObject":145,"../Value":184}],164:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("../Label");
var Value_1 = require("../Value");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ToString_1 = require("../Conversion/ToString");
var ToObject_1 = require("../Conversion/ToObject");
var IsCallable_1 = require("../Utility/IsCallable");
// ------------------------------------------------------------
// The object prototype, 15.2.4
var ObjectPrototype = /** @class */ (function (_super) {
    __extends(ObjectPrototype, _super);
    function ObjectPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Prototype = new Value_1.Value(null, Label_1.bot);
        _this.Class = 'Object';
        _this.Extensible = true;
        _this.host = host;
        return _this;
    }
    ObjectPrototype.prototype.Setup = function () {
        // 15.2.4.1
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.ObjectConstructor);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, Object.prototype.toString));
        Define_1.DefineTFT(this, constants.toLocaleString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleString, 0, Object.prototype.toLocaleString));
        Define_1.DefineTFT(this, new Value_1.Value('valueOf', Label_1.bot), new BuiltinFunctionObject_1.BuiltinFunctionObject(valueOf, 0, Object.prototype.valueOf));
        Define_1.DefineTFT(this, constants.hasOwnProperty, new BuiltinFunctionObject_1.BuiltinFunctionObject(hasOwnProperty, 1, Object.prototype.hasOwnProperty));
        Define_1.DefineTFT(this, constants.isPrototypeOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(isPrototypeOf, 1, Object.prototype.isPrototypeOf));
        Define_1.DefineTFT(this, constants.propertyIsEnumerable, new BuiltinFunctionObject_1.BuiltinFunctionObject(propertyIsEnumerable, 1, Object.prototype.propertyIsEnumerable));
    };
    return ObjectPrototype;
}(EcmaObject_1.EcmaObject));
exports.ObjectPrototype = ObjectPrototype;
// ------------------------------------------------------------
// Object.prototype.toString(), 15.2.4.2
function toString(thisArg, args) {
    if (thisArg.value === undefined)
        return new Value_1.Value('[object Undefined]', thisArg.label);
    if (thisArg.value === null)
        return new Value_1.Value('[object Null]', thisArg.label);
    var O = ToObject_1.ToObject(thisArg);
    return new Value_1.Value('[object ' + O.value.Class + ']', thisArg.label);
}
// ------------------------------------------------------------
// 15.2.4.3
function toLocaleString(thisArg, args) {
    var O = ToObject_1.ToObject(thisArg);
    var toString = O.Get(constants.toString);
    var result;
    monitor.context.pushPC(toString.label);
    if (IsCallable_1.IsCallable(toString)) {
        result = toString.Call(O, []);
        result.raise(toString.label);
    }
    else {
        monitor.Throw("TypeError", "property 'toString' of object " + O + " is not a function ", Label_1.bot);
    }
    monitor.context.popPC();
    return result;
}
// ------------------------------------------------------------
// 15.2.4.4
function valueOf(thisArg, args) {
    var o = ToObject_1.ToObject(thisArg);
    return o;
}
// ------------------------------------------------------------
// 15.2.4.5
function hasOwnProperty(thisArg, args) {
    var V = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var P = ToString_1.ToString(V);
    var O = ToObject_1.ToObject(thisArg);
    var desc = O.GetOwnProperty(P);
    var result = desc.value !== undefined;
    return new Value_1.Value(result, desc.label);
}
// ------------------------------------------------------------
// 15.2.4.6
function isPrototypeOf(thisArg, args) {
    var c = monitor.context;
    var V = args[0] || new Value_1.Value(undefined, Label_1.bot);
    if (V.value === null || V.value === undefined || typeof V.value !== 'object') {
        return new Value_1.Value(false, V.label);
    }
    c.pushPC(V.label);
    var O = ToObject_1.ToObject(thisArg);
    c.popPC();
    var lbl = Label_1.lub(V.label);
    var P = V.value.Prototype;
    while (true) {
        lbl = Label_1.lub(lbl, P.label);
        if (P.value === null) {
            return new Value_1.Value(false, lbl);
        }
        if (O.value === P.value) {
            return new Value_1.Value(true, lbl);
        }
        if (P === undefined) {
            throw new Error('Object.prototype.isPrototypeOf: object with undefined prototype');
        }
        P = P.value.Prototype;
    }
}
// ------------------------------------------------------------
// 15.2.4.7
function propertyIsEnumerable(thisArg, args) {
    var V = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var P = ToString_1.ToString(V);
    var O = ToObject_1.ToObject(thisArg);
    var desc = O.GetOwnProperty(P);
    if (desc.value === undefined) {
        return new Value_1.Value(false, desc.label);
    }
    return new Value_1.Value(desc.value.enumerable === true, Label_1.lub(desc.label, desc.value.label));
}

},{"../Constants":64,"../Conversion/ToObject":85,"../Conversion/ToString":87,"../Define":91,"../Label":123,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Utility/IsCallable":182,"../Value":184}],165:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorPrototype_1 = require("./ErrorPrototype");
var RangeErrorPrototype = /** @class */ (function (_super) {
    __extends(RangeErrorPrototype, _super);
    function RangeErrorPrototype(host) {
        return _super.call(this, host) || this;
    }
    RangeErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'RangeError');
    };
    return RangeErrorPrototype;
}(ErrorPrototype_1.ErrorPrototype));
exports.RangeErrorPrototype = RangeErrorPrototype;

},{"./ErrorPrototype":160}],166:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorPrototype_1 = require("./ErrorPrototype");
var ReferenceErrorPrototype = /** @class */ (function (_super) {
    __extends(ReferenceErrorPrototype, _super);
    function ReferenceErrorPrototype(host) {
        return _super.call(this, host) || this;
    }
    ReferenceErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'ReferenceError');
    };
    return ReferenceErrorPrototype;
}(ErrorPrototype_1.ErrorPrototype));
exports.ReferenceErrorPrototype = ReferenceErrorPrototype;

},{"./ErrorPrototype":160}],167:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var Label_1 = require("../Label");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var RegExpObject_1 = require("../Objects/RegExpObject");
// ------------------------------------------------------------
// The RegExp Prototype, 15.10.6
var RegExpPrototype = /** @class */ (function (_super) {
    __extends(RegExpPrototype, _super);
    function RegExpPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'RegExp';
        _this.host = host;
        return _this;
    }
    RegExpPrototype.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineFFF(this, constants.source, '');
        Define_1.DefineFFF(this, constants.global, false);
        Define_1.DefineFFF(this, constants.ignoreCase, false);
        Define_1.DefineFFF(this, constants.multiline, false);
        Define_1.DefineTFF(this, constants.lastIndex, 0);
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.RegExpConstructor);
        Define_1.DefineTFT(this, constants.exec, new BuiltinFunctionObject_1.BuiltinFunctionObject(exec, 1, RegExp.prototype.exec));
        Define_1.DefineTFT(this, constants.test, new BuiltinFunctionObject_1.BuiltinFunctionObject(test, 1, RegExp.prototype.test));
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, RegExp.prototype.toString));
    };
    return RegExpPrototype;
}(EcmaObject_1.EcmaObject));
exports.RegExpPrototype = RegExpPrototype;
function assertRegExp(v, caller) {
    if (!RegExpObject_1.IsRegExpObject(v)) {
        monitor.context.pushPC(v.label);
        monitor.Throw("TypeError", caller + ' is not generic', Label_1.bot);
    }
}
// ------------------------------------------------------------
// exec, 15.10.6.2
function exec(thisArg, args) {
    assertRegExp(thisArg, 'exec');
    var string = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var S = ToString_1.ToString(string);
    var lastIndex = ToInteger_1.ToInteger(thisArg.Get(constants.lastIndex));
    var pre = thisArg.value.PrimitiveValue;
    pre.lastIndex = lastIndex.value;
    var res = pre.exec(S.value);
    var l = Label_1.lub(thisArg.label, S.label, lastIndex.label);
    if (res === null) {
        return new Value_1.Value(null, l);
    }
    thisArg.Put(constants.lastIndex, new Value_1.Value(pre.lastIndex, l));
    var array = ArrayObject_1.ArrayObject.fromArray(res, l, l);
    array.DefineOwnProperty(constants.index, {
        value: res.index,
        writable: true,
        enumerable: true,
        configurable: true,
        label: l
    });
    array.DefineOwnProperty(constants.input, {
        value: res.input,
        writable: true,
        enumerable: true,
        configurable: true,
        label: l
    });
    return new Value_1.Value(array, Label_1.bot);
}
// ------------------------------------------------------------
// test, 15.10.6.3
function test(thisArg, args) {
    assertRegExp(thisArg, 'test');
    var res = exec(thisArg, args);
    return new Value_1.Value(res.value !== null, res.label);
}
// ------------------------------------------------------------
// toString, 15.10.6.3
function toString(thisArg, args) {
    assertRegExp(thisArg, 'toString');
    return new Value_1.Value(thisArg.value.PrimitiveValue.toString(), thisArg.label);
}

},{"../Constants":64,"../Conversion/ToInteger":83,"../Conversion/ToString":87,"../Define":91,"../Label":123,"../Objects/ArrayObject":132,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Objects/RegExpObject":149,"../Value":184}],168:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Value_1 = require("../Value");
var constants = require("../Constants");
var BuiltinFunctionObject_1 = require("../Objects/BuiltinFunctionObject");
var ArrayObject_1 = require("../Objects/ArrayObject");
var ToInteger_1 = require("../Conversion/ToInteger");
var ToString_1 = require("../Conversion/ToString");
var CheckObjectCoercible_1 = require("../Utility/CheckObjectCoercible");
var Define_1 = require("../Define");
var EcmaObject_1 = require("../Objects/EcmaObject");
var Label_1 = require("../Label");
var StringObject_1 = require("../Objects/StringObject");
var RegExpObject_1 = require("../Objects/RegExpObject");
var IsCallable_1 = require("../Utility/IsCallable");
var ToInt32_1 = require("../Conversion/ToInt32");
var ToNumber_1 = require("../Conversion/ToNumber");
// ------------------------------------------------------------
// The String Prototype, 15.5.4
var StringPrototype = /** @class */ (function (_super) {
    __extends(StringPrototype, _super);
    function StringPrototype(host) {
        var _this = _super.call(this) || this;
        _this.Class = 'String';
        _this.PrimitiveValue = '';
        _this.PrimitiveLabel = Label_1.bot;
        //@ts-ignore TYPES
        _this.properties = new String('');
        _this.labels.length = {
            value: Label_1.bot,
            existence: Label_1.bot
        };
        _this.host = host;
        return _this;
    }
    StringPrototype.prototype.Setup = function () {
        this.Prototype = new Value_1.Value(monitor.instances.ObjectPrototype, Label_1.bot);
        Define_1.DefineTFT(this, constants.constructor, monitor.instances.StringConstructor);
        Define_1.DefineTFT(this, constants.toString, new BuiltinFunctionObject_1.BuiltinFunctionObject(toString, 0, this.host.toString));
        Define_1.DefineTFT(this, constants.valueOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(valueOf, 0, this.host.valueOf));
        Define_1.DefineTFT(this, constants.charAt, new BuiltinFunctionObject_1.BuiltinFunctionObject(charAt, 1, this.host.charAt));
        Define_1.DefineTFT(this, constants.charCodeAt, new BuiltinFunctionObject_1.BuiltinFunctionObject(charCodeAt, 1, this.host.charCodeAt));
        Define_1.DefineTFT(this, constants.concat, new BuiltinFunctionObject_1.BuiltinFunctionObject(concat, 1, this.host.concat));
        Define_1.DefineTFT(this, constants.indexOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(indexOf, 1, this.host.indexOf));
        Define_1.DefineTFT(this, constants.lastIndexOf, new BuiltinFunctionObject_1.BuiltinFunctionObject(lastIndexOf, 1, this.host.lastIndexOf));
        Define_1.DefineTFT(this, constants.localeCompare, new BuiltinFunctionObject_1.BuiltinFunctionObject(localeCompare, 1, this.host.localeCompare));
        Define_1.DefineTFT(this, constants.match, new BuiltinFunctionObject_1.BuiltinFunctionObject(match, 1, this.host.match));
        Define_1.DefineTFT(this, constants.replace, new BuiltinFunctionObject_1.BuiltinFunctionObject(replace, 2, this.host.replace));
        Define_1.DefineTFT(this, constants.search, new BuiltinFunctionObject_1.BuiltinFunctionObject(search, 1, this.host.search));
        Define_1.DefineTFT(this, constants.slice, new BuiltinFunctionObject_1.BuiltinFunctionObject(slice, 2, this.host.slice));
        Define_1.DefineTFT(this, constants.split, new BuiltinFunctionObject_1.BuiltinFunctionObject(split, 2, this.host.split));
        Define_1.DefineTFT(this, constants.substring, new BuiltinFunctionObject_1.BuiltinFunctionObject(substring, 2, this.host.substring));
        Define_1.DefineTFT(this, constants.toLowerCase, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLowerCase, 0, this.host.toLowerCase));
        Define_1.DefineTFT(this, constants.toLocaleLowerCase, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleLowerCase, 0, this.host.toLocaleLowerCase));
        Define_1.DefineTFT(this, constants.toUpperCase, new BuiltinFunctionObject_1.BuiltinFunctionObject(toUpperCase, 0, this.host.toUpperCase));
        Define_1.DefineTFT(this, constants.toLocaleUpperCase, new BuiltinFunctionObject_1.BuiltinFunctionObject(toLocaleUpperCase, 0, this.host.toLocaleUpperCase));
        Define_1.DefineTFT(this, constants.trim, new BuiltinFunctionObject_1.BuiltinFunctionObject(trim, 0, this.host.trim));
        Define_1.DefineTFT(this, constants.substr, new BuiltinFunctionObject_1.BuiltinFunctionObject(substr, 2, this.host.substr));
    };
    return StringPrototype;
}(EcmaObject_1.EcmaObject));
exports.StringPrototype = StringPrototype;
// ------------------------------------------------------------
// toString, 15.5.4.2
function toString(thisArg, args) {
    if (typeof thisArg.value === 'string') {
        return new Value_1.Value(thisArg.value, thisArg.label);
    }
    if (!StringObject_1.IsStringObject(thisArg)) {
        monitor.Throw("TypeError", 'String.prototype.toString is not generic', thisArg.label);
        throw 'TypeScript';
    }
    var result = thisArg.value.PrimitiveValue.toString();
    return new Value_1.Value(result, thisArg.value.PrimitiveLabel);
}
// ------------------------------------------------------------
// valueOf, 15.5.4.3
var valueOf = toString;
// ------------------------------------------------------------
// charAt, 15.5.4.4
function charAt(thisArg, args) {
    var pos = args[0] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var position = ToInteger_1.ToInteger(pos);
    var c = S.value.charAt(position.value);
    return new Value_1.Value(c, Label_1.lub(position.label, S.label));
}
// ------------------------------------------------------------
// charCodeAt, 15.5.4.5
function charCodeAt(thisArg, args) {
    var pos = args[0] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var position = ToInteger_1.ToInteger(pos);
    var c = S.value.charCodeAt(position.value);
    return new Value_1.Value(c, Label_1.lub(position.label, thisArg.label));
}
// ------------------------------------------------------------
// concat, 15.5.4.6
function concat(thisArg, args) {
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var lbl = new Label_1.Label();
    var _args = [];
    for (var i = 0, len = args.length; i < len; i++) {
        var arg = ToString_1.ToString(args[i]);
        lbl = Label_1.lub(lbl, arg.label);
        _args[i] = arg.value;
    }
    var str = S.value.concat.apply(S.value, _args);
    lbl = Label_1.lub(lbl, thisArg.label);
    return new Value_1.Value(str, lbl);
}
// ------------------------------------------------------------
// indexOf, 15.5.4.7
function indexOf(thisArg, args) {
    var searchString = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var position = args[1] || new Value_1.Value(0, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var searchStr = ToString_1.ToString(searchString);
    var pos = ToInteger_1.ToInteger(position);
    var lbl = Label_1.lub(S.label, searchStr.label, pos.label);
    var str = S.value.indexOf(searchStr.value, pos.value);
    return new Value_1.Value(str, lbl);
}
// ------------------------------------------------------------
// lastIndexOf, 15.5.4.8
function lastIndexOf(thisArg, args) {
    var searchString = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var position = args[1] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var searchStr = ToString_1.ToString(searchString);
    var pos = ToNumber_1.ToNumber(position);
    if (isNaN(pos.value)) {
        pos.value = Infinity;
    }
    else {
        pos = ToInteger_1.ToInteger(pos);
    }
    var lbl = Label_1.lub(S.label, searchStr.label, pos.label);
    var str = S.value.lastIndexOf(searchStr.value, pos.value);
    return new Value_1.Value(str, lbl);
}
// ------------------------------------------------------------
// localeCompare, 15.5.4.9
function localeCompare(thisArg, args) {
    var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var that = ToString_1.ToString(arg0);
    var lbl = Label_1.lub(S.label, that.label);
    var result = S.value.localeCompare(that.value);
    return new Value_1.Value(result, lbl);
}
// ------------------------------------------------------------
// match, 15.5.4.10
function match(thisArg, args) {
    var regexp = args[0] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var rx;
    if (RegExpObject_1.IsRegExpObject(regexp)) {
        rx = regexp;
    }
    else {
        rx = monitor.instances.RegExpConstructor.Construct([regexp]);
    }
    var lbl = Label_1.lub(S.label, rx.value.PrimitiveLabel);
    monitor.assert(Label_1.le(rx.label, rx.value.PrimitiveLabel), 'String.prototype.match: label of regular expression object not below regular expression label');
    rx.value.PrimitiveLabel = lbl;
    var primitiveArray = S.value.match(rx.value.PrimitiveValue);
    if (primitiveArray === null) {
        return new Value_1.Value(null, lbl);
    }
    var array = ArrayObject_1.ArrayObject.fromArray(primitiveArray, lbl, lbl);
    array.DefineOwnProperty(constants.index, {
        value: primitiveArray.index,
        writable: true,
        enumerable: true,
        configurable: true,
        label: lbl
    });
    array.DefineOwnProperty(constants.input, {
        value: primitiveArray.input,
        writable: true,
        enumerable: true,
        configurable: true,
        label: lbl
    });
    return new Value_1.Value(array, Label_1.bot);
}
// ------------------------------------------------------------
// replace, 15.5.4.11
function replace(thisArg, args) {
    var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var sV, rV;
    var label = Label_1.lub(arg0.label, arg1.label);
    if (RegExpObject_1.IsRegExpObject(arg0)) {
        sV = arg0.value.PrimitiveValue;
    }
    else {
        var searchValue = ToString_1.ToString(arg0);
        label = Label_1.lub(label, searchValue.label);
        sV = searchValue.value;
    }
    var fL = Label_1.bot;
    if (IsCallable_1.IsCallable(arg1)) {
        rV = function () {
            var _args = [];
            for (var i = 0; i < arguments.length; i++) {
                _args[i] = new Value_1.Value(arguments[i], label);
            }
            _args.length = arguments.length;
            var res = arg1.Call(arg1, _args);
            var strRes = ToString_1.ToString(res);
            fL = Label_1.lub(fL, strRes.label);
            return strRes.value;
        };
    }
    else {
        var replaceValue = ToString_1.ToString(arg1);
        rV = replaceValue.value;
    }
    //@ts-ignore TYPES
    var res = S.value.replace(sV, rV);
    return new Value_1.Value(res, Label_1.lub(label, fL));
}
// ------------------------------------------------------------
// search, 15.5.4.12
function search(thisArg, args) {
    var regexp = args[0] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var string = ToString_1.ToString(thisArg);
    var rx;
    if (RegExpObject_1.IsRegExpObject(regexp)) {
        rx = regexp;
    }
    else {
        rx = monitor.instances.RegExpConstructor.Construct([regexp]);
    }
    var lbl = Label_1.lub(string.label, rx.value.PrimitiveLabel);
    monitor.assert(Label_1.le(rx.label, rx.value.PrimitiveLabel), 'String.prototype.match: label of regular expression object not below regular expression label');
    rx.value.PrimitiveLabel = lbl;
    var result = string.value.search(rx.value.PrimitiveValue);
    return new Value_1.Value(result, lbl);
}
// ------------------------------------------------------------
// slice, 15.5.4.13
function slice(thisArg, args) {
    var c = monitor.context;
    var start = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var end = args[1] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var len = S.value.length;
    var intStart = ToInteger_1.ToInteger(start);
    c.pushPC(end.label);
    var intEnd;
    if (end.value === undefined) {
        intEnd = new Value_1.Value(len, Label_1.lub(S.label, end.label));
    }
    else {
        intEnd = ToInteger_1.ToInteger(end);
    }
    c.popPC();
    var str = S.value.slice(intStart.value, intEnd.value);
    var lbl = Label_1.lub(S.label, intStart.label, intEnd.label);
    return new Value_1.Value(str, lbl);
}
// ------------------------------------------------------------
// split, 15.5.4.14
function split(thisArg, args) {
    var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var limit;
    var lbl = Label_1.lub(S.label, arg0.label);
    if (arg1.value === undefined) {
        lbl = Label_1.lub(lbl, arg1.label);
        limit = 4294967295;
    }
    else {
        var intLimit = ToInt32_1.ToInt32(arg1);
        lbl = Label_1.lub(lbl, intLimit.label);
        limit = intLimit.value;
    }
    var separator;
    if (arg0.value === undefined) {
        separator = undefined;
    }
    else if (RegExpObject_1.IsRegExpObject(arg0)) {
        separator = arg0.value.PrimitiveValue;
        monitor.assert(Label_1.le(arg0.label, arg0.value.PrimitiveLabel), 'String.prototype.split: label of regular expression object not below label of regular expression');
        arg0.value.PrimitiveLabel = lbl;
    }
    else {
        var stringSeparator = ToString_1.ToString(arg0);
        separator = stringSeparator.value;
        lbl = Label_1.lub(lbl, stringSeparator.label);
    }
    var primitiveArray = S.value.split(separator, limit);
    var array = ArrayObject_1.ArrayObject.fromArray(primitiveArray, lbl, lbl);
    return new Value_1.Value(array, Label_1.bot);
}
// ------------------------------------------------------------
// substring, 15.5.4.15
function substring(thisArg, args) {
    var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var start = ToInteger_1.ToInteger(arg0);
    var len = S.value.length;
    var end;
    if (arg1.value === undefined) {
        end = new Value_1.Value(len, arg1.label);
    }
    else {
        end = ToInteger_1.ToInteger(arg1);
    }
    var lbl = Label_1.lub(S.label, start.label, end.label);
    var str = S.value.substring(start.value, end.value);
    return new Value_1.Value(str, lbl);
}
// ------------------------------------------------------------
function substr(thisArg, args) {
    var arg0 = args[0] || new Value_1.Value(undefined, Label_1.bot);
    var arg1 = args[1] || new Value_1.Value(undefined, Label_1.bot);
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var start = ToInteger_1.ToInteger(arg0);
    var len = S.value.length;
    var end;
    if (arg1.value === undefined) {
        end = new Value_1.Value(len, arg1.label);
    }
    else {
        end = ToInteger_1.ToInteger(arg1);
    }
    var lbl = Label_1.lub(S.label, start.label, end.label);
    var str = S.value.substr(start.value, end.value);
    return new Value_1.Value(str, lbl);
}
// ------------------------------------------------------------
// toLowerCase, 15.5.4.16
function toLowerCase(thisArg, args) {
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var L = S.value.toLowerCase();
    return new Value_1.Value(L, S.label);
}
// ------------------------------------------------------------
// toLocaleLowerCase, 15.5.4.17
function toLocaleLowerCase(thisArg, args) {
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var L = S.value.toLocaleLowerCase();
    return new Value_1.Value(L, S.label);
}
// ------------------------------------------------------------
// toUpperCase, 15.5.4.18
function toUpperCase(thisArg, args) {
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var L = S.value.toUpperCase();
    return new Value_1.Value(L, S.label);
}
// ------------------------------------------------------------
// toLocaleUpperCase, 15.5.4.19
function toLocaleUpperCase(thisArg, args) {
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var L = S.value.toLocaleUpperCase();
    return new Value_1.Value(L, S.label);
}
// ------------------------------------------------------------
// trim, 15.5.4.20
function trim(thisArg, args) {
    CheckObjectCoercible_1.CheckObjectCoercible(thisArg);
    var S = ToString_1.ToString(thisArg);
    var T = S.value.trim();
    return new Value_1.Value(T, S.label);
}

},{"../Constants":64,"../Conversion/ToInt32":82,"../Conversion/ToInteger":83,"../Conversion/ToNumber":84,"../Conversion/ToString":87,"../Define":91,"../Label":123,"../Objects/ArrayObject":132,"../Objects/BuiltinFunctionObject":134,"../Objects/EcmaObject":137,"../Objects/RegExpObject":149,"../Objects/StringObject":150,"../Utility/CheckObjectCoercible":181,"../Utility/IsCallable":182,"../Value":184}],169:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorPrototype_1 = require("./ErrorPrototype");
var SyntaxErrorPrototype = /** @class */ (function (_super) {
    __extends(SyntaxErrorPrototype, _super);
    function SyntaxErrorPrototype(host) {
        return _super.call(this, host) || this;
    }
    SyntaxErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'SyntaxError');
    };
    return SyntaxErrorPrototype;
}(ErrorPrototype_1.ErrorPrototype));
exports.SyntaxErrorPrototype = SyntaxErrorPrototype;

},{"./ErrorPrototype":160}],170:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorPrototype_1 = require("./ErrorPrototype");
var TypeErrorPrototype = /** @class */ (function (_super) {
    __extends(TypeErrorPrototype, _super);
    function TypeErrorPrototype(host) {
        return _super.call(this, host) || this;
    }
    TypeErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'TypeError');
    };
    return TypeErrorPrototype;
}(ErrorPrototype_1.ErrorPrototype));
exports.TypeErrorPrototype = TypeErrorPrototype;

},{"./ErrorPrototype":160}],171:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorPrototype_1 = require("./ErrorPrototype");
var URIErrorPrototype = /** @class */ (function (_super) {
    __extends(URIErrorPrototype, _super);
    function URIErrorPrototype(host) {
        return _super.call(this, host) || this;
    }
    URIErrorPrototype.prototype.Setup = function () {
        this.SetupBase(monitor.instances.ErrorConstructor, 'URIError');
    };
    return URIErrorPrototype;
}(ErrorPrototype_1.ErrorPrototype));
exports.URIErrorPrototype = URIErrorPrototype;

},{"./ErrorPrototype":160}],172:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Reference_1 = require("./Reference");
var ToObject_1 = require("./Conversion/ToObject");
var Label_1 = require("./Label");
var PropertyDescriptor_1 = require("./PropertyDescriptor");
// ------------------------------------------------------------
// PutValue
function PutValue(r, v) {
    if (!(r instanceof Reference_1.Reference)) {
        monitor.Throw("ReferenceError", 'PutValue: target is not a reference', 
        //@ts-ignore TYPES
        r.label);
        throw "TS doesn't know monitor.Throw throws";
    }
    var p = r.base;
    var s = r.propertyName;
    if (r.IsUnresolvableReference()) {
        p.value = monitor.GlobalObject;
        p.Put(s, v);
    }
    else if (r.IsPropertyReference()) {
        if (r.HasPrimitiveBase()) {
            var o = ToObject_1.ToObject(p);
            if (!o.CanPut(s).value) {
                return;
            }
            var ownDesc = o.GetOwnProperty(s);
            if (ownDesc.value && PropertyDescriptor_1.IsDataDescriptor(ownDesc.value)) {
                return;
            }
            // TODO: this must be wrong; part of old handling of getter/setters?
            var desc = o.GetProperty(s);
            if (desc.value && PropertyDescriptor_1.IsAccessorDescriptor(desc.value)) {
                monitor.context.pushPC(Label_1.lub(ownDesc.label, desc.label)); // contains o.label
                //@ts-ignore TYPES
                desc.value.Set.Call(p, [v]);
                monitor.context.popPC();
            }
        }
        else {
            p.Put(s, v);
        }
    }
    else {
        p.SetMutableBinding(s, v);
    }
}
exports.PutValue = PutValue;

},{"./Conversion/ToObject":85,"./Label":123,"./PropertyDescriptor":156,"./Reference":173}],173:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Reference = /** @class */ (function () {
    function Reference(base, propertyName) {
        this.base = base;
        this.propertyName = propertyName;
    }
    Reference.prototype.GetBase = function () {
        return this.base;
    };
    Reference.prototype.GetReferencedName = function () {
        return this.propertyName;
    };
    Reference.prototype.HasPrimitiveBase = function () {
        return (typeof this.base.value === 'boolean' ||
            typeof this.base.value === 'string' ||
            typeof this.base.value === 'number');
    };
    Reference.prototype.IsPropertyReference = function () {
        return (typeof this.base.value === 'boolean' ||
            typeof this.base.value === 'string' ||
            typeof this.base.value === 'number' ||
            this.base.value !== undefined && "Class" in this.base.value);
    };
    Reference.prototype.IsUnresolvableReference = function () {
        return (this.base.value === undefined);
    };
    Reference.prototype.toString = function () {
        return ('@(' + this.base + ',' + this.propertyName + ')');
    };
    return Reference;
}());
exports.Reference = Reference;

},{}],174:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Result = /** @class */ (function () {
    function Result(value) {
        this.type = 'normal';
        this.target = null;
        this.value = value || null;
    }
    return Result;
}());
exports.Result = Result;

},{}],175:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
Object.defineProperty(exports, "__esModule", { value: true });
var Stack = /** @class */ (function () {
    function Stack() {
        this.content = [];
    }
    Stack.prototype.push = function (v) {
        this.content.push(v);
    };
    Stack.prototype.pop = function () {
        if (this.content.length === 0) {
            throw new Error('Empty Stack');
        }
        //@ts-ignore
        return this.content.pop();
    };
    Stack.prototype.peek = function () {
        if (this.content.length === 0) {
            throw new Error('Empty Stack');
        }
        return this.content[this.content.length - 1];
    };
    Stack.prototype.dup = function () {
        this.push(this.peek());
    };
    Stack.prototype.marker = function () {
        return { length: this.content.length };
    };
    Stack.prototype.reset = function (m) {
        this.content.length = m.length;
    };
    Stack.prototype.iter = function (f) {
        for (var i = 0, len = this.content.length; i < len; i++) {
            f(this.content[i]);
        }
    };
    Stack.prototype.map = function (f, m) {
        for (var i = m.length, len = this.content.length; i < len; i++) {
            this.content[i] = f(this.content[i]);
        }
    };
    Stack.prototype.size = function () {
        return this.content.length;
    };
    Stack.prototype.empty = function () {
        return this.content.length === 0;
    };
    Stack.prototype.toArray = function () {
        return this.content.slice(0);
    };
    return Stack;
}());
exports.Stack = Stack;

},{}],176:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var escodegen = require("escodegen");
// --------------------------------------------------------------------------- 
var StackTrace = /** @class */ (function () {
    function StackTrace(stack) {
        this.trace = [];
        for (var i = 0, len = stack.length; i < len; i++) {
            var context = stack[i];
            var stmt = context.codeStack.size() > 0 ? context.codeStack.peek() : undefined;
            if (stmt === undefined) {
                break;
            }
            var loc = stmt.loc;
            var source = loc.source;
            this.trace.push({ owner: context.owner, source: source, loc: loc.start, stmt: stmt });
        }
    }
    StackTrace.prototype.toString = function () {
        if (this.trace.length === 0) {
            return '';
        }
        var result;
        var len = this.trace.length;
        // last entry contains offending command
        var last = this.trace[len - 1];
        result = last.source + ':' + last.loc.line + ':' + last.loc.column + '\n';
        result = result + '    ' + escodegen.generate(last.stmt) + '\n\n';
        for (var i = len - 2; i >= 0; i--) {
            var tr = this.trace[i];
            if (tr.owner) {
                result = result + 'at ' + tr.owner + ' ';
            }
            result = result + '(' + tr.source + ':' + tr.loc.line + ':' + tr.loc.column + ')\n';
        }
        return result;
    };
    return StackTrace;
}());
exports.StackTrace = StackTrace;

},{"escodegen":5}],177:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FunctionObject_1 = require("./Objects/FunctionObject");
var Value_1 = require("./Value");
var Label_1 = require("./Label");
var Define_1 = require("./Define");
var esprima = require("esprima");
var constants = require("./Constants");
// 13.2.3
var ThrowTypeError = /** @class */ (function (_super) {
    __extends(ThrowTypeError, _super);
    function ThrowTypeError() {
        var _this = _super.call(this, [], 
        //@ts-ignore
        esprima.parse("(function() { throw new TypeError(); })").body[0].expression, new Value_1.Value(monitor.GlobalEnvironment, Label_1.bot)) || this;
        Define_1.DefineFFF(_this, constants.length, 0);
        _this.Extensible = false;
        return _this;
    }
    Object.defineProperty(ThrowTypeError, "Instance", {
        get: function () {
            if (ThrowTypeError.instance === undefined) {
                ThrowTypeError.instance = new ThrowTypeError();
            }
            return ThrowTypeError.instance;
        },
        enumerable: true,
        configurable: true
    });
    return ThrowTypeError;
}(FunctionObject_1.FunctionObject));
exports.ThrowTypeError = ThrowTypeError;

},{"./Constants":64,"./Define":91,"./Label":123,"./Objects/FunctionObject":140,"./Value":184,"esprima":18}],178:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
function IsCrawler(monitor) {
    //@ts-ignore monitor.crawler is a boolean option
    return monitor.options.get("monitor.crawler");
}
exports.IsCrawler = IsCrawler;

},{}],179:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var JSFlowMonitor_1 = require("./JSFlowMonitor");
var sms = require('source-map-support');
sms.install();
//@ts-ignore TYPES
jsflow.monitor = new JSFlowMonitor_1.JSFlowMonitor(window);
//@ts-ignore TYPES
jsflow.version = "1.2";

},{"./JSFlowMonitor":180,"source-map-support":63}],180:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MonitorBase_1 = require("../../MonitorBase");
var GlobalObject_1 = require("../../Objects/GlobalObject");
var Instances_1 = require("../../Instances");
var Value_1 = require("../../Value");
var Label_1 = require("../../Label");
var ObjectEnvironmentRecord_1 = require("../../ObjectEnvironmentRecord");
var Module_1 = require("../../Module/CommonJS/Module");
// --------------------------------------------------------------------------
var JSFlowMonitor = /** @class */ (function (_super) {
    __extends(JSFlowMonitor, _super);
    function JSFlowMonitor(global, print, log, info, warn, error) {
        var _this = _super.call(this, global, print, log, info, warn, error) || this;
        _this.instances = new Instances_1.Instances(global);
        _this.instances.Setup();
        _this.GlobalObject = new GlobalObject_1.GlobalObject(global);
        _this.GlobalEnvironment = ObjectEnvironmentRecord_1.NewObjectEnvironment(new Value_1.Value(_this.GlobalObject, Label_1.bot), new Value_1.Value(null, Label_1.bot));
        _this.context.thisValue = new Value_1.Value(_this.GlobalObject, Label_1.bot);
        _this.context.variableEnv = new Value_1.Value(_this.GlobalEnvironment, Label_1.bot);
        _this.context.lexicalEnv = new Value_1.Value(_this.GlobalEnvironment, Label_1.bot);
        _this.module = new Module_1.CommonJSModule();
        _this.GlobalObject.Put(new Value_1.Value('module', Label_1.bot), new Value_1.Value(_this.module, Label_1.bot), false);
        _this.GlobalObject.Put(new Value_1.Value('require', Label_1.bot), new Value_1.Value(_this.module.require, Label_1.bot), false);
        _this.labelBot = Label_1.bot;
        return _this;
    }
    JSFlowMonitor.prototype.ExecuteModule = function (path) {
        Module_1.CommonJSModule.LoadModule(new Value_1.Value(path, Label_1.bot));
    };
    return JSFlowMonitor;
}(MonitorBase_1.MonitorBase));
exports.JSFlowMonitor = JSFlowMonitor;

},{"../../Instances":121,"../../Label":123,"../../Module/CommonJS/Module":125,"../../MonitorBase":129,"../../ObjectEnvironmentRecord":130,"../../Objects/GlobalObject":141,"../../Value":184}],181:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// CheckObjectCoercible, 9.10
function CheckObjectCoercible(x) {
    if (x.value === null || x.value === undefined) {
        monitor.context.raisePC(x.label);
        monitor.Throw("TypeError", String(x.value) + ' is not coercible', x.label);
        throw 'TypeScript';
    }
    return true;
}
exports.CheckObjectCoercible = CheckObjectCoercible;

},{}],182:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// IsCallable, 9.11
function IsCallable(x) {
    var b = false;
    if (x.value !== null && typeof x.value === 'object') {
        b = 'Call' in x.value;
    }
    return b;
}
exports.IsCallable = IsCallable;

},{}],183:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// ES6: IsConstructor, 7.2.4
function IsConstructor(argument) {
    if (typeof argument.value !== 'object') {
        return false;
    }
    return argument.value.Construct !== undefined;
}
exports.IsConstructor = IsConstructor;

},{}],184:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = require("./Label");
// ------------------------------------------------------------
// Value - labeled values
var Value = /** @class */ (function () {
    function Value(value, label) {
        this.value = value;
        this.label = label;
        if (label === undefined) {
            throw new Error("Value with undefined label");
        }
    }
    // ------------------------------------------------------------
    Value.prototype.raise = function (l) {
        this.label = Label_1.lub(this.label, l);
    };
    // ------------------------------------------------------------
    Value.prototype.clone = function () {
        return new Value(this.value, this.label);
    };
    // ------------------------------------------------------------
    Value.prototype.toString = function () {
        if (typeof this.value === 'string') {
            return "'" + this.value + "'_" + this.label;
        }
        else {
            return this.value + "_" + this.label;
        }
    };
    // ------------------------------------------------------------
    // Ecma
    Value.prototype.GetOwnProperty = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.GetOwnProperty(s); });
    };
    Value.prototype.GetProperty = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.GetProperty(s); });
    };
    Value.prototype.Get = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.Get(s); });
    };
    Value.prototype.CanPut = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.CanPut(p); });
    };
    Value.prototype.Put = function (s, v, Throw) {
        var value = this.value;
        return InContext(this.label, function () { return value.Put(s, v, Throw); });
    };
    Value.prototype.HasProperty = function (s) {
        var value = this.value;
        return InContext(this.label, function () { return value.HasProperty(s); });
    };
    Value.prototype.Delete = function (s, Throw) {
        var value = this.value;
        return InContext(this.label, function () { return value.Delete(s, Throw); });
    };
    Value.prototype.DefaultValue = function (hint) {
        var value = this.value;
        return InContext(this.label, function () { return value.DefaultValue(hint); });
    };
    Value.prototype.DefineOwnProperty = function (s, desc, Throw) {
        var value = this.value;
        return InContext(this.label, function () { return value.DefineOwnProperty(s, desc, Throw); });
    };
    // ---
    // Function
    Value.prototype.HasInstance = function (V) {
        var value = this.value;
        return InContext(this.label, function () { return value.HasInstance(V); });
    };
    Value.prototype.Call = function (thisArg, args) {
        var value = this.value;
        return InContext(this.label, function () { return value.Call(thisArg, args); });
    };
    Value.prototype.Construct = function (args) {
        var value = this.value;
        return InContext(this.label, function () { return value.Construct(args); });
    };
    // ---
    // ObjectEnvironmentRecord, DeclarativeEnvironmentRecord
    Value.prototype.HasBinding = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.HasBinding(p); });
    };
    Value.prototype.CreateMutableBinding = function (p, d) {
        var value = this.value;
        return InContext(this.label, function () { return value.CreateMutableBinding(p, d); });
    };
    Value.prototype.GetBindingValue = function (p, s) {
        var value = this.value;
        return InContext(this.label, function () { return value.GetBindingValue(p, s); });
    };
    Value.prototype.SetMutableBinding = function (p, v, s) {
        var value = this.value;
        return InContext(this.label, function () { return value.SetMutableBinding(p, v, s); });
    };
    Value.prototype.DeleteBinding = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.DeleteBinding(p); });
    };
    Value.prototype.ImplicitThisValue = function () {
        var value = this.value;
        return InContext(this.label, function () { return value.ImplicitThisValue(); });
    };
    // DeclarativeEnvironmentRecord
    Value.prototype.CreateImmutableBinding = function (p) {
        var value = this.value;
        return InContext(this.label, function () { return value.CreateImmutableBinding(p); });
    };
    Value.prototype.InitializeImmutableBinding = function (p, v) {
        var value = this.value;
        return InContext(this.label, function () { return value.InitializeImmutableBinding(p, v); });
    };
    return Value;
}());
exports.Value = Value;
function InContext(l, f) {
    monitor.context.pushPC(l);
    var res = f();
    monitor.context.popPC();
    if (res instanceof Value) {
        res.raise(l);
    }
    return res;
}

},{"./Label":123}]},{},[179])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
